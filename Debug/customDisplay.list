
customDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b80c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  0800ba10  0800ba10  0001ba10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1d4  0800c1d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1d4  0800c1d4  0001c1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1dc  0800c1dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1dc  0800c1dc  0001c1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1e0  0800c1e0  0001c1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000106a8  200001e0  0800c3c4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00020f00  20010888  0800c3c4  00020888  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002943f  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000573a  00000000  00000000  0004964d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d78  00000000  00000000  0004ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b00  00000000  00000000  00050b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e1fc  00000000  00000000  00052600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024938  00000000  00000000  000807fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ccd1  00000000  00000000  000a5134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088b0  00000000  00000000  001b1e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b9f4 	.word	0x0800b9f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800b9f4 	.word	0x0800b9f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_DMA2D_Init+0x68>)
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <MX_DMA2D_Init+0x6c>)
 80005f0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_DMA2D_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_DMA2D_Init+0x68>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_DMA2D_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_DMA2D_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_DMA2D_Init+0x68>)
 800060c:	2201      	movs	r2, #1
 800060e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_DMA2D_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_DMA2D_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_DMA2D_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_DMA2D_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <MX_DMA2D_Init+0x68>)
 800062a:	f002 fc65 	bl	8002ef8 <HAL_DMA2D_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000634:	f001 faba 	bl	8001bac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000638:	2101      	movs	r1, #1
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_DMA2D_Init+0x68>)
 800063c:	f002 fdc6 	bl	80031cc <HAL_DMA2D_ConfigLayer>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000646:	f001 fab1 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20010630 	.word	0x20010630
 8000654:	4002b000 	.word	0x4002b000

08000658 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <HAL_DMA2D_MspInit+0x44>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d113      	bne.n	8000692 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_DMA2D_MspInit+0x48>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <HAL_DMA2D_MspInit+0x48>)
 8000670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <HAL_DMA2D_MspInit+0x48>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2105      	movs	r1, #5
 8000686:	205a      	movs	r0, #90	; 0x5a
 8000688:	f002 fb8e 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800068c:	205a      	movs	r0, #90	; 0x5a
 800068e:	f002 fba7 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	4002b000 	.word	0x4002b000
 80006a0:	40023800 	.word	0x40023800

080006a4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b090      	sub	sp, #64	; 0x40
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <MX_FMC_Init+0xd4>)
 80006c0:	4a2e      	ldr	r2, [pc, #184]	; (800077c <MX_FMC_Init+0xd8>)
 80006c2:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <MX_FMC_Init+0xd4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_FMC_Init+0xd4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_FMC_Init+0xd4>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_FMC_Init+0xd4>)
 80006d8:	2220      	movs	r2, #32
 80006da:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_FMC_Init+0xd4>)
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <MX_FMC_Init+0xd4>)
 80006e4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006e8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_FMC_Init+0xd4>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006f0:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_FMC_Init+0xd4>)
 80006f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006f6:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_FMC_Init+0xd4>)
 80006fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_FMC_Init+0xd4>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
 800070a:	2307      	movs	r3, #7
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 7;
 800070e:	2307      	movs	r3, #7
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
  SdramTiming.RowCycleDelay = 10;
 8000712:	230a      	movs	r3, #10
 8000714:	633b      	str	r3, [r7, #48]	; 0x30
  SdramTiming.WriteRecoveryTime = 6;
 8000716:	2306      	movs	r3, #6
 8000718:	637b      	str	r3, [r7, #52]	; 0x34
  SdramTiming.RPDelay = 3;
 800071a:	2303      	movs	r3, #3
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  SdramTiming.RCDDelay = 3;
 800071e:	2303      	movs	r3, #3
 8000720:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	4619      	mov	r1, r3
 8000728:	4813      	ldr	r0, [pc, #76]	; (8000778 <MX_FMC_Init+0xd4>)
 800072a:	f005 fa3d 	bl	8005ba8 <HAL_SDRAM_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000734:	f001 fa3a 	bl	8001bac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  IS42S32800G_Context_t sdramContext;
  sdramContext.TargetBank       = FMC_SDRAM_CMD_TARGET_BANK1;
 8000738:	2310      	movs	r3, #16
 800073a:	607b      	str	r3, [r7, #4]
  sdramContext.RefreshMode      = IS42S32800G_AUTOREFRESH_MODE_CMD;
 800073c:	2303      	movs	r3, #3
 800073e:	60bb      	str	r3, [r7, #8]
  sdramContext.RefreshRate      = IS42S32800G_REFRESH_COUNT;
 8000740:	f240 6306 	movw	r3, #1542	; 0x606
 8000744:	60fb      	str	r3, [r7, #12]
  sdramContext.BurstLength      = IS42S32800G_BURST_LENGTH_1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  sdramContext.BurstType        = IS42S32800G_BURST_TYPE_SEQUENTIAL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  sdramContext.CASLatency       = IS42S32800G_CAS_LATENCY_3;
 800074e:	2330      	movs	r3, #48	; 0x30
 8000750:	61bb      	str	r3, [r7, #24]
  sdramContext.OperationMode    = IS42S32800G_OPERATING_MODE_STANDARD;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  sdramContext.WriteBurstMode   = IS42S32800G_WRITEBURST_MODE_SINGLE;
 8000756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075a:	623b      	str	r3, [r7, #32]

  if(IS42S32800G_Init(&hsdram1, &sdramContext) != IS42S32800G_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_FMC_Init+0xd4>)
 8000762:	f001 fd30 	bl	80021c6 <IS42S32800G_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_FMC_Init+0xcc>
  {
    Error_Handler();
 800076c:	f001 fa1e 	bl	8001bac <Error_Handler>
  }
  /* USER CODE END FMC_Init 2 */
}
 8000770:	bf00      	nop
 8000772:	3740      	adds	r7, #64	; 0x40
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20010688 	.word	0x20010688
 800077c:	a0000140 	.word	0xa0000140

08000780 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000794:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <HAL_FMC_MspInit+0x124>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d17e      	bne.n	800089a <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 800079c:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <HAL_FMC_MspInit+0x124>)
 800079e:	2201      	movs	r2, #1
 80007a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <HAL_FMC_MspInit+0x128>)
 80007a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <HAL_FMC_MspInit+0x128>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6393      	str	r3, [r2, #56]	; 0x38
 80007ae:	4b3e      	ldr	r3, [pc, #248]	; (80008a8 <HAL_FMC_MspInit+0x128>)
 80007b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  PI5   ------> FMC_NBL3
  PI6   ------> FMC_D28
  PI7   ------> FMC_D29
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 80007ba:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80007be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007cc:	230c      	movs	r3, #12
 80007ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4835      	ldr	r0, [pc, #212]	; (80008ac <HAL_FMC_MspInit+0x12c>)
 80007d6:	f002 fd97 	bl	8003308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007da:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ec:	230c      	movs	r3, #12
 80007ee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	4619      	mov	r1, r3
 80007f4:	482e      	ldr	r0, [pc, #184]	; (80008b0 <HAL_FMC_MspInit+0x130>)
 80007f6:	f002 fd87 	bl	8003308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80007fa:	230d      	movs	r3, #13
 80007fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fe:	2302      	movs	r3, #2
 8000800:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800080a:	230c      	movs	r3, #12
 800080c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4828      	ldr	r0, [pc, #160]	; (80008b4 <HAL_FMC_MspInit+0x134>)
 8000814:	f002 fd78 	bl	8003308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000818:	f248 1337 	movw	r3, #33079	; 0x8137
 800081c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4821      	ldr	r0, [pc, #132]	; (80008b8 <HAL_FMC_MspInit+0x138>)
 8000834:	f002 fd68 	bl	8003308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000838:	f64f 7383 	movw	r3, #65411	; 0xff83
 800083c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800084a:	230c      	movs	r3, #12
 800084c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4619      	mov	r1, r3
 8000852:	481a      	ldr	r0, [pc, #104]	; (80008bc <HAL_FMC_MspInit+0x13c>)
 8000854:	f002 fd58 	bl	8003308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000858:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800085c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800086a:	230c      	movs	r3, #12
 800086c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4813      	ldr	r0, [pc, #76]	; (80008c0 <HAL_FMC_MspInit+0x140>)
 8000874:	f002 fd48 	bl	8003308 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000878:	f24c 7303 	movw	r3, #50947	; 0xc703
 800087c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800088a:	230c      	movs	r3, #12
 800088c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <HAL_FMC_MspInit+0x144>)
 8000894:	f002 fd38 	bl	8003308 <HAL_GPIO_Init>
 8000898:	e000      	b.n	800089c <HAL_FMC_MspInit+0x11c>
    return;
 800089a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200001fc 	.word	0x200001fc
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40022000 	.word	0x40022000
 80008b0:	40021400 	.word	0x40021400
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40021800 	.word	0x40021800
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40021c00 	.word	0x40021c00
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80008d0:	f7ff ff56 	bl	8000780 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80008ee:	f002 f94f 	bl	8002b90 <HAL_GetTick>
 80008f2:	4603      	mov	r3, r0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <vApplicationGetIdleTaskMemory+0x2c>)
 8000908:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4a06      	ldr	r2, [pc, #24]	; (8000928 <vApplicationGetIdleTaskMemory+0x30>)
 800090e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000200 	.word	0x20000200
 8000928:	200002c0 	.word	0x200002c0

0800092c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800092c:	b5b0      	push	{r4, r5, r7, lr}
 800092e:	b0b2      	sub	sp, #200	; 0xc8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of mutexLCD */
  osMutexDef(mutexLCD);
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  mutexLCDHandle = osMutexCreate(osMutex(mutexLCD));
 800093e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000942:	4618      	mov	r0, r3
 8000944:	f005 fe66 	bl	8006614 <osMutexCreate>
 8000948:	4603      	mov	r3, r0
 800094a:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <MX_FREERTOS_Init+0x160>)
 800094c:	6013      	str	r3, [r2, #0]

  /* definition and creation of mutexSDRAM */
  osMutexDef(mutexSDRAM);
 800094e:	2300      	movs	r3, #0
 8000950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000954:	2300      	movs	r3, #0
 8000956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  mutexSDRAMHandle = osMutexCreate(osMutex(mutexSDRAM));
 800095a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fe58 	bl	8006614 <osMutexCreate>
 8000964:	4603      	mov	r3, r0
 8000966:	4a4a      	ldr	r2, [pc, #296]	; (8000a90 <MX_FREERTOS_Init+0x164>)
 8000968:	6013      	str	r3, [r2, #0]

  /* definition and creation of mutexFLASH */
  osMutexDef(mutexFLASH);
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  mutexFLASHHandle = osMutexCreate(osMutex(mutexFLASH));
 8000976:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fe4a 	bl	8006614 <osMutexCreate>
 8000980:	4603      	mov	r3, r0
 8000982:	4a44      	ldr	r2, [pc, #272]	; (8000a94 <MX_FREERTOS_Init+0x168>)
 8000984:	6013      	str	r3, [r2, #0]

  /* definition and creation of mutexTOUCH */
  osMutexDef(mutexTOUCH);
 8000986:	2300      	movs	r3, #0
 8000988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  mutexTOUCHHandle = osMutexCreate(osMutex(mutexTOUCH));
 8000992:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000996:	4618      	mov	r0, r3
 8000998:	f005 fe3c 	bl	8006614 <osMutexCreate>
 800099c:	4603      	mov	r3, r0
 800099e:	4a3e      	ldr	r2, [pc, #248]	; (8000a98 <MX_FREERTOS_Init+0x16c>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of heartbeatTask */
  osThreadDef(heartbeatTask, execHeartbeatTask, osPriorityAboveNormal, 0, 128);
 80009a2:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <MX_FREERTOS_Init+0x170>)
 80009a4:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80009a8:	461d      	mov	r5, r3
 80009aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  heartbeatTaskHandle = osThreadCreate(osThread(heartbeatTask), NULL);
 80009b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 fdab 	bl	8006518 <osThreadCreate>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <MX_FREERTOS_Init+0x174>)
 80009c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of lcdTestTask */
  osThreadDef(lcdTestTask, execLcdTestTask, osPriorityBelowNormal, 0, 1024);
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <MX_FREERTOS_Init+0x178>)
 80009ca:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80009ce:	461d      	mov	r5, r3
 80009d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcdTestTaskHandle = osThreadCreate(osThread(lcdTestTask), NULL);
 80009dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 fd98 	bl	8006518 <osThreadCreate>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_FREERTOS_Init+0x17c>)
 80009ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdramTestTask */
  osThreadDef(sdramTestTask, execSdramTestTask, osPriorityBelowNormal, 0, 1024);
 80009ee:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_FREERTOS_Init+0x180>)
 80009f0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80009f4:	461d      	mov	r5, r3
 80009f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdramTestTaskHandle = osThreadCreate(osThread(sdramTestTask), NULL);
 8000a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 fd85 	bl	8006518 <osThreadCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <MX_FREERTOS_Init+0x184>)
 8000a12:	6013      	str	r3, [r2, #0]

  /* definition and creation of flashTestTask */
  osThreadDef(flashTestTask, execFlashTestTask, osPriorityBelowNormal, 0, 1024);
 8000a14:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_FREERTOS_Init+0x188>)
 8000a16:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a1a:	461d      	mov	r5, r3
 8000a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  flashTestTaskHandle = osThreadCreate(osThread(flashTestTask), NULL);
 8000a28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f005 fd72 	bl	8006518 <osThreadCreate>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <MX_FREERTOS_Init+0x18c>)
 8000a38:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchTestTask */
  osThreadDef(touchTestTask, execTouchTestTask, osPriorityBelowNormal, 0, 512);
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_FREERTOS_Init+0x190>)
 8000a3c:	f107 041c 	add.w	r4, r7, #28
 8000a40:	461d      	mov	r5, r3
 8000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchTestTaskHandle = osThreadCreate(osThread(touchTestTask), NULL);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f005 fd5f 	bl	8006518 <osThreadCreate>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MX_FREERTOS_Init+0x194>)
 8000a5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of touchgfxTask */
  osThreadDef(touchgfxTask, execTouchgfxTask, osPriorityLow, 0, 8192);
 8000a60:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_FREERTOS_Init+0x198>)
 8000a62:	463c      	mov	r4, r7
 8000a64:	461d      	mov	r5, r3
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchgfxTaskHandle = osThreadCreate(osThread(touchgfxTask), NULL);
 8000a72:	463b      	mov	r3, r7
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 fd4e 	bl	8006518 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <MX_FREERTOS_Init+0x19c>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a82:	bf00      	nop
 8000a84:	37c8      	adds	r7, #200	; 0xc8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bdb0      	pop	{r4, r5, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200106c4 	.word	0x200106c4
 8000a90:	200106c8 	.word	0x200106c8
 8000a94:	200106cc 	.word	0x200106cc
 8000a98:	200106d0 	.word	0x200106d0
 8000a9c:	0800ba6c 	.word	0x0800ba6c
 8000aa0:	200106d8 	.word	0x200106d8
 8000aa4:	0800ba88 	.word	0x0800ba88
 8000aa8:	200106d4 	.word	0x200106d4
 8000aac:	0800baa4 	.word	0x0800baa4
 8000ab0:	200106c0 	.word	0x200106c0
 8000ab4:	0800bac0 	.word	0x0800bac0
 8000ab8:	200106e0 	.word	0x200106e0
 8000abc:	0800badc 	.word	0x0800badc
 8000ac0:	200106dc 	.word	0x200106dc
 8000ac4:	0800baf8 	.word	0x0800baf8
 8000ac8:	200106bc 	.word	0x200106bc

08000acc <execHeartbeatTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_execHeartbeatTask */
void execHeartbeatTask(void const * argument)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execHeartbeatTask */
  printf("Starting heartbeatTask...\r\n");
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <execHeartbeatTask+0x20>)
 8000ad6:	f009 f8db 	bl	8009c90 <puts>

  while(1)
  {
    HAL_GPIO_TogglePin(LED_GRN_GPIO_Port, LED_GRN_Pin);
 8000ada:	2110      	movs	r1, #16
 8000adc:	4804      	ldr	r0, [pc, #16]	; (8000af0 <execHeartbeatTask+0x24>)
 8000ade:	f002 fdd8 	bl	8003692 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ae6:	f005 fd81 	bl	80065ec <osDelay>
    HAL_GPIO_TogglePin(LED_GRN_GPIO_Port, LED_GRN_Pin);
 8000aea:	e7f6      	b.n	8000ada <execHeartbeatTask+0xe>
 8000aec:	0800bb14 	.word	0x0800bb14
 8000af0:	40022800 	.word	0x40022800

08000af4 <execLcdTestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execLcdTestTask */
void execLcdTestTask(void const * argument)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execLcdTestTask */
  // Acquire LCD mutex
  while(osMutexWait(mutexLCDHandle, 0) != osOK)
 8000afc:	e001      	b.n	8000b02 <execLcdTestTask+0xe>
  {
    osThreadYield();
 8000afe:	f005 fd63 	bl	80065c8 <osThreadYield>
  while(osMutexWait(mutexLCDHandle, 0) != osOK)
 8000b02:	4b62      	ldr	r3, [pc, #392]	; (8000c8c <execLcdTestTask+0x198>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f005 fd9b 	bl	8006644 <osMutexWait>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f4      	bne.n	8000afe <execLcdTestTask+0xa>
  }

  printf("Starting lcdTestTask...\r\n");
 8000b14:	485e      	ldr	r0, [pc, #376]	; (8000c90 <execLcdTestTask+0x19c>)
 8000b16:	f009 f8bb 	bl	8009c90 <puts>

  printf("Starting internal framebuffer test...\r\n");
 8000b1a:	485e      	ldr	r0, [pc, #376]	; (8000c94 <execLcdTestTask+0x1a0>)
 8000b1c:	f009 f8b8 	bl	8009c90 <puts>

  // Allocate framebuffer
  uint8_t *framebuffer = malloc(480*272*3);
 8000b20:	485d      	ldr	r0, [pc, #372]	; (8000c98 <execLcdTestTask+0x1a4>)
 8000b22:	f008 fb0f 	bl	8009144 <malloc>
 8000b26:	4603      	mov	r3, r0
 8000b28:	60bb      	str	r3, [r7, #8]

  if(framebuffer == NULL)
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d104      	bne.n	8000b3a <execLcdTestTask+0x46>
  {
    printf("Could not allocate memory for framebuffer!\r\n");
 8000b30:	485a      	ldr	r0, [pc, #360]	; (8000c9c <execLcdTestTask+0x1a8>)
 8000b32:	f009 f8ad 	bl	8009c90 <puts>
    Error_Handler();
 8000b36:	f001 f839 	bl	8001bac <Error_Handler>
  }

  // Set LTDC framebuffer address
  if(HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuffer, LTDC_LAYER_1) != HAL_OK)
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4857      	ldr	r0, [pc, #348]	; (8000ca0 <execLcdTestTask+0x1ac>)
 8000b42:	f003 f8b9 	bl	8003cb8 <HAL_LTDC_SetAddress>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <execLcdTestTask+0x62>
  {
    printf("Error setting framebuffer address!\r\n");
 8000b4c:	4855      	ldr	r0, [pc, #340]	; (8000ca4 <execLcdTestTask+0x1b0>)
 8000b4e:	f009 f89f 	bl	8009c90 <puts>
    Error_Handler();
 8000b52:	f001 f82b 	bl	8001bac <Error_Handler>
  }

  // Turn on display
  HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_SET);
 8000b56:	2201      	movs	r2, #1
 8000b58:	2108      	movs	r1, #8
 8000b5a:	4853      	ldr	r0, [pc, #332]	; (8000ca8 <execLcdTestTask+0x1b4>)
 8000b5c:	f002 fd80 	bl	8003660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b66:	4851      	ldr	r0, [pc, #324]	; (8000cac <execLcdTestTask+0x1b8>)
 8000b68:	f002 fd7a 	bl	8003660 <HAL_GPIO_WritePin>

  // Write red to the display
  uint8_t *fb = framebuffer;
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60fb      	str	r3, [r7, #12]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000b70:	e00e      	b.n	8000b90 <execLcdTestTask+0x9c>
  {
    *fb++ = 0x00;   // Blue
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	60fa      	str	r2, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Green
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	60fa      	str	r2, [r7, #12]
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Red
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	60fa      	str	r2, [r7, #12]
 8000b8c:	22ff      	movs	r2, #255	; 0xff
 8000b8e:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	4b41      	ldr	r3, [pc, #260]	; (8000c98 <execLcdTestTask+0x1a4>)
 8000b94:	4413      	add	r3, r2
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d3ea      	bcc.n	8000b72 <execLcdTestTask+0x7e>
  }

  osDelay(1000);
 8000b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba0:	f005 fd24 	bl	80065ec <osDelay>

  // Write green to the display
  fb = framebuffer;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60fb      	str	r3, [r7, #12]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000ba8:	e00e      	b.n	8000bc8 <execLcdTestTask+0xd4>
  {
    *fb++ = 0x00;   // Blue
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	1c5a      	adds	r2, r3, #1
 8000bae:	60fa      	str	r2, [r7, #12]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Green
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	1c5a      	adds	r2, r3, #1
 8000bb8:	60fa      	str	r2, [r7, #12]
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Red
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	60fa      	str	r2, [r7, #12]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4b33      	ldr	r3, [pc, #204]	; (8000c98 <execLcdTestTask+0x1a4>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3ea      	bcc.n	8000baa <execLcdTestTask+0xb6>
  }

  osDelay(1000);
 8000bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd8:	f005 fd08 	bl	80065ec <osDelay>

  // Write blue to the display
  fb = framebuffer;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	60fb      	str	r3, [r7, #12]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000be0:	e00e      	b.n	8000c00 <execLcdTestTask+0x10c>
  {
    *fb++ = 0xFF;   // Blue
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1c5a      	adds	r2, r3, #1
 8000be6:	60fa      	str	r2, [r7, #12]
 8000be8:	22ff      	movs	r2, #255	; 0xff
 8000bea:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Green
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60fa      	str	r2, [r7, #12]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Red
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	60fa      	str	r2, [r7, #12]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <execLcdTestTask+0x1a4>)
 8000c04:	4413      	add	r3, r2
 8000c06:	68fa      	ldr	r2, [r7, #12]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d3ea      	bcc.n	8000be2 <execLcdTestTask+0xee>
  }

  osDelay(1000);
 8000c0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c10:	f005 fcec 	bl	80065ec <osDelay>

  // Write white to the display
  fb = framebuffer;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	60fb      	str	r3, [r7, #12]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000c18:	e00e      	b.n	8000c38 <execLcdTestTask+0x144>
  {
    *fb++ = 0xFF;   // Blue
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1c5a      	adds	r2, r3, #1
 8000c1e:	60fa      	str	r2, [r7, #12]
 8000c20:	22ff      	movs	r2, #255	; 0xff
 8000c22:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Green
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	60fa      	str	r2, [r7, #12]
 8000c2a:	22ff      	movs	r2, #255	; 0xff
 8000c2c:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Red
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1c5a      	adds	r2, r3, #1
 8000c32:	60fa      	str	r2, [r7, #12]
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <execLcdTestTask+0x1a4>)
 8000c3c:	4413      	add	r3, r2
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d3ea      	bcc.n	8000c1a <execLcdTestTask+0x126>
  }

  osDelay(1000);
 8000c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c48:	f005 fcd0 	bl	80065ec <osDelay>

  // Turn off display
  HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2108      	movs	r1, #8
 8000c50:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <execLcdTestTask+0x1b4>)
 8000c52:	f002 fd05 	bl	8003660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <execLcdTestTask+0x1b8>)
 8000c5e:	f002 fcff 	bl	8003660 <HAL_GPIO_WritePin>

  printf("Ending lcdTestTask...\r\n");
 8000c62:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <execLcdTestTask+0x1bc>)
 8000c64:	f009 f814 	bl	8009c90 <puts>

  free(framebuffer);
 8000c68:	68b8      	ldr	r0, [r7, #8]
 8000c6a:	f008 fa73 	bl	8009154 <free>
  osMutexRelease(mutexLCDHandle);
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <execLcdTestTask+0x198>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f005 fd34 	bl	80066e0 <osMutexRelease>
  osThreadTerminate(lcdTestTaskHandle);
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <execLcdTestTask+0x1c0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 fc97 	bl	80065b0 <osThreadTerminate>
  /* USER CODE END execLcdTestTask */
}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200106c4 	.word	0x200106c4
 8000c90:	0800bb30 	.word	0x0800bb30
 8000c94:	0800bb4c 	.word	0x0800bb4c
 8000c98:	0005fa00 	.word	0x0005fa00
 8000c9c:	0800bb74 	.word	0x0800bb74
 8000ca0:	20010730 	.word	0x20010730
 8000ca4:	0800bba0 	.word	0x0800bba0
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	0800bbc4 	.word	0x0800bbc4
 8000cb4:	200106d4 	.word	0x200106d4

08000cb8 <execSdramTestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execSdramTestTask */
void execSdramTestTask(void const * argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08c      	sub	sp, #48	; 0x30
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execSdramTestTask */
  volatile uint32_t *externalRAM = (uint32_t *)IS42S32800G_ADDRESS;
 8000cc0:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000cc4:	61fb      	str	r3, [r7, #28]
  const uint32_t sizeRAM = IS42S32800G_SIZE;
 8000cc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cca:	61bb      	str	r3, [r7, #24]
  uint32_t i = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t before, after;
  float elapsed;

  // Acquire SDRAM mutex
  while(osMutexWait(mutexSDRAMHandle, 0) != osOK)
 8000cd0:	e001      	b.n	8000cd6 <execSdramTestTask+0x1e>
  {
    osThreadYield();
 8000cd2:	f005 fc79 	bl	80065c8 <osThreadYield>
  while(osMutexWait(mutexSDRAMHandle, 0) != osOK)
 8000cd6:	4ba8      	ldr	r3, [pc, #672]	; (8000f78 <execSdramTestTask+0x2c0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f005 fcb1 	bl	8006644 <osMutexWait>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f4      	bne.n	8000cd2 <execSdramTestTask+0x1a>
  }

  printf("Starting sdramTestTask...\r\n");
 8000ce8:	48a4      	ldr	r0, [pc, #656]	; (8000f7c <execSdramTestTask+0x2c4>)
 8000cea:	f008 ffd1 	bl	8009c90 <puts>

  // Write Test
  before = HAL_GetTick();
 8000cee:	f001 ff4f 	bl	8002b90 <HAL_GetTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	617b      	str	r3, [r7, #20]
  while(i < (sizeRAM/4))
 8000cf6:	e008      	b.n	8000d0a <execSdramTestTask+0x52>
  {
      *(externalRAM + i) = i;
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	69fa      	ldr	r2, [r7, #28]
 8000cfe:	4413      	add	r3, r2
 8000d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d02:	601a      	str	r2, [r3, #0]
      i++;
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	3301      	adds	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  while(i < (sizeRAM/4))
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3f1      	bcc.n	8000cf8 <execSdramTestTask+0x40>
  }
  after = HAL_GetTick();
 8000d14:	f001 ff3c 	bl	8002b90 <HAL_GetTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	613b      	str	r3, [r7, #16]

  elapsed = ((after - before) / 1000.0);
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000d2a:	ed9f 5b91 	vldr	d5, [pc, #580]	; 8000f70 <execSdramTestTask+0x2b8>
 8000d2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d36:	edc7 7a03 	vstr	s15, [r7, #12]

  printf("RAM - Wrote %ld words in %3.2f seconds (%3.2fMBs)\n",
 8000d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d3e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
          i, elapsed, ((((i * 4) / 1024) / 1024) / elapsed) );
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	0d1b      	lsrs	r3, r3, #20
 8000d48:	ee07 3a90 	vmov	s15, r3
 8000d4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d50:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
  printf("RAM - Wrote %ld words in %3.2f seconds (%3.2fMBs)\n",
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	ed8d 7b00 	vstr	d7, [sp]
 8000d60:	ec53 2b15 	vmov	r2, r3, d5
 8000d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d66:	4886      	ldr	r0, [pc, #536]	; (8000f80 <execSdramTestTask+0x2c8>)
 8000d68:	f008 ff0c 	bl	8009b84 <iprintf>

  // Read Test
  i = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24

  before = HAL_GetTick();
 8000d70:	f001 ff0e 	bl	8002b90 <HAL_GetTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	617b      	str	r3, [r7, #20]
  while(i < (sizeRAM/4))
 8000d78:	e00a      	b.n	8000d90 <execSdramTestTask+0xd8>
  {
      if(*(externalRAM + i) != i)
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d108      	bne.n	8000d9c <execSdramTestTask+0xe4>
      {
          break;
      }
      else
      {
          i++;
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  while(i < (sizeRAM/4))
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	089b      	lsrs	r3, r3, #2
 8000d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3ef      	bcc.n	8000d7a <execSdramTestTask+0xc2>
 8000d9a:	e000      	b.n	8000d9e <execSdramTestTask+0xe6>
          break;
 8000d9c:	bf00      	nop
      }
  }
  after = HAL_GetTick();
 8000d9e:	f001 fef7 	bl	8002b90 <HAL_GetTick>
 8000da2:	4603      	mov	r3, r0
 8000da4:	613b      	str	r3, [r7, #16]

  elapsed = ((after - before) / 1000.0);
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000db4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000f70 <execSdramTestTask+0x2b8>
 8000db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dc0:	edc7 7a03 	vstr	s15, [r7, #12]

  printf("RAM - Read %ld words in %3.2f seconds (%3.2fMBs)\n",
 8000dc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
          i, elapsed, ((((i * 4) / 1024) / 1024) / elapsed) );
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	0d1b      	lsrs	r3, r3, #20
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000dda:	ed97 7a03 	vldr	s14, [r7, #12]
 8000dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
  printf("RAM - Read %ld words in %3.2f seconds (%3.2fMBs)\n",
 8000de2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de6:	ed8d 7b00 	vstr	d7, [sp]
 8000dea:	ec53 2b15 	vmov	r2, r3, d5
 8000dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000df0:	4864      	ldr	r0, [pc, #400]	; (8000f84 <execSdramTestTask+0x2cc>)
 8000df2:	f008 fec7 	bl	8009b84 <iprintf>

  // Framebuffer in external SDRAM

  // Acquire LCD mutex
  while(osMutexWait(mutexLCDHandle, 0) != osOK)
 8000df6:	e001      	b.n	8000dfc <execSdramTestTask+0x144>
  {
    osThreadYield();
 8000df8:	f005 fbe6 	bl	80065c8 <osThreadYield>
  while(osMutexWait(mutexLCDHandle, 0) != osOK)
 8000dfc:	4b62      	ldr	r3, [pc, #392]	; (8000f88 <execSdramTestTask+0x2d0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 fc1e 	bl	8006644 <osMutexWait>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f4      	bne.n	8000df8 <execSdramTestTask+0x140>
  }

  printf("Starting external framebuffer test...\r\n");
 8000e0e:	485f      	ldr	r0, [pc, #380]	; (8000f8c <execSdramTestTask+0x2d4>)
 8000e10:	f008 ff3e 	bl	8009c90 <puts>

  uint8_t *framebuffer = (uint8_t *)0xC0000000;
 8000e14:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e18:	60bb      	str	r3, [r7, #8]

  if(HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuffer, LTDC_LAYER_1) != HAL_OK)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	485b      	ldr	r0, [pc, #364]	; (8000f90 <execSdramTestTask+0x2d8>)
 8000e22:	f002 ff49 	bl	8003cb8 <HAL_LTDC_SetAddress>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d004      	beq.n	8000e36 <execSdramTestTask+0x17e>
  {
    printf("Error changing LTDC framebuffer address!");
 8000e2c:	4859      	ldr	r0, [pc, #356]	; (8000f94 <execSdramTestTask+0x2dc>)
 8000e2e:	f008 fea9 	bl	8009b84 <iprintf>
    Error_Handler();
 8000e32:	f000 febb 	bl	8001bac <Error_Handler>
  }

  // Turn on display
  HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4857      	ldr	r0, [pc, #348]	; (8000f98 <execSdramTestTask+0x2e0>)
 8000e3c:	f002 fc10 	bl	8003660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e46:	4855      	ldr	r0, [pc, #340]	; (8000f9c <execSdramTestTask+0x2e4>)
 8000e48:	f002 fc0a 	bl	8003660 <HAL_GPIO_WritePin>

  // Write red to the display
  uint8_t *fb = framebuffer;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	623b      	str	r3, [r7, #32]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000e50:	e00e      	b.n	8000e70 <execSdramTestTask+0x1b8>
  {
    *fb++ = 0x00;   // Blue
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	623a      	str	r2, [r7, #32]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Green
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	623a      	str	r2, [r7, #32]
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Red
 8000e66:	6a3b      	ldr	r3, [r7, #32]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	623a      	str	r2, [r7, #32]
 8000e6c:	22ff      	movs	r2, #255	; 0xff
 8000e6e:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <execSdramTestTask+0x2e8>)
 8000e74:	4413      	add	r3, r2
 8000e76:	6a3a      	ldr	r2, [r7, #32]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d3ea      	bcc.n	8000e52 <execSdramTestTask+0x19a>
  }

  osDelay(1000);
 8000e7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e80:	f005 fbb4 	bl	80065ec <osDelay>

  // Write green to the display
  fb = framebuffer;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	623b      	str	r3, [r7, #32]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000e88:	e00e      	b.n	8000ea8 <execSdramTestTask+0x1f0>
  {
    *fb++ = 0x00;   // Blue
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	623a      	str	r2, [r7, #32]
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Green
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	623a      	str	r2, [r7, #32]
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Red
 8000e9e:	6a3b      	ldr	r3, [r7, #32]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	623a      	str	r2, [r7, #32]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <execSdramTestTask+0x2e8>)
 8000eac:	4413      	add	r3, r2
 8000eae:	6a3a      	ldr	r2, [r7, #32]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d3ea      	bcc.n	8000e8a <execSdramTestTask+0x1d2>
  }

  osDelay(1000);
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	f005 fb98 	bl	80065ec <osDelay>

  // Write blue to the display
  fb = framebuffer;
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	623b      	str	r3, [r7, #32]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000ec0:	e00e      	b.n	8000ee0 <execSdramTestTask+0x228>
  {
    *fb++ = 0xFF;   // Blue
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	623a      	str	r2, [r7, #32]
 8000ec8:	22ff      	movs	r2, #255	; 0xff
 8000eca:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Green
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	623a      	str	r2, [r7, #32]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
    *fb++ = 0x00;   // Red
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	623a      	str	r2, [r7, #32]
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <execSdramTestTask+0x2e8>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	6a3a      	ldr	r2, [r7, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d3ea      	bcc.n	8000ec2 <execSdramTestTask+0x20a>
  }

  osDelay(1000);
 8000eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef0:	f005 fb7c 	bl	80065ec <osDelay>

  // Write white to the display
  fb = framebuffer;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	623b      	str	r3, [r7, #32]

  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000ef8:	e00e      	b.n	8000f18 <execSdramTestTask+0x260>
  {
    *fb++ = 0xFF;   // Blue
 8000efa:	6a3b      	ldr	r3, [r7, #32]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	623a      	str	r2, [r7, #32]
 8000f00:	22ff      	movs	r2, #255	; 0xff
 8000f02:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Green
 8000f04:	6a3b      	ldr	r3, [r7, #32]
 8000f06:	1c5a      	adds	r2, r3, #1
 8000f08:	623a      	str	r2, [r7, #32]
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	701a      	strb	r2, [r3, #0]
    *fb++ = 0xFF;   // Red
 8000f0e:	6a3b      	ldr	r3, [r7, #32]
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	623a      	str	r2, [r7, #32]
 8000f14:	22ff      	movs	r2, #255	; 0xff
 8000f16:	701a      	strb	r2, [r3, #0]
  while(fb < (uint8_t *)(framebuffer + (480*272*3)))
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <execSdramTestTask+0x2e8>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	6a3a      	ldr	r2, [r7, #32]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3ea      	bcc.n	8000efa <execSdramTestTask+0x242>
  }

  osDelay(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f005 fb60 	bl	80065ec <osDelay>

  // Turn off display
  HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2108      	movs	r1, #8
 8000f30:	4819      	ldr	r0, [pc, #100]	; (8000f98 <execSdramTestTask+0x2e0>)
 8000f32:	f002 fb95 	bl	8003660 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3c:	4817      	ldr	r0, [pc, #92]	; (8000f9c <execSdramTestTask+0x2e4>)
 8000f3e:	f002 fb8f 	bl	8003660 <HAL_GPIO_WritePin>

  printf("Ending sdramTestTask...\r\n");
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <execSdramTestTask+0x2ec>)
 8000f44:	f008 fea4 	bl	8009c90 <puts>
  osMutexRelease(mutexLCDHandle);
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <execSdramTestTask+0x2d0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 fbc7 	bl	80066e0 <osMutexRelease>
  osMutexRelease(mutexSDRAMHandle);
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <execSdramTestTask+0x2c0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 fbc2 	bl	80066e0 <osMutexRelease>
  osThreadTerminate(sdramTestTaskHandle);
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <execSdramTestTask+0x2f0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fb25 	bl	80065b0 <osThreadTerminate>
  /* USER CODE END execSdramTestTask */
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	; 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	00000000 	.word	0x00000000
 8000f74:	408f4000 	.word	0x408f4000
 8000f78:	200106c8 	.word	0x200106c8
 8000f7c:	0800bbdc 	.word	0x0800bbdc
 8000f80:	0800bbf8 	.word	0x0800bbf8
 8000f84:	0800bc2c 	.word	0x0800bc2c
 8000f88:	200106c4 	.word	0x200106c4
 8000f8c:	0800bc60 	.word	0x0800bc60
 8000f90:	20010730 	.word	0x20010730
 8000f94:	0800bc88 	.word	0x0800bc88
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40022000 	.word	0x40022000
 8000fa0:	0005fa00 	.word	0x0005fa00
 8000fa4:	0800bcb4 	.word	0x0800bcb4
 8000fa8:	200106c0 	.word	0x200106c0
 8000fac:	00000000 	.word	0x00000000

08000fb0 <execFlashTestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execFlashTestTask */
void execFlashTestTask(void const * argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execFlashTestTask */
  while(osMutexWait(mutexFLASHHandle, 0) != osOK)
 8000fb8:	e001      	b.n	8000fbe <execFlashTestTask+0xe>
  {
    osThreadYield();
 8000fba:	f005 fb05 	bl	80065c8 <osThreadYield>
  while(osMutexWait(mutexFLASHHandle, 0) != osOK)
 8000fbe:	4b82      	ldr	r3, [pc, #520]	; (80011c8 <execFlashTestTask+0x218>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 fb3d 	bl	8006644 <osMutexWait>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f4      	bne.n	8000fba <execFlashTestTask+0xa>
  }

  printf("Starting flashTestTask...\r\n");
 8000fd0:	487e      	ldr	r0, [pc, #504]	; (80011cc <execFlashTestTask+0x21c>)
 8000fd2:	f008 fe5d 	bl	8009c90 <puts>
  uint8_t *buffer_test;

  // Create test data
  do
  {
    buffer_test = malloc((size_t)MT25QL512ABB_SECTOR_64K);
 8000fd6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000fda:	f008 f8b3 	bl	8009144 <malloc>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	617b      	str	r3, [r7, #20]

    if(buffer_test == NULL)
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <execFlashTestTask+0x3e>
    {
      osDelay(10);
 8000fe8:	200a      	movs	r0, #10
 8000fea:	f005 faff 	bl	80065ec <osDelay>
    }
  }
  while(buffer_test == NULL);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <execFlashTestTask+0x26>

  for (var = 0; var < MT25QL512ABB_SECTOR_64K; var++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	e008      	b.n	800100c <execFlashTestTask+0x5c>
  {
    buffer_test[var] = (var & 0xff);
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	4413      	add	r3, r2
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
  for (var = 0; var < MT25QL512ABB_SECTOR_64K; var++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001012:	d3f2      	bcc.n	8000ffa <execFlashTestTask+0x4a>
  }

  // Exit memory mapped mode
  if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
 8001014:	486e      	ldr	r0, [pc, #440]	; (80011d0 <execFlashTestTask+0x220>)
 8001016:	f003 fac4 	bl	80045a2 <HAL_QSPI_Abort>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <execFlashTestTask+0x74>
  {
    Error_Handler();
 8001020:	f000 fdc4 	bl	8001bac <Error_Handler>
  }

  // Erase Sector
  before = HAL_GetTick();
 8001024:	f001 fdb4 	bl	8002b90 <HAL_GetTick>
 8001028:	4603      	mov	r3, r0
 800102a:	613b      	str	r3, [r7, #16]
  if(MT25QL512ABB_BlockErase(&hqspi,
 800102c:	2302      	movs	r3, #2
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4b68      	ldr	r3, [pc, #416]	; (80011d4 <execFlashTestTask+0x224>)
 8001032:	2201      	movs	r2, #1
 8001034:	2106      	movs	r1, #6
 8001036:	4866      	ldr	r0, [pc, #408]	; (80011d0 <execFlashTestTask+0x220>)
 8001038:	f001 fafa 	bl	8002630 <MT25QL512ABB_BlockErase>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <execFlashTestTask+0x96>
                                MT25QL512ABB_4BYTES_SIZE,
                                1023 * MT25QL512ABB_SECTOR_64K,
                                MT25QL512ABB_ERASE_64K)
      != MT25QL512ABB_OK)
  {
    Error_Handler();
 8001042:	f000 fdb3 	bl	8001bac <Error_Handler>
  }

  // Poll WIP
  if(MT25QL512ABB_AutoPollingMemReady(&hqspi,
 8001046:	2200      	movs	r2, #0
 8001048:	2106      	movs	r1, #6
 800104a:	4861      	ldr	r0, [pc, #388]	; (80011d0 <execFlashTestTask+0x220>)
 800104c:	f001 f9c5 	bl	80023da <MT25QL512ABB_AutoPollingMemReady>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <execFlashTestTask+0xaa>
                                        MT25QL512ABB_QPI_MODE,
                                        MT25QL512ABB_DUALFLASH_DISABLE)
      != MT25QL512ABB_OK)
  {
    Error_Handler();
 8001056:	f000 fda9 	bl	8001bac <Error_Handler>
  }

  // Write test data
  for(int i = 0; i < MT25QL512ABB_SECTOR_64K /  MT25QL512ABB_PAGE_SIZE; i++)
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	e02d      	b.n	80010bc <execFlashTestTask+0x10c>
  {
    // Set WIP
    if(MT25QL512ABB_WriteEnable(&hqspi,
 8001060:	2200      	movs	r2, #0
 8001062:	2106      	movs	r1, #6
 8001064:	485a      	ldr	r0, [pc, #360]	; (80011d0 <execFlashTestTask+0x220>)
 8001066:	f001 fc1f 	bl	80028a8 <MT25QL512ABB_WriteEnable>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <execFlashTestTask+0xc4>
                                  MT25QL512ABB_QPI_MODE,
                                  MT25QL512ABB_DUALFLASH_DISABLE)
        != MT25QL512ABB_OK)

    {
      Error_Handler();
 8001070:	f000 fd9c 	bl	8001bac <Error_Handler>
    }
    // Program page
    if(MT25QL512ABB_PageProgram(&hqspi,
                                  MT25QL512ABB_QPI_MODE,
                                  MT25QL512ABB_4BYTES_SIZE,
                                  (buffer_test + (MT25QL512ABB_PAGE_SIZE * i)),
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	021b      	lsls	r3, r3, #8
    if(MT25QL512ABB_PageProgram(&hqspi,
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	18d1      	adds	r1, r2, r3
                                  ((1023 * MT25QL512ABB_SECTOR_64K) + (MT25QL512ABB_PAGE_SIZE * i)),
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <execFlashTestTask+0x228>)
 8001080:	4413      	add	r3, r2
    if(MT25QL512ABB_PageProgram(&hqspi,
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	460b      	mov	r3, r1
 800108e:	2201      	movs	r2, #1
 8001090:	2106      	movs	r1, #6
 8001092:	484f      	ldr	r0, [pc, #316]	; (80011d0 <execFlashTestTask+0x220>)
 8001094:	f001 fa0c 	bl	80024b0 <MT25QL512ABB_PageProgram>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <execFlashTestTask+0xf2>
                                  MT25QL512ABB_PAGE_SIZE)
        != MT25QL512ABB_OK)
    {
      Error_Handler();
 800109e:	f000 fd85 	bl	8001bac <Error_Handler>
    }
    // Poll WIP
    if(MT25QL512ABB_AutoPollingMemReady(&hqspi,
 80010a2:	2200      	movs	r2, #0
 80010a4:	2106      	movs	r1, #6
 80010a6:	484a      	ldr	r0, [pc, #296]	; (80011d0 <execFlashTestTask+0x220>)
 80010a8:	f001 f997 	bl	80023da <MT25QL512ABB_AutoPollingMemReady>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <execFlashTestTask+0x106>
                                          MT25QL512ABB_QPI_MODE,
                                          MT25QL512ABB_DUALFLASH_DISABLE)
        != MT25QL512ABB_OK)
    {
      Error_Handler();
 80010b2:	f000 fd7b 	bl	8001bac <Error_Handler>
  for(int i = 0; i < MT25QL512ABB_SECTOR_64K /  MT25QL512ABB_PAGE_SIZE; i++)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2bff      	cmp	r3, #255	; 0xff
 80010c0:	d9ce      	bls.n	8001060 <execFlashTestTask+0xb0>
    }
  }
  after = HAL_GetTick();
 80010c2:	f001 fd65 	bl	8002b90 <HAL_GetTick>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

  elapsed = ((after - before) / 1000.0);
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010d8:	ed9f 5b39 	vldr	d5, [pc, #228]	; 80011c0 <execFlashTestTask+0x210>
 80010dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010e4:	edc7 7a02 	vstr	s15, [r7, #8]

  printf("FLASH - Wrote %ld bytes in %3.2f seconds (%3.2fKBs)\n",
 80010e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ec:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
      (uint32_t)MT25QL512ABB_SECTOR_64K, elapsed, (float)(((MT25QL512ABB_SECTOR_64K) / 1024) / elapsed) );
 80010f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80011dc <execFlashTestTask+0x22c>
 80010f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80010f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
  printf("FLASH - Wrote %ld bytes in %3.2f seconds (%3.2fKBs)\n",
 80010fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001100:	ed8d 7b00 	vstr	d7, [sp]
 8001104:	ec53 2b15 	vmov	r2, r3, d5
 8001108:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800110c:	4834      	ldr	r0, [pc, #208]	; (80011e0 <execFlashTestTask+0x230>)
 800110e:	f008 fd39 	bl	8009b84 <iprintf>

  // Put back into memory mapped mode
  if(MT25QL512ABB_EnableMemoryMappedModeSTR(&hqspi,
 8001112:	2201      	movs	r2, #1
 8001114:	2106      	movs	r1, #6
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <execFlashTestTask+0x220>)
 8001118:	f001 fafc 	bl	8002714 <MT25QL512ABB_EnableMemoryMappedModeSTR>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <execFlashTestTask+0x176>
      MT25QL512ABB_QPI_MODE,
      MT25QL512ABB_4BYTES_SIZE)
  != MT25QL512ABB_OK)
  {
    Error_Handler();
 8001122:	f000 fd43 	bl	8001bac <Error_Handler>
  }

  // Check that written data matches
  before = HAL_GetTick();
 8001126:	f001 fd33 	bl	8002b90 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	613b      	str	r3, [r7, #16]
  if(memcmp(buffer_test, (uint8_t *)(0x90000000 + (1023 * MT25QL512ABB_SECTOR_64K)), MT25QL512ABB_SECTOR_64K))
 800112e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001132:	492c      	ldr	r1, [pc, #176]	; (80011e4 <execFlashTestTask+0x234>)
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f008 f815 	bl	8009164 <memcmp>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <execFlashTestTask+0x194>
  {
    Error_Handler();
 8001140:	f000 fd34 	bl	8001bac <Error_Handler>
  }
  after = HAL_GetTick();
 8001144:	f001 fd24 	bl	8002b90 <HAL_GetTick>
 8001148:	4603      	mov	r3, r0
 800114a:	60fb      	str	r3, [r7, #12]

  elapsed = ((after - before) / 1000.0);
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800115a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80011c0 <execFlashTestTask+0x210>
 800115e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001162:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001166:	edc7 7a02 	vstr	s15, [r7, #8]

  printf("FLASH - Read %ld bytes in %3.2f seconds (%3.2fKBs)\n",
 800116a:	edd7 7a02 	vldr	s15, [r7, #8]
 800116e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
        (uint32_t)MT25QL512ABB_SECTOR_64K, elapsed, (float)(((MT25QL512ABB_SECTOR_64K) / 1024) / elapsed) );
 8001172:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80011dc <execFlashTestTask+0x22c>
 8001176:	ed97 7a02 	vldr	s14, [r7, #8]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
  printf("FLASH - Read %ld bytes in %3.2f seconds (%3.2fKBs)\n",
 800117e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001182:	ed8d 7b00 	vstr	d7, [sp]
 8001186:	ec53 2b15 	vmov	r2, r3, d5
 800118a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800118e:	4816      	ldr	r0, [pc, #88]	; (80011e8 <execFlashTestTask+0x238>)
 8001190:	f008 fcf8 	bl	8009b84 <iprintf>


  printf("Ending flashTestTask...\r\n");
 8001194:	4815      	ldr	r0, [pc, #84]	; (80011ec <execFlashTestTask+0x23c>)
 8001196:	f008 fd7b 	bl	8009c90 <puts>
  free(buffer_test);
 800119a:	6978      	ldr	r0, [r7, #20]
 800119c:	f007 ffda 	bl	8009154 <free>
  osMutexRelease(mutexFLASHHandle);
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <execFlashTestTask+0x218>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f005 fa9b 	bl	80066e0 <osMutexRelease>
  osThreadTerminate(flashTestTaskHandle);
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <execFlashTestTask+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 f9fe 	bl	80065b0 <osThreadTerminate>
  /* USER CODE END execFlashTestTask */
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	f3af 8000 	nop.w
 80011c0:	00000000 	.word	0x00000000
 80011c4:	408f4000 	.word	0x408f4000
 80011c8:	200106cc 	.word	0x200106cc
 80011cc:	0800bcd0 	.word	0x0800bcd0
 80011d0:	200107d8 	.word	0x200107d8
 80011d4:	03ff0000 	.word	0x03ff0000
 80011d8:	0003ff00 	.word	0x0003ff00
 80011dc:	42800000 	.word	0x42800000
 80011e0:	0800bcec 	.word	0x0800bcec
 80011e4:	93ff0000 	.word	0x93ff0000
 80011e8:	0800bd24 	.word	0x0800bd24
 80011ec:	0800bd58 	.word	0x0800bd58
 80011f0:	200106e0 	.word	0x200106e0

080011f4 <execTouchTestTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execTouchTestTask */
void execTouchTestTask(void const * argument)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execTouchTestTask */
  while(osMutexWait(mutexTOUCHHandle, 0) != osOK)
 80011fc:	e001      	b.n	8001202 <execTouchTestTask+0xe>
  {
    osThreadYield();
 80011fe:	f005 f9e3 	bl	80065c8 <osThreadYield>
  while(osMutexWait(mutexTOUCHHandle, 0) != osOK)
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <execTouchTestTask+0x48>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f005 fa1b 	bl	8006644 <osMutexWait>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f4      	bne.n	80011fe <execTouchTestTask+0xa>
  }

  printf("Starting touchTestTask...\r\n");
 8001214:	480a      	ldr	r0, [pc, #40]	; (8001240 <execTouchTestTask+0x4c>)
 8001216:	f008 fd3b 	bl	8009c90 <puts>



  printf("Ending touchTestTask...\r\n");
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <execTouchTestTask+0x50>)
 800121c:	f008 fd38 	bl	8009c90 <puts>
  osMutexRelease(mutexTOUCHHandle);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <execTouchTestTask+0x48>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f005 fa5b 	bl	80066e0 <osMutexRelease>
  osThreadTerminate(touchTestTaskHandle);
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <execTouchTestTask+0x54>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f005 f9be 	bl	80065b0 <osThreadTerminate>
  /* USER CODE END execTouchTestTask */
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200106d0 	.word	0x200106d0
 8001240:	0800bd74 	.word	0x0800bd74
 8001244:	0800bd90 	.word	0x0800bd90
 8001248:	200106dc 	.word	0x200106dc

0800124c <execTouchgfxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_execTouchgfxTask */
void execTouchgfxTask(void const * argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN execTouchgfxTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f005 f9c9 	bl	80065ec <osDelay>
 800125a:	e7fb      	b.n	8001254 <execTouchgfxTask+0x8>

0800125c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	; 0x40
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001272:	4b71      	ldr	r3, [pc, #452]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a70      	ldr	r2, [pc, #448]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b6e      	ldr	r3, [pc, #440]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800128a:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <MX_GPIO_Init+0x1dc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b68      	ldr	r3, [pc, #416]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b65      	ldr	r3, [pc, #404]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a64      	ldr	r2, [pc, #400]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b62      	ldr	r3, [pc, #392]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ba:	4b5f      	ldr	r3, [pc, #380]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a5e      	ldr	r2, [pc, #376]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b5c      	ldr	r3, [pc, #368]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	4b59      	ldr	r3, [pc, #356]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a58      	ldr	r2, [pc, #352]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a52      	ldr	r2, [pc, #328]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b50      	ldr	r3, [pc, #320]	; (8001438 <MX_GPIO_Init+0x1dc>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800131a:	4b47      	ldr	r3, [pc, #284]	; (8001438 <MX_GPIO_Init+0x1dc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a46      	ldr	r2, [pc, #280]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b44      	ldr	r3, [pc, #272]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001332:	4b41      	ldr	r3, [pc, #260]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a40      	ldr	r2, [pc, #256]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b3b      	ldr	r3, [pc, #236]	; (8001438 <MX_GPIO_Init+0x1dc>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a3a      	ldr	r2, [pc, #232]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a34      	ldr	r2, [pc, #208]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <MX_GPIO_Init+0x1dc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2108      	movs	r1, #8
 800137e:	482f      	ldr	r0, [pc, #188]	; (800143c <MX_GPIO_Init+0x1e0>)
 8001380:	f002 f96e 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800138a:	482d      	ldr	r0, [pc, #180]	; (8001440 <MX_GPIO_Init+0x1e4>)
 800138c:	f002 f968 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOUCH_RST_GPIO_Port, TOUCH_RST_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2120      	movs	r1, #32
 8001394:	482b      	ldr	r0, [pc, #172]	; (8001444 <MX_GPIO_Init+0x1e8>)
 8001396:	f002 f963 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, LED_RED_Pin|LED_YEL_Pin|LED_GRN_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2113      	movs	r1, #19
 800139e:	482a      	ldr	r0, [pc, #168]	; (8001448 <MX_GPIO_Init+0x1ec>)
 80013a0:	f002 f95e 	bl	8003660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTDC_BL_Pin;
 80013a4:	2308      	movs	r3, #8
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LTDC_BL_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4820      	ldr	r0, [pc, #128]	; (800143c <MX_GPIO_Init+0x1e0>)
 80013bc:	f001 ffa4 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LTDC_RST_Pin;
 80013c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LTDC_RST_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d6:	4619      	mov	r1, r3
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <MX_GPIO_Init+0x1e4>)
 80013da:	f001 ff95 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_RST_Pin;
 80013de:	2320      	movs	r3, #32
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(TOUCH_RST_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	4813      	ldr	r0, [pc, #76]	; (8001444 <MX_GPIO_Init+0x1e8>)
 80013f6:	f001 ff87 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TOUCH_INT_Pin;
 80013fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_GPIO_Init+0x1f0>)
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_INT_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800140c:	4619      	mov	r1, r3
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <MX_GPIO_Init+0x1f4>)
 8001410:	f001 ff7a 	bl	8003308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YEL_Pin|LED_GRN_Pin;
 8001414:	2313      	movs	r3, #19
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001428:	4619      	mov	r1, r3
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <MX_GPIO_Init+0x1ec>)
 800142c:	f001 ff6c 	bl	8003308 <HAL_GPIO_Init>

}
 8001430:	bf00      	nop
 8001432:	3740      	adds	r7, #64	; 0x40
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40021000 	.word	0x40021000
 8001440:	40022000 	.word	0x40022000
 8001444:	40022400 	.word	0x40022400
 8001448:	40022800 	.word	0x40022800
 800144c:	10110000 	.word	0x10110000
 8001450:	40020c00 	.word	0x40020c00

08001454 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_I2C4_Init+0x74>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <MX_I2C4_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_I2C4_Init+0x74>)
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <MX_I2C4_Init+0x7c>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_I2C4_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_I2C4_Init+0x74>)
 800146c:	2201      	movs	r2, #1
 800146e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_I2C4_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_I2C4_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C4_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C4_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C4_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800148e:	480e      	ldr	r0, [pc, #56]	; (80014c8 <MX_I2C4_Init+0x74>)
 8001490:	f002 f91a 	bl	80036c8 <HAL_I2C_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800149a:	f000 fb87 	bl	8001bac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800149e:	2100      	movs	r1, #0
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <MX_I2C4_Init+0x74>)
 80014a2:	f002 f9a1 	bl	80037e8 <HAL_I2CEx_ConfigAnalogFilter>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80014ac:	f000 fb7e 	bl	8001bac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_I2C4_Init+0x74>)
 80014b4:	f002 f9e3 	bl	800387e <HAL_I2CEx_ConfigDigitalFilter>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80014be:	f000 fb75 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200106e4 	.word	0x200106e4
 80014cc:	40006000 	.word	0x40006000
 80014d0:	00c0eaff 	.word	0x00c0eaff

080014d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0ae      	sub	sp, #184	; 0xb8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2290      	movs	r2, #144	; 0x90
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 fe51 	bl	800919c <memset>
  if(i2cHandle->Instance==I2C4)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a22      	ldr	r2, [pc, #136]	; (8001588 <HAL_I2C_MspInit+0xb4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d13d      	bne.n	8001580 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001508:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	4618      	mov	r0, r3
 8001516:	f003 ff1f 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001520:	f000 fb44 	bl	8001bac <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_I2C_MspInit+0xb8>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a18      	ldr	r2, [pc, #96]	; (800158c <HAL_I2C_MspInit+0xb8>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_I2C_MspInit+0xb8>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800153c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001556:	2304      	movs	r3, #4
 8001558:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800155c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001560:	4619      	mov	r1, r3
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <HAL_I2C_MspInit+0xbc>)
 8001564:	f001 fed0 	bl	8003308 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_I2C_MspInit+0xb8>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_I2C_MspInit+0xb8>)
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_I2C_MspInit+0xb8>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001580:	bf00      	nop
 8001582:	37b8      	adds	r7, #184	; 0xb8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40006000 	.word	0x40006000
 800158c:	40023800 	.word	0x40023800
 8001590:	40020c00 	.word	0x40020c00

08001594 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2234      	movs	r2, #52	; 0x34
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f007 fdfb 	bl	800919c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015a8:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <MX_LTDC_Init+0x100>)
 80015aa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015ac:	4b38      	ldr	r3, [pc, #224]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80015ca:	4b31      	ldr	r3, [pc, #196]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015cc:	2209      	movs	r2, #9
 80015ce:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015d2:	222b      	movs	r2, #43	; 0x2b
 80015d4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015d8:	2215      	movs	r2, #21
 80015da:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015de:	f240 220b 	movw	r2, #523	; 0x20b
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015e6:	f240 1225 	movw	r2, #293	; 0x125
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015ee:	f240 2213 	movw	r2, #531	; 0x213
 80015f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015f6:	f240 1229 	movw	r2, #297	; 0x129
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_LTDC_Init+0xfc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_LTDC_Init+0xfc>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_LTDC_Init+0xfc>)
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001614:	481e      	ldr	r0, [pc, #120]	; (8001690 <MX_LTDC_Init+0xfc>)
 8001616:	f002 f97f 	bl	8003918 <HAL_LTDC_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 fac4 	bl	8001bac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001628:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800162c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001632:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001636:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8001638:	2301      	movs	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800163c:	23ff      	movs	r3, #255	; 0xff
 800163e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800164a:	2305      	movs	r3, #5
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800164e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001654:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800165a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800165e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	4619      	mov	r1, r3
 8001678:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_LTDC_Init+0xfc>)
 800167a:	f002 fadf 	bl	8003c3c <HAL_LTDC_ConfigLayer>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001684:	f000 fa92 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	3738      	adds	r7, #56	; 0x38
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20010730 	.word	0x20010730
 8001694:	40016800 	.word	0x40016800

08001698 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b0b4      	sub	sp, #208	; 0xd0
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	2290      	movs	r2, #144	; 0x90
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f007 fd6f 	bl	800919c <memset>
  if(ltdcHandle->Instance==LTDC)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4acf      	ldr	r2, [pc, #828]	; (8001a00 <HAL_LTDC_MspInit+0x368>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	f040 81d0 	bne.w	8001a6a <HAL_LTDC_MspInit+0x3d2>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016ca:	2308      	movs	r3, #8
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80016ce:	23c0      	movs	r3, #192	; 0xc0
 80016d0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80016d2:	2305      	movs	r3, #5
 80016d4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80016da:	2300      	movs	r3, #0
 80016dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80016de:	2301      	movs	r3, #1
 80016e0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80016e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 fe33 	bl	8005358 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 80016f8:	f000 fa58 	bl	8001bac <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016fc:	4bc1      	ldr	r3, [pc, #772]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	4ac0      	ldr	r2, [pc, #768]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001706:	6453      	str	r3, [r2, #68]	; 0x44
 8001708:	4bbe      	ldr	r3, [pc, #760]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001714:	4bbb      	ldr	r3, [pc, #748]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4aba      	ldr	r2, [pc, #744]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800171a:	f043 0310 	orr.w	r3, r3, #16
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4bb8      	ldr	r3, [pc, #736]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0310 	and.w	r3, r3, #16
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800172c:	4bb5      	ldr	r3, [pc, #724]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4ab4      	ldr	r2, [pc, #720]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4bb2      	ldr	r3, [pc, #712]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	623b      	str	r3, [r7, #32]
 8001742:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4baf      	ldr	r3, [pc, #700]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4aae      	ldr	r2, [pc, #696]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4bac      	ldr	r3, [pc, #688]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800175c:	4ba9      	ldr	r3, [pc, #676]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	4aa8      	ldr	r2, [pc, #672]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001766:	6313      	str	r3, [r2, #48]	; 0x30
 8001768:	4ba6      	ldr	r3, [pc, #664]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4ba3      	ldr	r3, [pc, #652]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4aa2      	ldr	r2, [pc, #648]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800178c:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	4a9c      	ldr	r2, [pc, #624]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 8001792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001796:	6313      	str	r3, [r2, #48]	; 0x30
 8001798:	4b9a      	ldr	r3, [pc, #616]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80017a4:	4b97      	ldr	r3, [pc, #604]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	4a96      	ldr	r2, [pc, #600]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80017aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ae:	6313      	str	r3, [r2, #48]	; 0x30
 80017b0:	4b94      	ldr	r3, [pc, #592]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017bc:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a90      	ldr	r2, [pc, #576]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b8e      	ldr	r3, [pc, #568]	; (8001a04 <HAL_LTDC_MspInit+0x36c>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    PJ13     ------> LTDC_B1
    PK5     ------> LTDC_B6
    PK6     ------> LTDC_B7
    PK7     ------> LTDC_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017d4:	2370      	movs	r3, #112	; 0x70
 80017d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ec:	230e      	movs	r3, #14
 80017ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017f6:	4619      	mov	r1, r3
 80017f8:	4883      	ldr	r0, [pc, #524]	; (8001a08 <HAL_LTDC_MspInit+0x370>)
 80017fa:	f001 fd85 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001802:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001818:	2309      	movs	r3, #9
 800181a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800181e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001822:	4619      	mov	r1, r3
 8001824:	4879      	ldr	r0, [pc, #484]	; (8001a0c <HAL_LTDC_MspInit+0x374>)
 8001826:	f001 fd6f 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800182a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800182e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001844:	230e      	movs	r3, #14
 8001846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800184a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800184e:	4619      	mov	r1, r3
 8001850:	486e      	ldr	r0, [pc, #440]	; (8001a0c <HAL_LTDC_MspInit+0x374>)
 8001852:	f001 fd59 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8001856:	236e      	movs	r3, #110	; 0x6e
 8001858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800186e:	230e      	movs	r3, #14
 8001870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001878:	4619      	mov	r1, r3
 800187a:	4865      	ldr	r0, [pc, #404]	; (8001a10 <HAL_LTDC_MspInit+0x378>)
 800187c:	f001 fd44 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001880:	2304      	movs	r3, #4
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001898:	230e      	movs	r3, #14
 800189a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800189e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018a2:	4619      	mov	r1, r3
 80018a4:	485b      	ldr	r0, [pc, #364]	; (8001a14 <HAL_LTDC_MspInit+0x37c>)
 80018a6:	f001 fd2f 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018aa:	2310      	movs	r3, #16
 80018ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018c2:	2309      	movs	r3, #9
 80018c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018cc:	4619      	mov	r1, r3
 80018ce:	4851      	ldr	r0, [pc, #324]	; (8001a14 <HAL_LTDC_MspInit+0x37c>)
 80018d0:	f001 fd1a 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d4:	2303      	movs	r3, #3
 80018d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80018ec:	2309      	movs	r3, #9
 80018ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018f6:	4619      	mov	r1, r3
 80018f8:	4847      	ldr	r0, [pc, #284]	; (8001a18 <HAL_LTDC_MspInit+0x380>)
 80018fa:	f001 fd05 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fe:	2301      	movs	r3, #1
 8001900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001916:	2309      	movs	r3, #9
 8001918:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800191c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001920:	4619      	mov	r1, r3
 8001922:	483e      	ldr	r0, [pc, #248]	; (8001a1c <HAL_LTDC_MspInit+0x384>)
 8001924:	f001 fcf0 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_13;
 8001928:	f242 4310 	movw	r3, #9232	; 0x2410
 800192c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001942:	230e      	movs	r3, #14
 8001944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001948:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800194c:	4619      	mov	r1, r3
 800194e:	4833      	ldr	r0, [pc, #204]	; (8001a1c <HAL_LTDC_MspInit+0x384>)
 8001950:	f001 fcda 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800196e:	230e      	movs	r3, #14
 8001970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001978:	4619      	mov	r1, r3
 800197a:	4827      	ldr	r0, [pc, #156]	; (8001a18 <HAL_LTDC_MspInit+0x380>)
 800197c:	f001 fcc4 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001980:	23e4      	movs	r3, #228	; 0xe4
 8001982:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001998:	230e      	movs	r3, #14
 800199a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800199e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019a2:	4619      	mov	r1, r3
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <HAL_LTDC_MspInit+0x388>)
 80019a6:	f001 fcaf 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019c4:	230e      	movs	r3, #14
 80019c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019ce:	4619      	mov	r1, r3
 80019d0:	4814      	ldr	r0, [pc, #80]	; (8001a24 <HAL_LTDC_MspInit+0x38c>)
 80019d2:	f001 fc99 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80019f0:	230d      	movs	r3, #13
 80019f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019fa:	4619      	mov	r1, r3
 80019fc:	e014      	b.n	8001a28 <HAL_LTDC_MspInit+0x390>
 80019fe:	bf00      	nop
 8001a00:	40016800 	.word	0x40016800
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40021c00 	.word	0x40021c00
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40022400 	.word	0x40022400
 8001a20:	40022800 	.word	0x40022800
 8001a24:	40020800 	.word	0x40020800
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <HAL_LTDC_MspInit+0x3dc>)
 8001a2a:	f001 fc6d 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001a48:	2309      	movs	r3, #9
 8001a4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a52:	4619      	mov	r1, r3
 8001a54:	4807      	ldr	r0, [pc, #28]	; (8001a74 <HAL_LTDC_MspInit+0x3dc>)
 8001a56:	f001 fc57 	bl	8003308 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	2058      	movs	r0, #88	; 0x58
 8001a60:	f001 f9a2 	bl	8002da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001a64:	2058      	movs	r0, #88	; 0x58
 8001a66:	f001 f9bb 	bl	8002de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	37d0      	adds	r7, #208	; 0xd0
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40020000 	.word	0x40020000

08001a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a7c:	f001 f85e 	bl	8002b3c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a80:	f000 f812 	bl	8001aa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a84:	f7ff fbea 	bl	800125c <MX_GPIO_Init>
  MX_LTDC_Init();
 8001a88:	f7ff fd84 	bl	8001594 <MX_LTDC_Init>
  MX_FMC_Init();
 8001a8c:	f7fe fe0a 	bl	80006a4 <MX_FMC_Init>
  MX_QUADSPI_Init();
 8001a90:	f000 f892 	bl	8001bb8 <MX_QUADSPI_Init>
  MX_DMA2D_Init();
 8001a94:	f7fe fda8 	bl	80005e8 <MX_DMA2D_Init>
  MX_I2C4_Init();
 8001a98:	f7ff fcdc 	bl	8001454 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a9c:	f7fe ff46 	bl	800092c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001aa0:	f004 fd33 	bl	800650a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <main+0x2c>
	...

08001aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b094      	sub	sp, #80	; 0x50
 8001aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2234      	movs	r2, #52	; 0x34
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 fb70 	bl	800919c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001abc:	f107 0308 	add.w	r3, r7, #8
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001acc:	f002 fac4 	bl	8004058 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <SystemClock_Config+0xd8>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <SystemClock_Config+0xdc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <SystemClock_Config+0xdc>)
 8001aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <SystemClock_Config+0xdc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001b14:	230c      	movs	r3, #12
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b18:	23c0      	movs	r3, #192	; 0xc0
 8001b1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b20:	2302      	movs	r3, #2
 8001b22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b28:	f107 031c 	add.w	r3, r7, #28
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 ff71 	bl	8004a14 <HAL_RCC_OscConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b38:	f000 f838 	bl	8001bac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b3c:	f002 fa9c 	bl	8004078 <HAL_PWREx_EnableOverDrive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b46:	f000 f831 	bl	8001bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	230f      	movs	r3, #15
 8001b4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	2106      	movs	r1, #6
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fa01 	bl	8004f70 <HAL_RCC_ClockConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001b74:	f000 f81a 	bl	8001bac <Error_Handler>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3750      	adds	r7, #80	; 0x50
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40007000 	.word	0x40007000

08001b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b9a:	f000 ffe5 	bl	8002b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40002000 	.word	0x40002000

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <Error_Handler+0x8>
	...

08001bb8 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bbe:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <MX_QUADSPI_Init+0xcc>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001bc2:	4b2f      	ldr	r3, [pc, #188]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bca:	2204      	movs	r2, #4
 8001bcc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001bce:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bd6:	2219      	movs	r2, #25
 8001bd8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001be6:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001bec:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001bf2:	4823      	ldr	r0, [pc, #140]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001bf4:	f002 fa90 	bl	8004118 <HAL_QSPI_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001bfe:	f7ff ffd5 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  // =========== Initialize MT25QL512ABB ===========
  // Reset memory
  if(MT25QL512ABB_ResetEnable(&hqspi, MT25QL512ABB_SPI_MODE) != MT25QL512ABB_OK)
 8001c02:	2100      	movs	r1, #0
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001c06:	f000 ff29 	bl	8002a5c <MT25QL512ABB_ResetEnable>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_QUADSPI_Init+0x5c>
  {
    Error_Handler();
 8001c10:	f7ff ffcc 	bl	8001bac <Error_Handler>
  }
  if(MT25QL512ABB_ResetMemory(&hqspi, MT25QL512ABB_SPI_MODE) != MT25QL512ABB_OK)
 8001c14:	2100      	movs	r1, #0
 8001c16:	481a      	ldr	r0, [pc, #104]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001c18:	f000 ff58 	bl	8002acc <MT25QL512ABB_ResetMemory>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_QUADSPI_Init+0x6e>
  {
    Error_Handler();
 8001c22:	f7ff ffc3 	bl	8001bac <Error_Handler>
  }

  HAL_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 ffbe 	bl	8002ba8 <HAL_Delay>

  // Poll WIP
  if(MT25QL512ABB_AutoPollingMemReady(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_DUALFLASH_DISABLE) != MT25QL512ABB_OK)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2106      	movs	r1, #6
 8001c30:	4813      	ldr	r0, [pc, #76]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001c32:	f000 fbd2 	bl	80023da <MT25QL512ABB_AutoPollingMemReady>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_QUADSPI_Init+0x88>
  {
    Error_Handler();
 8001c3c:	f7ff ffb6 	bl	8001bac <Error_Handler>
  }

  // Enter QPI mode
  if(MT25QL512ABB_EnterQPIMode(&hqspi) != MT25QL512ABB_OK)
 8001c40:	480f      	ldr	r0, [pc, #60]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001c42:	f000 fea9 	bl	8002998 <MT25QL512ABB_EnterQPIMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_QUADSPI_Init+0x98>
  {
    Error_Handler();
 8001c4c:	f7ff ffae 	bl	8001bac <Error_Handler>
  }

  // Enter 4 byte address mode
  if(MT25QL512ABB_Enter4BytesAddressMode(&hqspi, MT25QL512ABB_QPI_MODE) != MT25QL512ABB_OK)
 8001c50:	2106      	movs	r1, #6
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001c54:	f000 feca 	bl	80029ec <MT25QL512ABB_Enter4BytesAddressMode>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_QUADSPI_Init+0xaa>
  {
    Error_Handler();
 8001c5e:	f7ff ffa5 	bl	8001bac <Error_Handler>
  }

  // Enter memory mapped mode
  if(MT25QL512ABB_EnableMemoryMappedModeSTR(&hqspi, MT25QL512ABB_QPI_MODE, MT25QL512ABB_4BYTES_SIZE) != MT25QL512ABB_OK)
 8001c62:	2201      	movs	r2, #1
 8001c64:	2106      	movs	r1, #6
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <MX_QUADSPI_Init+0xc8>)
 8001c68:	f000 fd54 	bl	8002714 <MT25QL512ABB_EnableMemoryMappedModeSTR>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_QUADSPI_Init+0xbe>
  {
    Error_Handler();
 8001c72:	f7ff ff9b 	bl	8001bac <Error_Handler>
  }

  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001c76:	205c      	movs	r0, #92	; 0x5c
 8001c78:	f001 f8c0 	bl	8002dfc <HAL_NVIC_DisableIRQ>
  /* USER CODE END QUADSPI_Init 2 */

}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200107d8 	.word	0x200107d8
 8001c84:	a0001000 	.word	0xa0001000

08001c88 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3c      	ldr	r2, [pc, #240]	; (8001d98 <HAL_QSPI_MspInit+0x110>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d171      	bne.n	8001d8e <HAL_QSPI_MspInit+0x106>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6393      	str	r3, [r2, #56]	; 0x38
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a35      	ldr	r2, [pc, #212]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a2f      	ldr	r2, [pc, #188]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_QSPI_MspInit+0x114>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d1a:	2309      	movs	r3, #9
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1e:	f107 031c 	add.w	r3, r7, #28
 8001d22:	4619      	mov	r1, r3
 8001d24:	481e      	ldr	r0, [pc, #120]	; (8001da0 <HAL_QSPI_MspInit+0x118>)
 8001d26:	f001 faef 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001d2a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d3c:	2309      	movs	r3, #9
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4817      	ldr	r0, [pc, #92]	; (8001da4 <HAL_QSPI_MspInit+0x11c>)
 8001d48:	f001 fade 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d52:	2302      	movs	r3, #2
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d5e:	230a      	movs	r3, #10
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	4619      	mov	r1, r3
 8001d68:	480e      	ldr	r0, [pc, #56]	; (8001da4 <HAL_QSPI_MspInit+0x11c>)
 8001d6a:	f001 facd 	bl	8003308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d6e:	2340      	movs	r3, #64	; 0x40
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d7e:	230a      	movs	r3, #10
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <HAL_QSPI_MspInit+0x120>)
 8001d8a:	f001 fabd 	bl	8003308 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3730      	adds	r7, #48	; 0x30
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	a0001000 	.word	0xa0001000
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40021400 	.word	0x40021400
 8001da8:	40020400 	.word	0x40020400

08001dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_MspInit+0x4c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_MspInit+0x4c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	210f      	movs	r1, #15
 8001de6:	f06f 0001 	mvn.w	r0, #1
 8001dea:	f000 ffdd 	bl	8002da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800

08001dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	; 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	202d      	movs	r0, #45	; 0x2d
 8001e12:	f000 ffc9 	bl	8002da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001e16:	202d      	movs	r0, #45	; 0x2d
 8001e18:	f000 ffe2 	bl	8002de0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_InitTick+0xa0>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_InitTick+0xa0>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_InitTick+0xa0>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e34:	f107 0210 	add.w	r2, r7, #16
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fa58 	bl	80052f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e44:	f003 fa42 	bl	80052cc <HAL_RCC_GetPCLK1Freq>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e50:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_InitTick+0xa4>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_InitTick+0xac>)
 8001e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e68:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001e6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e7e:	f003 ff12 	bl	8005ca6 <HAL_TIM_Base_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <HAL_InitTick+0xa8>)
 8001e8a:	f003 ff6d 	bl	8005d68 <HAL_TIM_Base_Start_IT>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3730      	adds	r7, #48	; 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	431bde83 	.word	0x431bde83
 8001ea4:	20010824 	.word	0x20010824
 8001ea8:	40002000 	.word	0x40002000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001ede:	f003 ffbb 	bl	8005e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20010824 	.word	0x20010824

08001eec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <LTDC_IRQHandler+0x10>)
 8001ef2:	f001 fde1 	bl	8003ab8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20010730 	.word	0x20010730

08001f00 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <DMA2D_IRQHandler+0x10>)
 8001f06:	f001 f851 	bl	8002fac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20010630 	.word	0x20010630

08001f14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001f2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001f34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001f3c:	e000      	b.n	8001f40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001f3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0f9      	beq.n	8001f3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001f4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <ITM_ReceiveChar>:
  \details Inputs a character via the external variable \ref ITM_RxBuffer.
  \return             Received character.
  \return         -1  No character pending.
 */
__STATIC_INLINE int32_t ITM_ReceiveChar (void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
  int32_t ch = -1;                           /* no character available */
 8001f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6e:	607b      	str	r3, [r7, #4]

  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY)
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <ITM_ReceiveChar+0x30>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <ITM_ReceiveChar+0x34>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d005      	beq.n	8001f86 <ITM_ReceiveChar+0x22>
  {
    ch = ITM_RxBuffer;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <ITM_ReceiveChar+0x30>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	607b      	str	r3, [r7, #4]
    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <ITM_ReceiveChar+0x30>)
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <ITM_ReceiveChar+0x34>)
 8001f84:	601a      	str	r2, [r3, #0]
  }

  return (ch);
 8001f86:	687b      	ldr	r3, [r7, #4]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20010870 	.word	0x20010870
 8001f98:	5aa55aa5 	.word	0x5aa55aa5

08001f9c <__io_putchar>:

volatile int32_t ITM_RxBuffer;

/* Variables */
int __io_putchar(int ch)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  return ITM_SendChar(ch);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff ffb4 	bl	8001f14 <ITM_SendChar>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <__io_getchar>:

int __io_getchar(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  return  ITM_ReceiveChar();
 8001fba:	f7ff ffd3 	bl	8001f64 <ITM_ReceiveChar>
 8001fbe:	4603      	mov	r3, r0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
	return 1;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_kill>:

int _kill(int pid, int sig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fde:	f006 ff8d 	bl	8008efc <__errno>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2216      	movs	r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_exit>:

void _exit (int status)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ffe7 	bl	8001fd4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002006:	e7fe      	b.n	8002006 <_exit+0x12>

08002008 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e00a      	b.n	8002030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800201a:	f7ff ffcc 	bl	8001fb6 <__io_getchar>
 800201e:	4601      	mov	r1, r0
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	60ba      	str	r2, [r7, #8]
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	3301      	adds	r3, #1
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	dbf0      	blt.n	800201a <_read+0x12>
	}

return len;
 8002038:	687b      	ldr	r3, [r7, #4]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	60f8      	str	r0, [r7, #12]
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e009      	b.n	8002068 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60ba      	str	r2, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff9d 	bl	8001f9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3301      	adds	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbf1      	blt.n	8002054 <_write+0x12>
	}
	return len;
 8002070:	687b      	ldr	r3, [r7, #4]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_close>:

int _close(int file)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
	return -1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a2:	605a      	str	r2, [r3, #4]
	return 0;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_isatty>:

int _isatty(int file)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
	return 1;
 80020ba:	2301      	movs	r3, #1
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f006 fef2 	bl	8008efc <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	2007c000 	.word	0x2007c000
 8002144:	00000f00 	.word	0x00000f00
 8002148:	200004c0 	.word	0x200004c0
 800214c:	20010888 	.word	0x20010888

08002150 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <SystemInit+0x20>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <SystemInit+0x20>)
 800215c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002160:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800217a:	490e      	ldr	r1, [pc, #56]	; (80021b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002190:	4c0b      	ldr	r4, [pc, #44]	; (80021c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800219e:	f7ff ffd7 	bl	8002150 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f006 ffa7 	bl	80090f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a6:	f7ff fc67 	bl	8001a78 <main>
  bx  lr    
 80021aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021ac:	2007c000 	.word	0x2007c000
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021b8:	0800c1e4 	.word	0x0800c1e4
  ldr r2, =_sbss
 80021bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021c0:	20010888 	.word	0x20010888

080021c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC_IRQHandler>

080021c6 <IS42S32800G_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800G_ERROR;
 80021d0:	f04f 33ff 	mov.w	r3, #4294967295
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800G_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f831 	bl	8002244 <IS42S32800G_ClockEnable>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d128      	bne.n	800223a <IS42S32800G_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800G_Delay(1);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f000 f8e1 	bl	80023b0 <IS42S32800G_Delay>

    /* Step 3: Configure a PALL (precharge all) command */
    if(IS42S32800G_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800G_OK)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f849 	bl	800228c <IS42S32800G_Precharge>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d11c      	bne.n	800223a <IS42S32800G_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */
      if(IS42S32800G_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800G_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	461a      	mov	r2, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f896 	bl	800233c <IS42S32800G_RefreshMode>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d111      	bne.n	800223a <IS42S32800G_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800G_ModeRegConfig(Ctx, pRegMode) == IS42S32800G_OK)
 8002216:	6839      	ldr	r1, [r7, #0]
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f85b 	bl	80022d4 <IS42S32800G_ModeRegConfig>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <IS42S32800G_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800G_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800G_OK)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8ac 	bl	8002388 <IS42S32800G_RefreshRate>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <IS42S32800G_Init+0x74>
          {
            ret = IS42S32800G_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <IS42S32800G_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_CLK_ENABLE_CMD;
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <IS42S32800G_ClockEnable+0x44>)
 8002250:	2201      	movs	r2, #1
 8002252:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <IS42S32800G_ClockEnable+0x44>)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <IS42S32800G_ClockEnable+0x44>)
 800225c:	2201      	movs	r2, #1
 800225e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <IS42S32800G_ClockEnable+0x44>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800226a:	4907      	ldr	r1, [pc, #28]	; (8002288 <IS42S32800G_ClockEnable+0x44>)
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f003 fccf 	bl	8005c10 <HAL_SDRAM_SendCommand>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <IS42S32800G_ClockEnable+0x3a>
  {
    return IS42S32800G_ERROR;
 8002278:	f04f 33ff 	mov.w	r3, #4294967295
 800227c:	e000      	b.n	8002280 <IS42S32800G_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 800227e:	2300      	movs	r3, #0
  }
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200004c4 	.word	0x200004c4

0800228c <IS42S32800G_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800G_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800G_PALL_CMD   ;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <IS42S32800G_Precharge+0x44>)
 8002298:	2202      	movs	r2, #2
 800229a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <IS42S32800G_Precharge+0x44>)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80022a2:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <IS42S32800G_Precharge+0x44>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <IS42S32800G_Precharge+0x44>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 80022ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b2:	4907      	ldr	r1, [pc, #28]	; (80022d0 <IS42S32800G_Precharge+0x44>)
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f003 fcab 	bl	8005c10 <HAL_SDRAM_SendCommand>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <IS42S32800G_Precharge+0x3a>
  {
    return IS42S32800G_ERROR;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	e000      	b.n	80022c8 <IS42S32800G_Precharge+0x3c>
  }
  else
  {
    return IS42S32800G_OK;
 80022c6:	2300      	movs	r3, #0
  }
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200004c4 	.word	0x200004c4

080022d4 <IS42S32800G_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800G_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800G_Context_t *pRegMode)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022e6:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 80022ec:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 80022f2:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  Command.CommandMode            = IS42S32800G_LOAD_MODE_CMD;
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <IS42S32800G_ModeRegConfig+0x64>)
 80022fe:	2204      	movs	r2, #4
 8002300:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <IS42S32800G_ModeRegConfig+0x64>)
 8002308:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <IS42S32800G_ModeRegConfig+0x64>)
 800230c:	2201      	movs	r2, #1
 800230e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002310:	4a09      	ldr	r2, [pc, #36]	; (8002338 <IS42S32800G_ModeRegConfig+0x64>)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231a:	4907      	ldr	r1, [pc, #28]	; (8002338 <IS42S32800G_ModeRegConfig+0x64>)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f003 fc77 	bl	8005c10 <HAL_SDRAM_SendCommand>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <IS42S32800G_ModeRegConfig+0x5a>
  {
    return IS42S32800G_ERROR;
 8002328:	f04f 33ff 	mov.w	r3, #4294967295
 800232c:	e000      	b.n	8002330 <IS42S32800G_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800G_OK;
 800232e:	2300      	movs	r3, #0
  }
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200004c4 	.word	0x200004c4

0800233c <IS42S32800G_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800G_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800G_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800G_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8002348:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <IS42S32800G_RefreshMode+0x48>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800234e:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <IS42S32800G_RefreshMode+0x48>)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <IS42S32800G_RefreshMode+0x48>)
 8002356:	2208      	movs	r2, #8
 8002358:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <IS42S32800G_RefreshMode+0x48>)
 800235c:	2200      	movs	r2, #0
 800235e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800G_TIMEOUT) != HAL_OK)
 8002360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002364:	4907      	ldr	r1, [pc, #28]	; (8002384 <IS42S32800G_RefreshMode+0x48>)
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f003 fc52 	bl	8005c10 <HAL_SDRAM_SendCommand>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <IS42S32800G_RefreshMode+0x3c>
  {
    return IS42S32800G_ERROR;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e000      	b.n	800237a <IS42S32800G_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800G_OK;
 8002378:	2300      	movs	r3, #0
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200004c4 	.word	0x200004c4

08002388 <IS42S32800G_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800G_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f003 fc66 	bl	8005c66 <HAL_SDRAM_ProgramRefreshRate>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <IS42S32800G_RefreshRate+0x1e>
  {
    return IS42S32800G_ERROR;
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	e000      	b.n	80023a8 <IS42S32800G_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800G_OK;
 80023a6:	2300      	movs	r3, #0
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <IS42S32800G_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800G_OK
  */
static int32_t IS42S32800G_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80023b8:	f000 fbea 	bl	8002b90 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80023be:	bf00      	nop
 80023c0:	f000 fbe6 	bl	8002b90 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d8f7      	bhi.n	80023c0 <IS42S32800G_Delay+0x10>
  {
  }
  return IS42S32800G_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <MT25QL512ABB_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  DualFlash Dual flash mode state
  * @retval error status
  */
int32_t MT25QL512ABB_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode, MT25QL512ABB_DualFlash_t DualFlash)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b096      	sub	sp, #88	; 0x58
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]
 80023e6:	4613      	mov	r3, r2
 80023e8:	70bb      	strb	r3, [r7, #2]
  QSPI_CommandTypeDef      s_command;
  QSPI_AutoPollingTypeDef  s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_INSTRUCTION_2_LINES : QSPI_INSTRUCTION_1_LINE;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d008      	beq.n	8002402 <MT25QL512ABB_AutoPollingMemReady+0x28>
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d102      	bne.n	80023fc <MT25QL512ABB_AutoPollingMemReady+0x22>
 80023f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023fa:	e004      	b.n	8002406 <MT25QL512ABB_AutoPollingMemReady+0x2c>
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	e001      	b.n	8002406 <MT25QL512ABB_AutoPollingMemReady+0x2c>
 8002402:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002406:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25QL512ABB_READ_STATUS_REG_CMD;
 8002408:	2305      	movs	r3, #5
 800240a:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800240c:	2300      	movs	r3, #0
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002410:	2300      	movs	r3, #0
 8002412:	643b      	str	r3, [r7, #64]	; 0x40
  /* At least one dummy cycle is required when using dual or quad mode to receive data */
  s_command.DummyCycles       = (Mode == MT25QL512ABB_QPI_MODE) ? 2U : (Mode == MT25QL512ABB_DPI_MODE) ? 4U : 0U;
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	2b06      	cmp	r3, #6
 8002418:	d006      	beq.n	8002428 <MT25QL512ABB_AutoPollingMemReady+0x4e>
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d101      	bne.n	8002424 <MT25QL512ABB_AutoPollingMemReady+0x4a>
 8002420:	2304      	movs	r3, #4
 8002422:	e002      	b.n	800242a <MT25QL512ABB_AutoPollingMemReady+0x50>
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <MT25QL512ABB_AutoPollingMemReady+0x50>
 8002428:	2302      	movs	r3, #2
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_DATA_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_DATA_2_LINES : QSPI_DATA_1_LINE;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	2b06      	cmp	r3, #6
 8002430:	d008      	beq.n	8002444 <MT25QL512ABB_AutoPollingMemReady+0x6a>
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	2b05      	cmp	r3, #5
 8002436:	d102      	bne.n	800243e <MT25QL512ABB_AutoPollingMemReady+0x64>
 8002438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243c:	e004      	b.n	8002448 <MT25QL512ABB_AutoPollingMemReady+0x6e>
 800243e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002442:	e001      	b.n	8002448 <MT25QL512ABB_AutoPollingMemReady+0x6e>
 8002444:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800244e:	2300      	movs	r3, #0
 8002450:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002452:	2300      	movs	r3, #0
 8002454:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = (DualFlash == MT25QL512ABB_DUALFLASH_ENABLE) ? ((MT25QL512ABB_SR_WIP << 8) | MT25QL512ABB_SR_WIP) : MT25QL512ABB_SR_WIP;
 800245a:	78bb      	ldrb	r3, [r7, #2]
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d102      	bne.n	8002466 <MT25QL512ABB_AutoPollingMemReady+0x8c>
 8002460:	f240 1301 	movw	r3, #257	; 0x101
 8002464:	e000      	b.n	8002468 <MT25QL512ABB_AutoPollingMemReady+0x8e>
 8002466:	2301      	movs	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = (DualFlash == MT25QL512ABB_DUALFLASH_ENABLE) ? 2U : 1U;
 800246e:	78bb      	ldrb	r3, [r7, #2]
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d101      	bne.n	8002478 <MT25QL512ABB_AutoPollingMemReady+0x9e>
 8002474:	2302      	movs	r3, #2
 8002476:	e000      	b.n	800247a <MT25QL512ABB_AutoPollingMemReady+0xa0>
 8002478:	2301      	movs	r3, #1
 800247a:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MT25QL512ABB_AUTOPOLLING_INTERVAL_TIME;
 800247c:	2310      	movs	r3, #16
 800247e:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002480:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002484:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002486:	f107 0208 	add.w	r2, r7, #8
 800248a:	f107 0120 	add.w	r1, r7, #32
 800248e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f001 ffac 	bl	80043f0 <HAL_QSPI_AutoPolling>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <MT25QL512ABB_AutoPollingMemReady+0xca>
  {
    return MT25QL512ABB_ERROR;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
 80024a2:	e000      	b.n	80024a6 <MT25QL512ABB_AutoPollingMemReady+0xcc>
  }

  return MT25QL512ABB_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3758      	adds	r7, #88	; 0x58
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <MT25QL512ABB_PageProgram>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval QSPI memory status
  */
int32_t MT25QL512ABB_PageProgram(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode, MT25QL512ABB_AddressSize_t AddressSize, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b092      	sub	sp, #72	; 0x48
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	72fb      	strb	r3, [r7, #11]
 80024be:	4613      	mov	r3, r2
 80024c0:	72bb      	strb	r3, [r7, #10]
  QSPI_CommandTypeDef s_command;

  /* Initialize the program command */
  switch(Mode)
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d86a      	bhi.n	80025a0 <MT25QL512ABB_PageProgram+0xf0>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <MT25QL512ABB_PageProgram+0x20>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e9 	.word	0x080024e9
 80024d4:	08002501 	.word	0x08002501
 80024d8:	08002519 	.word	0x08002519
 80024dc:	0800253b 	.word	0x0800253b
 80024e0:	0800255d 	.word	0x0800255d
 80024e4:	0800257f 	.word	0x0800257f
  {
  case MT25QL512ABB_SPI_1I2O_MODE :              /* 1-1-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80024e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25QL512ABB_DUAL_INPUT_FAST_PROG_CMD;
 80024ee:	23a2      	movs	r3, #162	; 0xa2
 80024f0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 80024f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 80024f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80024fe:	e060      	b.n	80025c2 <MT25QL512ABB_PageProgram+0x112>

  case MT25QL512ABB_SPI_2IO_MODE :               /* 1-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = MT25QL512ABB_EXTENDED_DUAL_INPUT_FAST_PROG_CMD;
 8002506:	23d2      	movs	r3, #210	; 0xd2
 8002508:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 800250a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8002510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002516:	e054      	b.n	80025c2 <MT25QL512ABB_PageProgram+0x112>

  case MT25QL512ABB_SPI_1I4O_MODE :              /* 1-1-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8002518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_QUAD_INPUT_FAST_PROG_CMD : MT25QL512ABB_4_BYTE_ADDR_QUAD_INPUT_FAST_PROG_CMD;
 800251e:	7abb      	ldrb	r3, [r7, #10]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <MT25QL512ABB_PageProgram+0x78>
 8002524:	2332      	movs	r3, #50	; 0x32
 8002526:	e000      	b.n	800252a <MT25QL512ABB_PageProgram+0x7a>
 8002528:	2334      	movs	r3, #52	; 0x34
 800252a:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 800252c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8002532:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002538:	e043      	b.n	80025c2 <MT25QL512ABB_PageProgram+0x112>

  case MT25QL512ABB_SPI_4IO_MODE :               /* 1-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800253a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_EXTENDED_QUAD_INPUT_FAST_PROG_CMD : MT25QL512ABB_4_BYTE_ADDR_QUAD_INPUT_EXTENDED_FAST_PROG_CMD;
 8002540:	7abb      	ldrb	r3, [r7, #10]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <MT25QL512ABB_PageProgram+0x9a>
 8002546:	2338      	movs	r3, #56	; 0x38
 8002548:	e000      	b.n	800254c <MT25QL512ABB_PageProgram+0x9c>
 800254a:	233e      	movs	r3, #62	; 0x3e
 800254c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 800254e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8002554:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800255a:	e032      	b.n	80025c2 <MT25QL512ABB_PageProgram+0x112>

  case MT25QL512ABB_DPI_MODE :                   /* 2-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_2_LINES;
 800255c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_EXTENDED_DUAL_INPUT_FAST_PROG_CMD : MT25QL512ABB_4_BYTE_ADDR_PAGE_PROG_CMD;
 8002562:	7abb      	ldrb	r3, [r7, #10]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <MT25QL512ABB_PageProgram+0xbc>
 8002568:	23d2      	movs	r3, #210	; 0xd2
 800256a:	e000      	b.n	800256e <MT25QL512ABB_PageProgram+0xbe>
 800256c:	2312      	movs	r3, #18
 800256e:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 8002570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8002576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800257c:	e021      	b.n	80025c2 <MT25QL512ABB_PageProgram+0x112>

  case MT25QL512ABB_QPI_MODE :                   /* 4-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800257e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_EXTENDED_QUAD_INPUT_FAST_PROG_CMD : MT25QL512ABB_4_BYTE_ADDR_QUAD_INPUT_EXTENDED_FAST_PROG_CMD;
 8002584:	7abb      	ldrb	r3, [r7, #10]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <MT25QL512ABB_PageProgram+0xde>
 800258a:	2338      	movs	r3, #56	; 0x38
 800258c:	e000      	b.n	8002590 <MT25QL512ABB_PageProgram+0xe0>
 800258e:	233e      	movs	r3, #62	; 0x3e
 8002590:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8002592:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8002598:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800259c:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800259e:	e010      	b.n	80025c2 <MT25QL512ABB_PageProgram+0x112>

  case MT25QL512ABB_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
  default :
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80025a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_PAGE_PROG_CMD : MT25QL512ABB_4_BYTE_ADDR_PAGE_PROG_CMD;
 80025a6:	7abb      	ldrb	r3, [r7, #10]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <MT25QL512ABB_PageProgram+0x100>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e000      	b.n	80025b2 <MT25QL512ABB_PageProgram+0x102>
 80025b0:	2312      	movs	r3, #18
 80025b2:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 80025b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
 80025ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80025c0:	bf00      	nop
  }

  s_command.AddressSize       = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? QSPI_ADDRESS_24_BITS : QSPI_ADDRESS_32_BITS;
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <MT25QL512ABB_PageProgram+0x11e>
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	e001      	b.n	80025d2 <MT25QL512ABB_PageProgram+0x122>
 80025ce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025d2:	61fb      	str	r3, [r7, #28]
  s_command.Address           = WriteAddr;
 80025d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d6:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80025d8:	2300      	movs	r3, #0
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = Size;
 80025e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80025ec:	2300      	movs	r3, #0
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4619      	mov	r1, r3
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f001 fe08 	bl	8004210 <HAL_QSPI_Command>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d002      	beq.n	800260c <MT25QL512ABB_PageProgram+0x15c>
  {
    return MT25QL512ABB_ERROR;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e00c      	b.n	8002626 <MT25QL512ABB_PageProgram+0x176>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f001 fe5a 	bl	80042cc <HAL_QSPI_Transmit>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d002      	beq.n	8002624 <MT25QL512ABB_PageProgram+0x174>
  {
    return MT25QL512ABB_ERROR;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
 8002622:	e000      	b.n	8002626 <MT25QL512ABB_PageProgram+0x176>
  }

  return MT25QL512ABB_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3748      	adds	r7, #72	; 0x48
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop

08002630 <MT25QL512ABB_BlockErase>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize Block size to erase
  * @retval QSPI memory status
  */
int32_t MT25QL512ABB_BlockErase(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode, MT25QL512ABB_AddressSize_t AddressSize, uint32_t BlockAddress, MT25QL512ABB_Erase_t BlockSize)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b094      	sub	sp, #80	; 0x50
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	72fb      	strb	r3, [r7, #11]
 800263e:	4613      	mov	r3, r2
 8002640:	72bb      	strb	r3, [r7, #10]
  int32_t ret = MT25QL512ABB_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  switch(BlockSize)
 8002646:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800264a:	2b01      	cmp	r3, #1
 800264c:	d002      	beq.n	8002654 <MT25QL512ABB_BlockErase+0x24>
 800264e:	2b02      	cmp	r3, #2
 8002650:	d008      	beq.n	8002664 <MT25QL512ABB_BlockErase+0x34>
 8002652:	e00f      	b.n	8002674 <MT25QL512ABB_BlockErase+0x44>
  {
  case MT25QL512ABB_ERASE_32K :
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_SUBSECTOR_ERASE_32K_CMD : MT25QL512ABB_4_BYTE_ADDR_SUBSECTOR_ERASE_32K_CMD;
 8002654:	7abb      	ldrb	r3, [r7, #10]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <MT25QL512ABB_BlockErase+0x2e>
 800265a:	2352      	movs	r3, #82	; 0x52
 800265c:	e000      	b.n	8002660 <MT25QL512ABB_BlockErase+0x30>
 800265e:	235c      	movs	r3, #92	; 0x5c
 8002660:	617b      	str	r3, [r7, #20]
    break;
 8002662:	e00f      	b.n	8002684 <MT25QL512ABB_BlockErase+0x54>

  case MT25QL512ABB_ERASE_64K :
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_SECTOR_ERASE_64K_CMD : MT25QL512ABB_4_BYTE_ADDR_SECTOR_ERASE_64K_CMD;
 8002664:	7abb      	ldrb	r3, [r7, #10]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <MT25QL512ABB_BlockErase+0x3e>
 800266a:	23d8      	movs	r3, #216	; 0xd8
 800266c:	e000      	b.n	8002670 <MT25QL512ABB_BlockErase+0x40>
 800266e:	23dc      	movs	r3, #220	; 0xdc
 8002670:	617b      	str	r3, [r7, #20]
    break;
 8002672:	e007      	b.n	8002684 <MT25QL512ABB_BlockErase+0x54>

  case MT25QL512ABB_ERASE_4K :
  default :
    s_command.Instruction     = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_SUBSECTOR_ERASE_4K_CMD : MT25QL512ABB_4_BYTE_ADDR_SUBSECTOR_ERASE_4K_CMD;
 8002674:	7abb      	ldrb	r3, [r7, #10]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <MT25QL512ABB_BlockErase+0x4e>
 800267a:	2320      	movs	r3, #32
 800267c:	e000      	b.n	8002680 <MT25QL512ABB_BlockErase+0x50>
 800267e:	2321      	movs	r3, #33	; 0x21
 8002680:	617b      	str	r3, [r7, #20]
    break;
 8002682:	bf00      	nop
  }

  s_command.InstructionMode   = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_INSTRUCTION_2_LINES : QSPI_INSTRUCTION_1_LINE;
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d008      	beq.n	800269c <MT25QL512ABB_BlockErase+0x6c>
 800268a:	7afb      	ldrb	r3, [r7, #11]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d102      	bne.n	8002696 <MT25QL512ABB_BlockErase+0x66>
 8002690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002694:	e004      	b.n	80026a0 <MT25QL512ABB_BlockErase+0x70>
 8002696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800269a:	e001      	b.n	80026a0 <MT25QL512ABB_BlockErase+0x70>
 800269c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressMode       = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_ADDRESS_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_ADDRESS_2_LINES : QSPI_ADDRESS_1_LINE;
 80026a2:	7afb      	ldrb	r3, [r7, #11]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d008      	beq.n	80026ba <MT25QL512ABB_BlockErase+0x8a>
 80026a8:	7afb      	ldrb	r3, [r7, #11]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d102      	bne.n	80026b4 <MT25QL512ABB_BlockErase+0x84>
 80026ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026b2:	e004      	b.n	80026be <MT25QL512ABB_BlockErase+0x8e>
 80026b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b8:	e001      	b.n	80026be <MT25QL512ABB_BlockErase+0x8e>
 80026ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026be:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize       = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? QSPI_ADDRESS_24_BITS : QSPI_ADDRESS_32_BITS;
 80026c0:	7abb      	ldrb	r3, [r7, #10]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <MT25QL512ABB_BlockErase+0x9c>
 80026c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ca:	e001      	b.n	80026d0 <MT25QL512ABB_BlockErase+0xa0>
 80026cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026d0:	623b      	str	r3, [r7, #32]
  s_command.Address           = BlockAddress;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	61bb      	str	r3, [r7, #24]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80026de:	2300      	movs	r3, #0
 80026e0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80026e6:	2300      	movs	r3, #0
 80026e8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80026ea:	2300      	movs	r3, #0
 80026ec:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Send the command */
  if(HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4619      	mov	r1, r3
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f001 fd89 	bl	8004210 <HAL_QSPI_Command>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <MT25QL512ABB_BlockErase+0xda>
  {
    ret = MT25QL512ABB_ERROR;
 8002704:	f04f 33ff 	mov.w	r3, #4294967295
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  return ret;
 800270a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800270c:	4618      	mov	r0, r3
 800270e:	3750      	adds	r7, #80	; 0x50
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <MT25QL512ABB_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval QSPI memory status
  */
int32_t MT25QL512ABB_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode, MT25QL512ABB_AddressSize_t AddressSize)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b092      	sub	sp, #72	; 0x48
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
 8002720:	4613      	mov	r3, r2
 8002722:	70bb      	strb	r3, [r7, #2]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  switch(Mode)
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	3b01      	subs	r3, #1
 8002728:	2b05      	cmp	r3, #5
 800272a:	f200 8081 	bhi.w	8002830 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x11c>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x20>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	0800274d 	.word	0x0800274d
 8002738:	08002773 	.word	0x08002773
 800273c:	08002799 	.word	0x08002799
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027e5 	.word	0x080027e5
 8002748:	0800280b 	.word	0x0800280b
  {
  case MT25QL512ABB_SPI_1I2O_MODE :          /* 1-1-2 commands */
    s_command.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 800274c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_1I2O_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_1I2O_FAST_READ_CMD;
 8002752:	78bb      	ldrb	r3, [r7, #2]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <MT25QL512ABB_EnableMemoryMappedModeSTR+0x48>
 8002758:	233b      	movs	r3, #59	; 0x3b
 800275a:	e000      	b.n	800275e <MT25QL512ABB_EnableMemoryMappedModeSTR+0x4a>
 800275c:	233c      	movs	r3, #60	; 0x3c
 800275e:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_1_LINE;
 8002760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002764:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 8;
 8002766:	2308      	movs	r3, #8
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_2_LINES;
 800276a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276e:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002770:	e071      	b.n	8002856 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x142>

  case MT25QL512ABB_SPI_2IO_MODE :           /* 1-2-2 commands */
    s_command.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8002772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_2IO_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_2IO_FAST_READ_CMD;
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x6e>
 800277e:	23bb      	movs	r3, #187	; 0xbb
 8002780:	e000      	b.n	8002784 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x70>
 8002782:	23bc      	movs	r3, #188	; 0xbc
 8002784:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_2_LINES;
 8002786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 8;
 800278c:	2308      	movs	r3, #8
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_2_LINES;
 8002790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002796:	e05e      	b.n	8002856 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x142>

  case MT25QL512ABB_SPI_1I4O_MODE :          /* 1-1-4 commands */
    s_command.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8002798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_1I4O_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_1I4O_FAST_READ_CMD;
 800279e:	78bb      	ldrb	r3, [r7, #2]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x94>
 80027a4:	236b      	movs	r3, #107	; 0x6b
 80027a6:	e000      	b.n	80027aa <MT25QL512ABB_EnableMemoryMappedModeSTR+0x96>
 80027a8:	236c      	movs	r3, #108	; 0x6c
 80027aa:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_1_LINE;
 80027ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 8;
 80027b2:	2308      	movs	r3, #8
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_4_LINES;
 80027b6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80027bc:	e04b      	b.n	8002856 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x142>

  case MT25QL512ABB_SPI_4IO_MODE :           /* 1-4-4 commands */
    s_command.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 80027be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_4IO_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_4IO_FAST_READ_CMD;
 80027c4:	78bb      	ldrb	r3, [r7, #2]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <MT25QL512ABB_EnableMemoryMappedModeSTR+0xba>
 80027ca:	23eb      	movs	r3, #235	; 0xeb
 80027cc:	e000      	b.n	80027d0 <MT25QL512ABB_EnableMemoryMappedModeSTR+0xbc>
 80027ce:	23ec      	movs	r3, #236	; 0xec
 80027d0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_4_LINES;
 80027d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 10;
 80027d8:	230a      	movs	r3, #10
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_4_LINES;
 80027dc:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80027e2:	e038      	b.n	8002856 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x142>

  case MT25QL512ABB_DPI_MODE :               /* 2-2-2 commands */
    s_command.InstructionMode    = QSPI_INSTRUCTION_2_LINES;
 80027e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_2IO_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_2IO_FAST_READ_CMD;
 80027ea:	78bb      	ldrb	r3, [r7, #2]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <MT25QL512ABB_EnableMemoryMappedModeSTR+0xe0>
 80027f0:	23bb      	movs	r3, #187	; 0xbb
 80027f2:	e000      	b.n	80027f6 <MT25QL512ABB_EnableMemoryMappedModeSTR+0xe2>
 80027f4:	23bc      	movs	r3, #188	; 0xbc
 80027f6:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_2_LINES;
 80027f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 8;
 80027fe:	2308      	movs	r3, #8
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_2_LINES;
 8002802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002806:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002808:	e025      	b.n	8002856 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x142>

  case MT25QL512ABB_QPI_MODE :               /* 4-4-4 commands */
    s_command.InstructionMode    = QSPI_INSTRUCTION_4_LINES;
 800280a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_4IO_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_4IO_FAST_READ_CMD;
 8002810:	78bb      	ldrb	r3, [r7, #2]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <MT25QL512ABB_EnableMemoryMappedModeSTR+0x106>
 8002816:	23eb      	movs	r3, #235	; 0xeb
 8002818:	e000      	b.n	800281c <MT25QL512ABB_EnableMemoryMappedModeSTR+0x108>
 800281a:	23ec      	movs	r3, #236	; 0xec
 800281c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_4_LINES;
 800281e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 10;
 8002824:	230a      	movs	r3, #10
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_4_LINES;
 8002828:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800282e:	e012      	b.n	8002856 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x142>

  case MT25QL512ABB_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
  default :
    s_command.InstructionMode    = QSPI_INSTRUCTION_1_LINE;
 8002830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction        = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? MT25QL512ABB_FAST_READ_CMD : MT25QL512ABB_4_BYTE_ADDR_FAST_READ_CMD;
 8002836:	78bb      	ldrb	r3, [r7, #2]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x12c>
 800283c:	230b      	movs	r3, #11
 800283e:	e000      	b.n	8002842 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x12e>
 8002840:	230c      	movs	r3, #12
 8002842:	613b      	str	r3, [r7, #16]
    s_command.AddressMode        = QSPI_ADDRESS_1_LINE;
 8002844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles        = 8;
 800284a:	2308      	movs	r3, #8
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode           = QSPI_DATA_1_LINE;
 800284e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8002854:	bf00      	nop
  }

  /* Configure the command for the read instruction */
  s_command.AddressSize       = (AddressSize == MT25QL512ABB_3BYTES_SIZE) ? QSPI_ADDRESS_24_BITS : QSPI_ADDRESS_32_BITS;
 8002856:	78bb      	ldrb	r3, [r7, #2]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x14e>
 800285c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002860:	e001      	b.n	8002866 <MT25QL512ABB_EnableMemoryMappedModeSTR+0x152>
 8002862:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002866:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002868:	2300      	movs	r3, #0
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002870:	2300      	movs	r3, #0
 8002872:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002874:	2300      	movs	r3, #0
 8002876:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8002880:	f107 0208 	add.w	r2, r7, #8
 8002884:	f107 0310 	add.w	r3, r7, #16
 8002888:	4619      	mov	r1, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f001 fe27 	bl	80044de <HAL_QSPI_MemoryMapped>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <MT25QL512ABB_EnableMemoryMappedModeSTR+0x188>
  {
    return MT25QL512ABB_ERROR;
 8002896:	f04f 33ff 	mov.w	r3, #4294967295
 800289a:	e000      	b.n	800289e <MT25QL512ABB_EnableMemoryMappedModeSTR+0x18a>
  }

  return MT25QL512ABB_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3748      	adds	r7, #72	; 0x48
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop

080028a8 <MT25QL512ABB_WriteEnable>:
  * @param  Mode Interface mode
  * @param  DualFlash Dual flash mode state
  * @retval error status
  */
int32_t MT25QL512ABB_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode, MT25QL512ABB_DualFlash_t DualFlash)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b096      	sub	sp, #88	; 0x58
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
 80028b4:	4613      	mov	r3, r2
 80028b6:	70bb      	strb	r3, [r7, #2]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Initialize the write enable command */
  s_command.InstructionMode   = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_INSTRUCTION_2_LINES : QSPI_INSTRUCTION_1_LINE;
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d008      	beq.n	80028d0 <MT25QL512ABB_WriteEnable+0x28>
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d102      	bne.n	80028ca <MT25QL512ABB_WriteEnable+0x22>
 80028c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c8:	e004      	b.n	80028d4 <MT25QL512ABB_WriteEnable+0x2c>
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	e001      	b.n	80028d4 <MT25QL512ABB_WriteEnable+0x2c>
 80028d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028d4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25QL512ABB_WRITE_ENABLE_CMD;
 80028d6:	2306      	movs	r3, #6
 80028d8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80028da:	2300      	movs	r3, #0
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80028de:	2300      	movs	r3, #0
 80028e0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DummyCycles       = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80028ee:	2300      	movs	r3, #0
 80028f0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80028f2:	2300      	movs	r3, #0
 80028f4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80028f6:	f107 0320 	add.w	r3, r7, #32
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 fc85 	bl	8004210 <HAL_QSPI_Command>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <MT25QL512ABB_WriteEnable+0x6a>
  {
    return MT25QL512ABB_ERROR;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
 8002910:	e03e      	b.n	8002990 <MT25QL512ABB_WriteEnable+0xe8>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = (DualFlash == MT25QL512ABB_DUALFLASH_ENABLE) ? ((MT25QL512ABB_SR_WEN << 8) | MT25QL512ABB_SR_WEN) : MT25QL512ABB_SR_WEN;
 8002912:	78bb      	ldrb	r3, [r7, #2]
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d102      	bne.n	800291e <MT25QL512ABB_WriteEnable+0x76>
 8002918:	f240 2302 	movw	r3, #514	; 0x202
 800291c:	e000      	b.n	8002920 <MT25QL512ABB_WriteEnable+0x78>
 800291e:	2302      	movs	r3, #2
 8002920:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = (DualFlash == MT25QL512ABB_DUALFLASH_ENABLE) ? ((MT25QL512ABB_SR_WEN << 8) | MT25QL512ABB_SR_WEN) : MT25QL512ABB_SR_WEN;
 8002922:	78bb      	ldrb	r3, [r7, #2]
 8002924:	2b40      	cmp	r3, #64	; 0x40
 8002926:	d102      	bne.n	800292e <MT25QL512ABB_WriteEnable+0x86>
 8002928:	f240 2302 	movw	r3, #514	; 0x202
 800292c:	e000      	b.n	8002930 <MT25QL512ABB_WriteEnable+0x88>
 800292e:	2302      	movs	r3, #2
 8002930:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = (DualFlash == MT25QL512ABB_DUALFLASH_ENABLE) ? 2U : 1U;
 8002936:	78bb      	ldrb	r3, [r7, #2]
 8002938:	2b40      	cmp	r3, #64	; 0x40
 800293a:	d101      	bne.n	8002940 <MT25QL512ABB_WriteEnable+0x98>
 800293c:	2302      	movs	r3, #2
 800293e:	e000      	b.n	8002942 <MT25QL512ABB_WriteEnable+0x9a>
 8002940:	2301      	movs	r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  s_config.Interval        = MT25QL512ABB_AUTOPOLLING_INTERVAL_TIME;
 8002944:	2310      	movs	r3, #16
 8002946:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800294c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25QL512ABB_READ_STATUS_REG_CMD;
 800294e:	2305      	movs	r3, #5
 8002950:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_DATA_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_DATA_2_LINES : QSPI_DATA_1_LINE;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	2b06      	cmp	r3, #6
 8002956:	d008      	beq.n	800296a <MT25QL512ABB_WriteEnable+0xc2>
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d102      	bne.n	8002964 <MT25QL512ABB_WriteEnable+0xbc>
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	e004      	b.n	800296e <MT25QL512ABB_WriteEnable+0xc6>
 8002964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002968:	e001      	b.n	800296e <MT25QL512ABB_WriteEnable+0xc6>
 800296a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800296e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002970:	f107 0208 	add.w	r2, r7, #8
 8002974:	f107 0120 	add.w	r1, r7, #32
 8002978:	f241 3388 	movw	r3, #5000	; 0x1388
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f001 fd37 	bl	80043f0 <HAL_QSPI_AutoPolling>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <MT25QL512ABB_WriteEnable+0xe6>
  {
    return MT25QL512ABB_ERROR;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	e000      	b.n	8002990 <MT25QL512ABB_WriteEnable+0xe8>
  }

  return MT25QL512ABB_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3758      	adds	r7, #88	; 0x58
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <MT25QL512ABB_EnterQPIMode>:
  *         SPI; 1-0-0
  * @param  Ctx Component object pointer
  * @retval error status
  */
int32_t MT25QL512ABB_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b090      	sub	sp, #64	; 0x40
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;

  /* Initialize the QPI enable command */
  /* QSPI memory is supposed to be in SPI mode, so CMD on 1 LINE */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25QL512ABB_ENABLE_QSPI_CMD;
 80029a6:	2335      	movs	r3, #53	; 0x35
 80029a8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DummyCycles       = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80029c2:	2300      	movs	r3, #0
 80029c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f001 fc1d 	bl	8004210 <HAL_QSPI_Command>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <MT25QL512ABB_EnterQPIMode+0x4a>
  {
    return MT25QL512ABB_ERROR;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
 80029e0:	e000      	b.n	80029e4 <MT25QL512ABB_EnterQPIMode+0x4c>
  }

  return MT25QL512ABB_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3740      	adds	r7, #64	; 0x40
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <MT25QL512ABB_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval error status
  */
int32_t MT25QL512ABB_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	; 0x40
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read ID command */
  s_command.InstructionMode   = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_INSTRUCTION_2_LINES : QSPI_INSTRUCTION_1_LINE;
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d008      	beq.n	8002a10 <MT25QL512ABB_Enter4BytesAddressMode+0x24>
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	d102      	bne.n	8002a0a <MT25QL512ABB_Enter4BytesAddressMode+0x1e>
 8002a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a08:	e004      	b.n	8002a14 <MT25QL512ABB_Enter4BytesAddressMode+0x28>
 8002a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a0e:	e001      	b.n	8002a14 <MT25QL512ABB_Enter4BytesAddressMode+0x28>
 8002a10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a14:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25QL512ABB_ENTER_4_BYTE_ADDR_MODE_CMD;
 8002a16:	23b7      	movs	r3, #183	; 0xb7
 8002a18:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DummyCycles       = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f001 fbe5 	bl	8004210 <HAL_QSPI_Command>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d002      	beq.n	8002a52 <MT25QL512ABB_Enter4BytesAddressMode+0x66>
  {
    return MT25QL512ABB_ERROR;
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	e000      	b.n	8002a54 <MT25QL512ABB_Enter4BytesAddressMode+0x68>
  }

  return MT25QL512ABB_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3740      	adds	r7, #64	; 0x40
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <MT25QL512ABB_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface select
  * @retval error status
  */
int32_t MT25QL512ABB_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b090      	sub	sp, #64	; 0x40
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_INSTRUCTION_2_LINES : QSPI_INSTRUCTION_1_LINE;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d008      	beq.n	8002a80 <MT25QL512ABB_ResetEnable+0x24>
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d102      	bne.n	8002a7a <MT25QL512ABB_ResetEnable+0x1e>
 8002a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a78:	e004      	b.n	8002a84 <MT25QL512ABB_ResetEnable+0x28>
 8002a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7e:	e001      	b.n	8002a84 <MT25QL512ABB_ResetEnable+0x28>
 8002a80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a84:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25QL512ABB_RESET_ENABLE_CMD;
 8002a86:	2366      	movs	r3, #102	; 0x66
 8002a88:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DummyCycles       = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002aa6:	f107 0308 	add.w	r3, r7, #8
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f001 fbad 	bl	8004210 <HAL_QSPI_Command>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <MT25QL512ABB_ResetEnable+0x66>
  {
    return MT25QL512ABB_ERROR;
 8002abc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac0:	e000      	b.n	8002ac4 <MT25QL512ABB_ResetEnable+0x68>
  }

  return MT25QL512ABB_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3740      	adds	r7, #64	; 0x40
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <MT25QL512ABB_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface select
  * @retval error status
  */
int32_t MT25QL512ABB_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25QL512ABB_Interface_t Mode)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b090      	sub	sp, #64	; 0x40
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25QL512ABB_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : (Mode == MT25QL512ABB_DPI_MODE) ? QSPI_INSTRUCTION_2_LINES : QSPI_INSTRUCTION_1_LINE;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d008      	beq.n	8002af0 <MT25QL512ABB_ResetMemory+0x24>
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d102      	bne.n	8002aea <MT25QL512ABB_ResetMemory+0x1e>
 8002ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae8:	e004      	b.n	8002af4 <MT25QL512ABB_ResetMemory+0x28>
 8002aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aee:	e001      	b.n	8002af4 <MT25QL512ABB_ResetMemory+0x28>
 8002af0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002af4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25QL512ABB_RESET_MEMORY_CMD;
 8002af6:	2399      	movs	r3, #153	; 0x99
 8002af8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002afe:	2300      	movs	r3, #0
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DummyCycles       = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002b12:	2300      	movs	r3, #0
 8002b14:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4619      	mov	r1, r3
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f001 fb75 	bl	8004210 <HAL_QSPI_Command>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <MT25QL512ABB_ResetMemory+0x66>
  {
    return MT25QL512ABB_ERROR;
 8002b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b30:	e000      	b.n	8002b34 <MT25QL512ABB_ResetMemory+0x68>
  }

  return MT25QL512ABB_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3740      	adds	r7, #64	; 0x40
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <HAL_Init+0x28>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <HAL_Init+0x28>)
 8002b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b4c:	2003      	movs	r0, #3
 8002b4e:	f000 f920 	bl	8002d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b52:	200f      	movs	r0, #15
 8002b54:	f7ff f952 	bl	8001dfc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b58:	f7ff f928 	bl	8001dac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023c00 	.word	0x40023c00

08002b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000008 	.word	0x20000008
 8002b8c:	20010874 	.word	0x20010874

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20010874 	.word	0x20010874

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d005      	beq.n	8002bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_Delay+0x44>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bce:	bf00      	nop
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f7      	bhi.n	8002bd0 <HAL_Delay+0x28>
  {
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000008 	.word	0x20000008

08002bf0 <__NVIC_SetPriorityGrouping>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <__NVIC_SetPriorityGrouping+0x40>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <__NVIC_SetPriorityGrouping+0x40>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00
 8002c34:	05fa0000 	.word	0x05fa0000

08002c38 <__NVIC_GetPriorityGrouping>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_DisableIRQ>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	db12      	blt.n	8002cc8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	f003 021f 	and.w	r2, r3, #31
 8002ca8:	490a      	ldr	r1, [pc, #40]	; (8002cd4 <__NVIC_DisableIRQ+0x44>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cb6:	3320      	adds	r3, #32
 8002cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002cbc:	f3bf 8f4f 	dsb	sy
}
 8002cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cc2:	f3bf 8f6f 	isb	sy
}
 8002cc6:	bf00      	nop
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff28 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dba:	f7ff ff3d 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	6978      	ldr	r0, [r7, #20]
 8002dc6:	f7ff ffb1 	bl	8002d2c <NVIC_EncodePriority>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ff80 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002dd8:	bf00      	nop
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff ff30 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff40 	bl	8002c90 <__NVIC_DisableIRQ>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e26:	f7ff feb3 	bl	8002b90 <HAL_GetTick>
 8002e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e052      	b.n	8002ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0216 	bic.w	r2, r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_DMA_Abort+0x62>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0208 	bic.w	r2, r2, #8
 8002e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0201 	bic.w	r2, r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	e013      	b.n	8002ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e9c:	f7ff fe78 	bl	8002b90 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d90c      	bls.n	8002ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2220      	movs	r2, #32
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e015      	b.n	8002ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e4      	bne.n	8002e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e049      	b.n	8002f9e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fd fb9a 	bl	8000658 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f48:	f023 0107 	bic.w	r1, r3, #7
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <HAL_DMA2D_Init+0xb0>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d1      	ldr	r1, [r2, #12]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f74:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	051a      	lsls	r2, r3, #20
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	055b      	lsls	r3, r3, #21
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	ffffc000 	.word	0xffffc000

08002fac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d026      	beq.n	800301c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d021      	beq.n	800301c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2204      	movs	r2, #4
 8003000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d026      	beq.n	8003074 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d021      	beq.n	8003074 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2220      	movs	r2, #32
 8003046:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f043 0202 	orr.w	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2204      	movs	r2, #4
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d026      	beq.n	80030cc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d021      	beq.n	80030cc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003096:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2208      	movs	r2, #8
 800309e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2204      	movs	r2, #4
 80030b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d013      	beq.n	80030fe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2204      	movs	r2, #4
 80030f6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f853 	bl	80031a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d024      	beq.n	8003152 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01f      	beq.n	8003152 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2202      	movs	r2, #2
 8003128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01f      	beq.n	800319c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01a      	beq.n	800319c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003174:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2210      	movs	r2, #16
 800317c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f80e 	bl	80031b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_DMA2D_ConfigLayer+0x20>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e084      	b.n	80032f6 <HAL_DMA2D_ConfigLayer+0x12a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	3320      	adds	r3, #32
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	041b      	lsls	r3, r3, #16
 8003218:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003220:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800322c:	4b35      	ldr	r3, [pc, #212]	; (8003304 <HAL_DMA2D_ConfigLayer+0x138>)
 800322e:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b0a      	cmp	r3, #10
 8003236:	d003      	beq.n	8003240 <HAL_DMA2D_ConfigLayer+0x74>
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b09      	cmp	r3, #9
 800323e:	d107      	bne.n	8003250 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	e005      	b.n	800325c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d120      	bne.n	80032a4 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	ea02 0103 	and.w	r1, r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	430a      	orrs	r2, r1
 8003278:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b0a      	cmp	r3, #10
 800328a:	d003      	beq.n	8003294 <HAL_DMA2D_ConfigLayer+0xc8>
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b09      	cmp	r3, #9
 8003292:	d127      	bne.n	80032e4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
 80032a2:	e01f      	b.n	80032e4 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	ea02 0103 	and.w	r1, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b0a      	cmp	r3, #10
 80032cc:	d003      	beq.n	80032d6 <HAL_DMA2D_ConfigLayer+0x10a>
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b09      	cmp	r3, #9
 80032d4:	d106      	bne.n	80032e4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80032e2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	ff33000f 	.word	0xff33000f

08003308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e175      	b.n	8003614 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	429a      	cmp	r2, r3
 8003342:	f040 8164 	bne.w	800360e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d00b      	beq.n	8003366 <HAL_GPIO_Init+0x5e>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d007      	beq.n	8003366 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800335a:	2b11      	cmp	r3, #17
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b12      	cmp	r3, #18
 8003364:	d130      	bne.n	80033c8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 0201 	and.w	r2, r3, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d003      	beq.n	8003408 <HAL_GPIO_Init+0x100>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	2b12      	cmp	r3, #18
 8003406:	d123      	bne.n	8003450 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	220f      	movs	r2, #15
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3208      	adds	r2, #8
 800344a:	69b9      	ldr	r1, [r7, #24]
 800344c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4013      	ands	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0203 	and.w	r2, r3, #3
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80be 	beq.w	800360e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003492:	4b66      	ldr	r3, [pc, #408]	; (800362c <HAL_GPIO_Init+0x324>)
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	4a65      	ldr	r2, [pc, #404]	; (800362c <HAL_GPIO_Init+0x324>)
 8003498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800349c:	6453      	str	r3, [r2, #68]	; 0x44
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_GPIO_Init+0x324>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034aa:	4a61      	ldr	r2, [pc, #388]	; (8003630 <HAL_GPIO_Init+0x328>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a58      	ldr	r2, [pc, #352]	; (8003634 <HAL_GPIO_Init+0x32c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d037      	beq.n	8003546 <HAL_GPIO_Init+0x23e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a57      	ldr	r2, [pc, #348]	; (8003638 <HAL_GPIO_Init+0x330>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d031      	beq.n	8003542 <HAL_GPIO_Init+0x23a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a56      	ldr	r2, [pc, #344]	; (800363c <HAL_GPIO_Init+0x334>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d02b      	beq.n	800353e <HAL_GPIO_Init+0x236>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a55      	ldr	r2, [pc, #340]	; (8003640 <HAL_GPIO_Init+0x338>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d025      	beq.n	800353a <HAL_GPIO_Init+0x232>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a54      	ldr	r2, [pc, #336]	; (8003644 <HAL_GPIO_Init+0x33c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d01f      	beq.n	8003536 <HAL_GPIO_Init+0x22e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a53      	ldr	r2, [pc, #332]	; (8003648 <HAL_GPIO_Init+0x340>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d019      	beq.n	8003532 <HAL_GPIO_Init+0x22a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_GPIO_Init+0x344>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d013      	beq.n	800352e <HAL_GPIO_Init+0x226>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a51      	ldr	r2, [pc, #324]	; (8003650 <HAL_GPIO_Init+0x348>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00d      	beq.n	800352a <HAL_GPIO_Init+0x222>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a50      	ldr	r2, [pc, #320]	; (8003654 <HAL_GPIO_Init+0x34c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d007      	beq.n	8003526 <HAL_GPIO_Init+0x21e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4f      	ldr	r2, [pc, #316]	; (8003658 <HAL_GPIO_Init+0x350>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_GPIO_Init+0x21a>
 800351e:	2309      	movs	r3, #9
 8003520:	e012      	b.n	8003548 <HAL_GPIO_Init+0x240>
 8003522:	230a      	movs	r3, #10
 8003524:	e010      	b.n	8003548 <HAL_GPIO_Init+0x240>
 8003526:	2308      	movs	r3, #8
 8003528:	e00e      	b.n	8003548 <HAL_GPIO_Init+0x240>
 800352a:	2307      	movs	r3, #7
 800352c:	e00c      	b.n	8003548 <HAL_GPIO_Init+0x240>
 800352e:	2306      	movs	r3, #6
 8003530:	e00a      	b.n	8003548 <HAL_GPIO_Init+0x240>
 8003532:	2305      	movs	r3, #5
 8003534:	e008      	b.n	8003548 <HAL_GPIO_Init+0x240>
 8003536:	2304      	movs	r3, #4
 8003538:	e006      	b.n	8003548 <HAL_GPIO_Init+0x240>
 800353a:	2303      	movs	r3, #3
 800353c:	e004      	b.n	8003548 <HAL_GPIO_Init+0x240>
 800353e:	2302      	movs	r3, #2
 8003540:	e002      	b.n	8003548 <HAL_GPIO_Init+0x240>
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_GPIO_Init+0x240>
 8003546:	2300      	movs	r3, #0
 8003548:	69fa      	ldr	r2, [r7, #28]
 800354a:	f002 0203 	and.w	r2, r2, #3
 800354e:	0092      	lsls	r2, r2, #2
 8003550:	4093      	lsls	r3, r2
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003558:	4935      	ldr	r1, [pc, #212]	; (8003630 <HAL_GPIO_Init+0x328>)
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003566:	4b3d      	ldr	r3, [pc, #244]	; (800365c <HAL_GPIO_Init+0x354>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800358a:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_GPIO_Init+0x354>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_GPIO_Init+0x354>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_GPIO_Init+0x354>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ba:	4b28      	ldr	r3, [pc, #160]	; (800365c <HAL_GPIO_Init+0x354>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035de:	4a1f      	ldr	r2, [pc, #124]	; (800365c <HAL_GPIO_Init+0x354>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_GPIO_Init+0x354>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <HAL_GPIO_Init+0x354>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3301      	adds	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b0f      	cmp	r3, #15
 8003618:	f67f ae86 	bls.w	8003328 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	3724      	adds	r7, #36	; 0x24
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	40013800 	.word	0x40013800
 8003634:	40020000 	.word	0x40020000
 8003638:	40020400 	.word	0x40020400
 800363c:	40020800 	.word	0x40020800
 8003640:	40020c00 	.word	0x40020c00
 8003644:	40021000 	.word	0x40021000
 8003648:	40021400 	.word	0x40021400
 800364c:	40021800 	.word	0x40021800
 8003650:	40021c00 	.word	0x40021c00
 8003654:	40022000 	.word	0x40022000
 8003658:	40022400 	.word	0x40022400
 800365c:	40013c00 	.word	0x40013c00

08003660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
 800366c:	4613      	mov	r3, r2
 800366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003670:	787b      	ldrb	r3, [r7, #1]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003676:	887a      	ldrh	r2, [r7, #2]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800367c:	e003      	b.n	8003686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800367e:	887b      	ldrh	r3, [r7, #2]
 8003680:	041a      	lsls	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	619a      	str	r2, [r3, #24]
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	460b      	mov	r3, r1
 800369c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4013      	ands	r3, r2
 80036aa:	041a      	lsls	r2, r3, #16
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	400b      	ands	r3, r1
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	619a      	str	r2, [r3, #24]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e07f      	b.n	80037da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fef0 	bl	80014d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	e006      	b.n	8003750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800374e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d104      	bne.n	8003762 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003760:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_I2C_Init+0x11c>)
 800376e:	430b      	orrs	r3, r1
 8003770:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003780:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691a      	ldr	r2, [r3, #16]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	ea42 0103 	orr.w	r1, r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	02008000 	.word	0x02008000

080037e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d138      	bne.n	8003870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003808:	2302      	movs	r3, #2
 800380a:	e032      	b.n	8003872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800383a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6819      	ldr	r1, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	430a      	orrs	r2, r1
 800384a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	d139      	bne.n	8003908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800389e:	2302      	movs	r3, #2
 80038a0:	e033      	b.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2224      	movs	r2, #36	; 0x24
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0201 	bic.w	r2, r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0bf      	b.n	8003aaa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd feaa 	bl	8001698 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800395a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6999      	ldr	r1, [r3, #24]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003970:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	430a      	orrs	r2, r1
 800397e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <HAL_LTDC_Init+0x19c>)
 800398c:	400b      	ands	r3, r1
 800398e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	041b      	lsls	r3, r3, #16
 8003996:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6899      	ldr	r1, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68d9      	ldr	r1, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b3e      	ldr	r3, [pc, #248]	; (8003ab4 <HAL_LTDC_Init+0x19c>)
 80039ba:	400b      	ands	r3, r1
 80039bc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68d9      	ldr	r1, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_LTDC_Init+0x19c>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6919      	ldr	r1, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6959      	ldr	r1, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <HAL_LTDC_Init+0x19c>)
 8003a16:	400b      	ands	r3, r1
 8003a18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6959      	ldr	r1, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a48:	041b      	lsls	r3, r3, #16
 8003a4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0206 	orr.w	r2, r2, #6
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	f000f800 	.word	0xf000f800

08003ab8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ace:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d023      	beq.n	8003b22 <HAL_LTDC_IRQHandler+0x6a>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01e      	beq.n	8003b22 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0204 	bic.w	r2, r2, #4
 8003af2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2204      	movs	r2, #4
 8003afa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b02:	f043 0201 	orr.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f86f 	bl	8003c00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_LTDC_IRQHandler+0xbc>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d01e      	beq.n	8003b74 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0202 	bic.w	r2, r2, #2
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b54:	f043 0202 	orr.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2204      	movs	r2, #4
 8003b62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f846 	bl	8003c00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d01b      	beq.n	8003bb6 <HAL_LTDC_IRQHandler+0xfe>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d016      	beq.n	8003bb6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f82f 	bl	8003c14 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_LTDC_IRQHandler+0x140>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0208 	bic.w	r2, r2, #8
 8003bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2208      	movs	r2, #8
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f818 	bl	8003c28 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_LTDC_ConfigLayer+0x1a>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e02c      	b.n	8003cb0 <HAL_LTDC_ConfigLayer+0x74>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2202      	movs	r2, #2
 8003c62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2134      	movs	r1, #52	; 0x34
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	4614      	mov	r4, r2
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f847 	bl	8003d24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bdb0      	pop	{r4, r5, r7, pc}

08003cb8 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_LTDC_SetAddress+0x1a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e024      	b.n	8003d1c <HAL_LTDC_SetAddress+0x64>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2234      	movs	r2, #52	; 0x34
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	3338      	adds	r3, #56	; 0x38
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6979      	ldr	r1, [r7, #20]
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f811 	bl	8003d24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2201      	movs	r2, #1
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	4413      	add	r3, r2
 8003d42:	041b      	lsls	r3, r3, #16
 8003d44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	01db      	lsls	r3, r3, #7
 8003d50:	4413      	add	r3, r2
 8003d52:	3384      	adds	r3, #132	; 0x84
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	01d2      	lsls	r2, r2, #7
 8003d60:	440a      	add	r2, r1
 8003d62:	3284      	adds	r2, #132	; 0x84
 8003d64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7a:	4413      	add	r3, r2
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4619      	mov	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	01db      	lsls	r3, r3, #7
 8003d88:	440b      	add	r3, r1
 8003d8a:	3384      	adds	r3, #132	; 0x84
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	68da      	ldr	r2, [r3, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da2:	4413      	add	r3, r2
 8003da4:	041b      	lsls	r3, r3, #16
 8003da6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	01db      	lsls	r3, r3, #7
 8003db2:	4413      	add	r3, r2
 8003db4:	3384      	adds	r3, #132	; 0x84
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	01d2      	lsls	r2, r2, #7
 8003dc2:	440a      	add	r2, r1
 8003dc4:	3284      	adds	r2, #132	; 0x84
 8003dc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003dca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dda:	4413      	add	r3, r2
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4619      	mov	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	01db      	lsls	r3, r3, #7
 8003de8:	440b      	add	r3, r1
 8003dea:	3384      	adds	r3, #132	; 0x84
 8003dec:	4619      	mov	r1, r3
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	01db      	lsls	r3, r3, #7
 8003dfe:	4413      	add	r3, r2
 8003e00:	3384      	adds	r3, #132	; 0x84
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	4611      	mov	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	01d2      	lsls	r2, r2, #7
 8003e0e:	440a      	add	r2, r1
 8003e10:	3284      	adds	r2, #132	; 0x84
 8003e12:	f023 0307 	bic.w	r3, r3, #7
 8003e16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	01db      	lsls	r3, r3, #7
 8003e22:	4413      	add	r3, r2
 8003e24:	3384      	adds	r3, #132	; 0x84
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	01db      	lsls	r3, r3, #7
 8003e54:	4413      	add	r3, r2
 8003e56:	3384      	adds	r3, #132	; 0x84
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	01db      	lsls	r3, r3, #7
 8003e64:	4413      	add	r3, r2
 8003e66:	3384      	adds	r3, #132	; 0x84
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e74:	461a      	mov	r2, r3
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4619      	mov	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	01db      	lsls	r3, r3, #7
 8003e88:	440b      	add	r3, r1
 8003e8a:	3384      	adds	r3, #132	; 0x84
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	01db      	lsls	r3, r3, #7
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3384      	adds	r3, #132	; 0x84
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	01d2      	lsls	r2, r2, #7
 8003eae:	440a      	add	r2, r1
 8003eb0:	3284      	adds	r2, #132	; 0x84
 8003eb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	01db      	lsls	r3, r3, #7
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3384      	adds	r3, #132	; 0x84
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	01db      	lsls	r3, r3, #7
 8003ed8:	4413      	add	r3, r2
 8003eda:	3384      	adds	r3, #132	; 0x84
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	01db      	lsls	r3, r3, #7
 8003ee8:	440b      	add	r3, r1
 8003eea:	3384      	adds	r3, #132	; 0x84
 8003eec:	4619      	mov	r1, r3
 8003eee:	4b58      	ldr	r3, [pc, #352]	; (8004050 <LTDC_SetConfig+0x32c>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	6809      	ldr	r1, [r1, #0]
 8003f00:	4608      	mov	r0, r1
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	01c9      	lsls	r1, r1, #7
 8003f06:	4401      	add	r1, r0
 8003f08:	3184      	adds	r1, #132	; 0x84
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	01db      	lsls	r3, r3, #7
 8003f18:	4413      	add	r3, r2
 8003f1a:	3384      	adds	r3, #132	; 0x84
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	01db      	lsls	r3, r3, #7
 8003f28:	4413      	add	r3, r2
 8003f2a:	3384      	adds	r3, #132	; 0x84
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	01db      	lsls	r3, r3, #7
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3384      	adds	r3, #132	; 0x84
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003f50:	2304      	movs	r3, #4
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e01b      	b.n	8003f8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	e014      	b.n	8003f8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d00b      	beq.n	8003f84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d007      	beq.n	8003f84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d003      	beq.n	8003f84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f80:	2b07      	cmp	r3, #7
 8003f82:	d102      	bne.n	8003f8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003f84:	2302      	movs	r3, #2
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e001      	b.n	8003f8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	4413      	add	r3, r2
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	01d2      	lsls	r2, r2, #7
 8003fa8:	440a      	add	r2, r1
 8003faa:	3284      	adds	r2, #132	; 0x84
 8003fac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	fb02 f303 	mul.w	r3, r2, r3
 8003fbc:	041a      	lsls	r2, r3, #16
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1acb      	subs	r3, r1, r3
 8003fc8:	69f9      	ldr	r1, [r7, #28]
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	3303      	adds	r3, #3
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	6809      	ldr	r1, [r1, #0]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	01c9      	lsls	r1, r1, #7
 8003fda:	4401      	add	r1, r0
 8003fdc:	3184      	adds	r1, #132	; 0x84
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	01db      	lsls	r3, r3, #7
 8003fec:	4413      	add	r3, r2
 8003fee:	3384      	adds	r3, #132	; 0x84
 8003ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	01db      	lsls	r3, r3, #7
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3384      	adds	r3, #132	; 0x84
 8004000:	4619      	mov	r1, r3
 8004002:	4b14      	ldr	r3, [pc, #80]	; (8004054 <LTDC_SetConfig+0x330>)
 8004004:	4013      	ands	r3, r2
 8004006:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	01db      	lsls	r3, r3, #7
 8004012:	4413      	add	r3, r2
 8004014:	3384      	adds	r3, #132	; 0x84
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	01db      	lsls	r3, r3, #7
 8004028:	4413      	add	r3, r2
 800402a:	3384      	adds	r3, #132	; 0x84
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	4611      	mov	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	01d2      	lsls	r2, r2, #7
 8004038:	440a      	add	r2, r1
 800403a:	3284      	adds	r2, #132	; 0x84
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6013      	str	r3, [r2, #0]
}
 8004042:	bf00      	nop
 8004044:	3724      	adds	r7, #36	; 0x24
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	fffff8f8 	.word	0xfffff8f8
 8004054:	fffff800 	.word	0xfffff800

08004058 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a04      	ldr	r2, [pc, #16]	; (8004074 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40007000 	.word	0x40007000

08004078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	4b23      	ldr	r3, [pc, #140]	; (8004110 <HAL_PWREx_EnableOverDrive+0x98>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_PWREx_EnableOverDrive+0x98>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_PWREx_EnableOverDrive+0x98>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_PWREx_EnableOverDrive+0x9c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a6:	f7fe fd73 	bl	8002b90 <HAL_GetTick>
 80040aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040ac:	e009      	b.n	80040c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040ae:	f7fe fd6f 	bl	8002b90 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040bc:	d901      	bls.n	80040c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e022      	b.n	8004108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040c2:	4b14      	ldr	r3, [pc, #80]	; (8004114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d1ee      	bne.n	80040ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7fe fd58 	bl	8002b90 <HAL_GetTick>
 80040e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040e2:	e009      	b.n	80040f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040e4:	f7fe fd54 	bl	8002b90 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f2:	d901      	bls.n	80040f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e007      	b.n	8004108 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004104:	d1ee      	bne.n	80040e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	40007000 	.word	0x40007000

08004118 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af02      	add	r7, sp, #8
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004120:	f7fe fd36 	bl	8002b90 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e067      	b.n	8004200 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fd fd9f 	bl	8001c88 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800414a:	f241 3188 	movw	r1, #5000	; 0x1388
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa94 	bl	800467c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	3b01      	subs	r3, #1
 8004164:	021a      	lsls	r2, r3, #8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	2120      	movs	r1, #32
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fa8c 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d135      	bne.n	80041f6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_QSPI_Init+0xf0>)
 8004192:	4013      	ands	r3, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6852      	ldr	r2, [r2, #4]
 8004198:	0611      	lsls	r1, r2, #24
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68d2      	ldr	r2, [r2, #12]
 800419e:	4311      	orrs	r1, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	69d2      	ldr	r2, [r2, #28]
 80041a4:	4311      	orrs	r1, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6a12      	ldr	r2, [r2, #32]
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	4b14      	ldr	r3, [pc, #80]	; (800420c <HAL_QSPI_Init+0xf4>)
 80041bc:	4013      	ands	r3, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6912      	ldr	r2, [r2, #16]
 80041c2:	0411      	lsls	r1, r2, #16
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6952      	ldr	r2, [r2, #20]
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6992      	ldr	r2, [r2, #24]
 80041ce:	4311      	orrs	r1, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	00ffff2f 	.word	0x00ffff2f
 800420c:	ffe0f8fe 	.word	0xffe0f8fe

08004210 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7fe fcb8 	bl	8002b90 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_QSPI_Command+0x22>
 800422e:	2302      	movs	r3, #2
 8004230:	e048      	b.n	80042c4 <HAL_QSPI_Command+0xb4>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b01      	cmp	r3, #1
 8004244:	d137      	bne.n	80042b6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2200      	movs	r2, #0
 800425c:	2120      	movs	r1, #32
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 fa1a 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d125      	bne.n	80042ba <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800426e:	2200      	movs	r2, #0
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa47 	bl	8004706 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d115      	bne.n	80042ac <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2201      	movs	r2, #1
 8004288:	2102      	movs	r1, #2
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 fa04 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2202      	movs	r2, #2
 80042a0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042aa:	e006      	b.n	80042ba <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042b4:	e001      	b.n	80042ba <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7fe fc58 	bl	8002b90 <HAL_GetTick>
 80042e0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3320      	adds	r3, #32
 80042e8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_QSPI_Transmit+0x2e>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e076      	b.n	80043e8 <HAL_QSPI_Transmit+0x11c>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d165      	bne.n	80043da <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d056      	beq.n	80043c8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2212      	movs	r2, #18
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695a      	ldr	r2, [r3, #20]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800434e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8004350:	e01b      	b.n	800438a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2201      	movs	r2, #1
 800435a:	2104      	movs	r1, #4
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f99b 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1df      	bne.n	8004352 <HAL_QSPI_Transmit+0x86>
 8004392:	e000      	b.n	8004396 <HAL_QSPI_Transmit+0xca>
          break;
 8004394:	bf00      	nop
      }

      if (status == HAL_OK)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d110      	bne.n	80043be <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2201      	movs	r2, #1
 80043a4:	2102      	movs	r1, #2
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f976 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2202      	movs	r2, #2
 80043bc:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043c6:	e00a      	b.n	80043de <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	f043 0208 	orr.w	r2, r3, #8
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	77fb      	strb	r3, [r7, #31]
 80043d8:	e001      	b.n	80043de <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80043da:	2302      	movs	r3, #2
 80043dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80043e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80043fe:	f7fe fbc7 	bl	8002b90 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_QSPI_AutoPolling+0x24>
 8004410:	2302      	movs	r3, #2
 8004412:	e060      	b.n	80044d6 <HAL_QSPI_AutoPolling+0xe6>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b01      	cmp	r3, #1
 8004426:	d14f      	bne.n	80044c8 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2242      	movs	r2, #66	; 0x42
 8004432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2200      	movs	r2, #0
 800443e:	2120      	movs	r1, #32
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f929 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d13d      	bne.n	80044cc <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6852      	ldr	r2, [r2, #4]
 8004462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6892      	ldr	r2, [r2, #8]
 800446c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	431a      	orrs	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004486:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8004490:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f935 	bl	8004706 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2201      	movs	r2, #1
 80044a4:	2108      	movs	r1, #8
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f8f6 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2208      	movs	r2, #8
 80044bc:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c6:	e001      	b.n	80044cc <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
 80044ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b088      	sub	sp, #32
 80044e2:	af02      	add	r7, sp, #8
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7fe fb51 	bl	8002b90 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_QSPI_MemoryMapped+0x22>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e04c      	b.n	800459a <HAL_QSPI_MemoryMapped+0xbc>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d13b      	bne.n	800458c <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2282      	movs	r2, #130	; 0x82
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2200      	movs	r2, #0
 800452c:	2120      	movs	r1, #32
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8b2 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d128      	bne.n	8004590 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 0108 	bic.w	r1, r3, #8
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d110      	bne.n	800457e <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2210      	movs	r2, #16
 800456c:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800457c:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800457e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f8be 	bl	8004706 <QSPI_Config>
 800458a:	e001      	b.n	8004590 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800458c:	2302      	movs	r3, #2
 800458e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b086      	sub	sp, #24
 80045a6:	af02      	add	r7, sp, #8
 80045a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80045ae:	f7fe faef 	bl	8002b90 <HAL_GetTick>
 80045b2:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d056      	beq.n	8004672 <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d017      	beq.n	800460a <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0204 	bic.w	r2, r2, #4
 80045e8:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fc12 	bl	8002e18 <HAL_DMA_Abort>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004602:	f043 0204 	orr.w	r2, r3, #4
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0202 	orr.w	r2, r2, #2
 8004618:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2201      	movs	r2, #1
 8004624:	2102      	movs	r1, #2
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f836 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10e      	bne.n	8004654 <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2202      	movs	r2, #2
 800463c:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2200      	movs	r2, #0
 8004648:	2120      	movs	r1, #32
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f824 	bl	8004698 <QSPI_WaitFlagStateUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10b      	bne.n	8004672 <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004668:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 8004672:	7bfb      	ldrb	r3, [r7, #15]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046a8:	e01a      	b.n	80046e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d016      	beq.n	80046e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b2:	f7fe fa6d 	bl	8002b90 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d302      	bcc.n	80046c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10b      	bne.n	80046e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2204      	movs	r2, #4
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f043 0201 	orr.w	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e00e      	b.n	80046fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	2301      	movne	r3, #1
 80046f0:	2300      	moveq	r3, #0
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	461a      	mov	r2, r3
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1d6      	bne.n	80046aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <QSPI_Config+0x28>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004720:	d005      	beq.n	800472e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3a01      	subs	r2, #1
 800472c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80b9 	beq.w	80048aa <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d05f      	beq.n	8004800 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	6892      	ldr	r2, [r2, #8]
 8004748:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d031      	beq.n	80047b6 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	431a      	orrs	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	431a      	orrs	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	049b      	lsls	r3, r3, #18
 800476e:	431a      	orrs	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	431a      	orrs	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	431a      	orrs	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	431a      	orrs	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	ea42 0103 	orr.w	r1, r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	430a      	orrs	r2, r1
 800479e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80047a6:	f000 812e 	beq.w	8004a06 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	6852      	ldr	r2, [r2, #4]
 80047b2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80047b4:	e127      	b.n	8004a06 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047be:	431a      	orrs	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	431a      	orrs	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	049b      	lsls	r3, r3, #18
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	431a      	orrs	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	431a      	orrs	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	431a      	orrs	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	ea42 0103 	orr.w	r1, r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	615a      	str	r2, [r3, #20]
}
 80047fe:	e102      	b.n	8004a06 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02e      	beq.n	8004866 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	431a      	orrs	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	431a      	orrs	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	049b      	lsls	r3, r3, #18
 8004824:	431a      	orrs	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	431a      	orrs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	431a      	orrs	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	431a      	orrs	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	431a      	orrs	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	ea42 0103 	orr.w	r1, r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	430a      	orrs	r2, r1
 800484e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004856:	f000 80d6 	beq.w	8004a06 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	6852      	ldr	r2, [r2, #4]
 8004862:	619a      	str	r2, [r3, #24]
}
 8004864:	e0cf      	b.n	8004a06 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	431a      	orrs	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	431a      	orrs	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	431a      	orrs	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	049b      	lsls	r3, r3, #18
 8004882:	431a      	orrs	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	431a      	orrs	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	431a      	orrs	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	431a      	orrs	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	ea42 0103 	orr.w	r1, r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	615a      	str	r2, [r3, #20]
}
 80048a8:	e0ad      	b.n	8004a06 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d058      	beq.n	8004964 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68ba      	ldr	r2, [r7, #8]
 80048b8:	6892      	ldr	r2, [r2, #8]
 80048ba:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02d      	beq.n	8004920 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	431a      	orrs	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	431a      	orrs	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	049b      	lsls	r3, r3, #18
 80048e0:	431a      	orrs	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	ea42 0103 	orr.w	r1, r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	430a      	orrs	r2, r1
 800490a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004912:	d078      	beq.n	8004a06 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	619a      	str	r2, [r3, #24]
}
 800491e:	e072      	b.n	8004a06 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	431a      	orrs	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	431a      	orrs	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	049b      	lsls	r3, r3, #18
 800493c:	431a      	orrs	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	431a      	orrs	r2, r3
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	431a      	orrs	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	431a      	orrs	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	ea42 0103 	orr.w	r1, r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	430a      	orrs	r2, r1
 8004960:	615a      	str	r2, [r3, #20]
}
 8004962:	e050      	b.n	8004a06 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02a      	beq.n	80049c2 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	431a      	orrs	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	431a      	orrs	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	049b      	lsls	r3, r3, #18
 8004988:	431a      	orrs	r2, r3
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	431a      	orrs	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	431a      	orrs	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	431a      	orrs	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	ea42 0103 	orr.w	r1, r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80049b4:	d027      	beq.n	8004a06 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	6852      	ldr	r2, [r2, #4]
 80049be:	619a      	str	r2, [r3, #24]
}
 80049c0:	e021      	b.n	8004a06 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01d      	beq.n	8004a06 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	431a      	orrs	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	431a      	orrs	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	431a      	orrs	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	049b      	lsls	r3, r3, #18
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	431a      	orrs	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	ea42 0103 	orr.w	r1, r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	615a      	str	r2, [r3, #20]
}
 8004a06:	bf00      	nop
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e29b      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 8087 	beq.w	8004b46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a38:	4b96      	ldr	r3, [pc, #600]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d00c      	beq.n	8004a5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a44:	4b93      	ldr	r3, [pc, #588]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 030c 	and.w	r3, r3, #12
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d112      	bne.n	8004a76 <HAL_RCC_OscConfig+0x62>
 8004a50:	4b90      	ldr	r3, [pc, #576]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a5c:	d10b      	bne.n	8004a76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a5e:	4b8d      	ldr	r3, [pc, #564]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d06c      	beq.n	8004b44 <HAL_RCC_OscConfig+0x130>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d168      	bne.n	8004b44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e275      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCC_OscConfig+0x7a>
 8004a80:	4b84      	ldr	r3, [pc, #528]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e02e      	b.n	8004aec <HAL_RCC_OscConfig+0xd8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10c      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x9c>
 8004a96:	4b7f      	ldr	r3, [pc, #508]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a7e      	ldr	r2, [pc, #504]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7b      	ldr	r2, [pc, #492]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	e01d      	b.n	8004aec <HAL_RCC_OscConfig+0xd8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0xc0>
 8004aba:	4b76      	ldr	r3, [pc, #472]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	4b73      	ldr	r3, [pc, #460]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a72      	ldr	r2, [pc, #456]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0xd8>
 8004ad4:	4b6f      	ldr	r3, [pc, #444]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	4b6c      	ldr	r3, [pc, #432]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6b      	ldr	r2, [pc, #428]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fe f84c 	bl	8002b90 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fe f848 	bl	8002b90 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e229      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0xe8>
 8004b1a:	e014      	b.n	8004b46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fe f838 	bl	8002b90 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fe f834 	bl	8002b90 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e215      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x110>
 8004b42:	e000      	b.n	8004b46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d069      	beq.n	8004c26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b52:	4b50      	ldr	r3, [pc, #320]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d11c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x190>
 8004b6a:	4b4a      	ldr	r3, [pc, #296]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d116      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	4b47      	ldr	r3, [pc, #284]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_RCC_OscConfig+0x17a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d001      	beq.n	8004b8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e1e9      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b8e:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	493d      	ldr	r1, [pc, #244]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	e040      	b.n	8004c26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d023      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bac:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a38      	ldr	r2, [pc, #224]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd ffea 	bl	8002b90 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc0:	f7fd ffe6 	bl	8002b90 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e1c7      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd2:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bde:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4929      	ldr	r1, [pc, #164]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]
 8004bf2:	e018      	b.n	8004c26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf4:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a26      	ldr	r2, [pc, #152]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fd ffc6 	bl	8002b90 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c08:	f7fd ffc2 	bl	8002b90 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e1a3      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d038      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d019      	beq.n	8004c6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c3e:	4a15      	ldr	r2, [pc, #84]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004c40:	f043 0301 	orr.w	r3, r3, #1
 8004c44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fd ffa3 	bl	8002b90 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7fd ff9f 	bl	8002b90 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e180      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c60:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x23a>
 8004c6c:	e01a      	b.n	8004ca4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6e:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <HAL_RCC_OscConfig+0x280>)
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7a:	f7fd ff89 	bl	8002b90 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fd ff85 	bl	8002b90 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d903      	bls.n	8004c98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e166      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
 8004c94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c98:	4b92      	ldr	r3, [pc, #584]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1ee      	bne.n	8004c82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80a4 	beq.w	8004dfa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10d      	bne.n	8004cda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	4b89      	ldr	r3, [pc, #548]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a88      	ldr	r2, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b86      	ldr	r3, [pc, #536]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cda:	4b83      	ldr	r3, [pc, #524]	; (8004ee8 <HAL_RCC_OscConfig+0x4d4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d118      	bne.n	8004d18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ce6:	4b80      	ldr	r3, [pc, #512]	; (8004ee8 <HAL_RCC_OscConfig+0x4d4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a7f      	ldr	r2, [pc, #508]	; (8004ee8 <HAL_RCC_OscConfig+0x4d4>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fd ff4d 	bl	8002b90 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfa:	f7fd ff49 	bl	8002b90 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b64      	cmp	r3, #100	; 0x64
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e12a      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0c:	4b76      	ldr	r3, [pc, #472]	; (8004ee8 <HAL_RCC_OscConfig+0x4d4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x31a>
 8004d20:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	4a6f      	ldr	r2, [pc, #444]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2c:	e02d      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x33c>
 8004d36:	4b6b      	ldr	r3, [pc, #428]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a6a      	ldr	r2, [pc, #424]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70
 8004d42:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a67      	ldr	r2, [pc, #412]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	e01c      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCC_OscConfig+0x35e>
 8004d58:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a61      	ldr	r2, [pc, #388]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d5e:	f043 0304 	orr.w	r3, r3, #4
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	4b5f      	ldr	r3, [pc, #380]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d68:	4a5e      	ldr	r2, [pc, #376]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d6a:	f043 0301 	orr.w	r3, r3, #1
 8004d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d70:	e00b      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
 8004d72:	4b5c      	ldr	r3, [pc, #368]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a5b      	ldr	r2, [pc, #364]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d78:	f023 0301 	bic.w	r3, r3, #1
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7e:	4b59      	ldr	r3, [pc, #356]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d82:	4a58      	ldr	r2, [pc, #352]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004d84:	f023 0304 	bic.w	r3, r3, #4
 8004d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d015      	beq.n	8004dbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fd fefd 	bl	8002b90 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d98:	e00a      	b.n	8004db0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9a:	f7fd fef9 	bl	8002b90 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e0d8      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	4b4c      	ldr	r3, [pc, #304]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ee      	beq.n	8004d9a <HAL_RCC_OscConfig+0x386>
 8004dbc:	e014      	b.n	8004de8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fd fee7 	bl	8002b90 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fd fee3 	bl	8002b90 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0c2      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ddc:	4b41      	ldr	r3, [pc, #260]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1ee      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d105      	bne.n	8004dfa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dee:	4b3d      	ldr	r3, [pc, #244]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	4a3c      	ldr	r2, [pc, #240]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80ae 	beq.w	8004f60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e04:	4b37      	ldr	r3, [pc, #220]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d06d      	beq.n	8004eec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d14b      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e18:	4b32      	ldr	r3, [pc, #200]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a31      	ldr	r2, [pc, #196]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd feb4 	bl	8002b90 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fd feb0 	bl	8002b90 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e091      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3e:	4b29      	ldr	r3, [pc, #164]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	019b      	lsls	r3, r3, #6
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	3b01      	subs	r3, #1
 8004e64:	041b      	lsls	r3, r3, #16
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	061b      	lsls	r3, r3, #24
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	071b      	lsls	r3, r3, #28
 8004e76:	491b      	ldr	r1, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a18      	ldr	r2, [pc, #96]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004e82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fd fe82 	bl	8002b90 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e90:	f7fd fe7e 	bl	8002b90 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e05f      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCC_OscConfig+0x47c>
 8004eae:	e057      	b.n	8004f60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb0:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0b      	ldr	r2, [pc, #44]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fd fe68 	bl	8002b90 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fd fe64 	bl	8002b90 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e045      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed6:	4b03      	ldr	r3, [pc, #12]	; (8004ee4 <HAL_RCC_OscConfig+0x4d0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4b0>
 8004ee2:	e03d      	b.n	8004f60 <HAL_RCC_OscConfig+0x54c>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <HAL_RCC_OscConfig+0x558>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d030      	beq.n	8004f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d129      	bne.n	8004f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d122      	bne.n	8004f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d119      	bne.n	8004f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d10f      	bne.n	8004f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d107      	bne.n	8004f5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d001      	beq.n	8004f60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e000      	b.n	8004f62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800

08004f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0d0      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f88:	4b6a      	ldr	r3, [pc, #424]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d910      	bls.n	8004fb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b67      	ldr	r3, [pc, #412]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 020f 	bic.w	r2, r3, #15
 8004f9e:	4965      	ldr	r1, [pc, #404]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fa6:	4b63      	ldr	r3, [pc, #396]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0b8      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0304 	and.w	r3, r3, #4
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd0:	4b59      	ldr	r3, [pc, #356]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a58      	ldr	r2, [pc, #352]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe8:	4b53      	ldr	r3, [pc, #332]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	4a52      	ldr	r2, [pc, #328]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ff2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff4:	4b50      	ldr	r3, [pc, #320]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	494d      	ldr	r1, [pc, #308]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d040      	beq.n	8005094 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d107      	bne.n	800502a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d115      	bne.n	8005052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e07f      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e073      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005042:	4b3d      	ldr	r3, [pc, #244]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e06b      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005052:	4b39      	ldr	r3, [pc, #228]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 0203 	bic.w	r2, r3, #3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4936      	ldr	r1, [pc, #216]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005064:	f7fd fd94 	bl	8002b90 <HAL_GetTick>
 8005068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	e00a      	b.n	8005082 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506c:	f7fd fd90 	bl	8002b90 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e053      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	4b2d      	ldr	r3, [pc, #180]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 020c 	and.w	r2, r3, #12
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	429a      	cmp	r2, r3
 8005092:	d1eb      	bne.n	800506c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005094:	4b27      	ldr	r3, [pc, #156]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d210      	bcs.n	80050c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	4b24      	ldr	r3, [pc, #144]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f023 020f 	bic.w	r2, r3, #15
 80050aa:	4922      	ldr	r1, [pc, #136]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b2:	4b20      	ldr	r3, [pc, #128]	; (8005134 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d001      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e032      	b.n	800512a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050d0:	4b19      	ldr	r3, [pc, #100]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	4916      	ldr	r1, [pc, #88]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	490e      	ldr	r1, [pc, #56]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005102:	f000 f821 	bl	8005148 <HAL_RCC_GetSysClockFreq>
 8005106:	4602      	mov	r2, r0
 8005108:	4b0b      	ldr	r3, [pc, #44]	; (8005138 <HAL_RCC_ClockConfig+0x1c8>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	091b      	lsrs	r3, r3, #4
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	490a      	ldr	r1, [pc, #40]	; (800513c <HAL_RCC_ClockConfig+0x1cc>)
 8005114:	5ccb      	ldrb	r3, [r1, r3]
 8005116:	fa22 f303 	lsr.w	r3, r2, r3
 800511a:	4a09      	ldr	r2, [pc, #36]	; (8005140 <HAL_RCC_ClockConfig+0x1d0>)
 800511c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <HAL_RCC_ClockConfig+0x1d4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fc fe6a 	bl	8001dfc <HAL_InitTick>

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40023c00 	.word	0x40023c00
 8005138:	40023800 	.word	0x40023800
 800513c:	0800bddc 	.word	0x0800bddc
 8005140:	20000000 	.word	0x20000000
 8005144:	20000004 	.word	0x20000004

08005148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005148:	b5b0      	push	{r4, r5, r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800514e:	2100      	movs	r1, #0
 8005150:	6079      	str	r1, [r7, #4]
 8005152:	2100      	movs	r1, #0
 8005154:	60f9      	str	r1, [r7, #12]
 8005156:	2100      	movs	r1, #0
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800515a:	2100      	movs	r1, #0
 800515c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800515e:	4952      	ldr	r1, [pc, #328]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005160:	6889      	ldr	r1, [r1, #8]
 8005162:	f001 010c 	and.w	r1, r1, #12
 8005166:	2908      	cmp	r1, #8
 8005168:	d00d      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x3e>
 800516a:	2908      	cmp	r1, #8
 800516c:	f200 8094 	bhi.w	8005298 <HAL_RCC_GetSysClockFreq+0x150>
 8005170:	2900      	cmp	r1, #0
 8005172:	d002      	beq.n	800517a <HAL_RCC_GetSysClockFreq+0x32>
 8005174:	2904      	cmp	r1, #4
 8005176:	d003      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x38>
 8005178:	e08e      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800517a:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <HAL_RCC_GetSysClockFreq+0x164>)
 800517c:	60bb      	str	r3, [r7, #8]
      break;
 800517e:	e08e      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005180:	4b4b      	ldr	r3, [pc, #300]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8005182:	60bb      	str	r3, [r7, #8]
      break;
 8005184:	e08b      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005186:	4948      	ldr	r1, [pc, #288]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005188:	6849      	ldr	r1, [r1, #4]
 800518a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800518e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005190:	4945      	ldr	r1, [pc, #276]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005192:	6849      	ldr	r1, [r1, #4]
 8005194:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005198:	2900      	cmp	r1, #0
 800519a:	d024      	beq.n	80051e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519c:	4942      	ldr	r1, [pc, #264]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800519e:	6849      	ldr	r1, [r1, #4]
 80051a0:	0989      	lsrs	r1, r1, #6
 80051a2:	4608      	mov	r0, r1
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80051ac:	f04f 0500 	mov.w	r5, #0
 80051b0:	ea00 0204 	and.w	r2, r0, r4
 80051b4:	ea01 0305 	and.w	r3, r1, r5
 80051b8:	493d      	ldr	r1, [pc, #244]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051ba:	fb01 f003 	mul.w	r0, r1, r3
 80051be:	2100      	movs	r1, #0
 80051c0:	fb01 f102 	mul.w	r1, r1, r2
 80051c4:	1844      	adds	r4, r0, r1
 80051c6:	493a      	ldr	r1, [pc, #232]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80051c8:	fba2 0101 	umull	r0, r1, r2, r1
 80051cc:	1863      	adds	r3, r4, r1
 80051ce:	4619      	mov	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	f7fb f88a 	bl	80002f0 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4613      	mov	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
 80051e4:	e04a      	b.n	800527c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e6:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	099b      	lsrs	r3, r3, #6
 80051ec:	461a      	mov	r2, r3
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	ea02 0400 	and.w	r4, r2, r0
 80051fe:	ea03 0501 	and.w	r5, r3, r1
 8005202:	4620      	mov	r0, r4
 8005204:	4629      	mov	r1, r5
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	f04f 0300 	mov.w	r3, #0
 800520e:	014b      	lsls	r3, r1, #5
 8005210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005214:	0142      	lsls	r2, r0, #5
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	1b00      	subs	r0, r0, r4
 800521c:	eb61 0105 	sbc.w	r1, r1, r5
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	018b      	lsls	r3, r1, #6
 800522a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800522e:	0182      	lsls	r2, r0, #6
 8005230:	1a12      	subs	r2, r2, r0
 8005232:	eb63 0301 	sbc.w	r3, r3, r1
 8005236:	f04f 0000 	mov.w	r0, #0
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	00d9      	lsls	r1, r3, #3
 8005240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005244:	00d0      	lsls	r0, r2, #3
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	1912      	adds	r2, r2, r4
 800524c:	eb45 0303 	adc.w	r3, r5, r3
 8005250:	f04f 0000 	mov.w	r0, #0
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	0299      	lsls	r1, r3, #10
 800525a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800525e:	0290      	lsls	r0, r2, #10
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	461a      	mov	r2, r3
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	f7fb f83e 	bl	80002f0 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4613      	mov	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0c1b      	lsrs	r3, r3, #16
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	3301      	adds	r3, #1
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	fbb2 f3f3 	udiv	r3, r2, r3
 8005294:	60bb      	str	r3, [r7, #8]
      break;
 8005296:	e002      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005298:	4b04      	ldr	r3, [pc, #16]	; (80052ac <HAL_RCC_GetSysClockFreq+0x164>)
 800529a:	60bb      	str	r3, [r7, #8]
      break;
 800529c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529e:	68bb      	ldr	r3, [r7, #8]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bdb0      	pop	{r4, r5, r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	00f42400 	.word	0x00f42400
 80052b0:	017d7840 	.word	0x017d7840

080052b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	20000000 	.word	0x20000000

080052cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052d0:	f7ff fff0 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	0a9b      	lsrs	r3, r3, #10
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4903      	ldr	r1, [pc, #12]	; (80052f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40023800 	.word	0x40023800
 80052f0:	0800bdec 	.word	0x0800bdec

080052f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	220f      	movs	r2, #15
 8005302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005304:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_GetClockConfig+0x5c>)
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 0203 	and.w	r2, r3, #3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <HAL_RCC_GetClockConfig+0x5c>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <HAL_RCC_GetClockConfig+0x5c>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005328:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_RCC_GetClockConfig+0x5c>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <HAL_RCC_GetClockConfig+0x60>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 020f 	and.w	r2, r3, #15
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800
 8005354:	40023c00 	.word	0x40023c00

08005358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b088      	sub	sp, #32
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d012      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005380:	4b69      	ldr	r3, [pc, #420]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a68      	ldr	r2, [pc, #416]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005386:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800538a:	6093      	str	r3, [r2, #8]
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	4964      	ldr	r1, [pc, #400]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053a2:	2301      	movs	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d017      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80053b2:	4b5d      	ldr	r3, [pc, #372]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c0:	4959      	ldr	r1, [pc, #356]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d0:	d101      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053d2:	2301      	movs	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053de:	2301      	movs	r3, #1
 80053e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d017      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053ee:	4b4e      	ldr	r3, [pc, #312]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	494a      	ldr	r1, [pc, #296]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540c:	d101      	bne.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800541a:	2301      	movs	r3, #1
 800541c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800542a:	2301      	movs	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 808b 	beq.w	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800543c:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	4a39      	ldr	r2, [pc, #228]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005446:	6413      	str	r3, [r2, #64]	; 0x40
 8005448:	4b37      	ldr	r3, [pc, #220]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005454:	4b35      	ldr	r3, [pc, #212]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a34      	ldr	r2, [pc, #208]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800545a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800545e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005460:	f7fd fb96 	bl	8002b90 <HAL_GetTick>
 8005464:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005468:	f7fd fb92 	bl	8002b90 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e38f      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800547a:	4b2c      	ldr	r3, [pc, #176]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005486:	4b28      	ldr	r3, [pc, #160]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d035      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d02e      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054ae:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054cc:	4b16      	ldr	r3, [pc, #88]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d114      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d8:	f7fd fb5a 	bl	8002b90 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	e00a      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fd fb56 	bl	8002b90 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e351      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ee      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550e:	d111      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800551e:	400b      	ands	r3, r1
 8005520:	4901      	ldr	r1, [pc, #4]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
 8005526:	e00b      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005528:	40023800 	.word	0x40023800
 800552c:	40007000 	.word	0x40007000
 8005530:	0ffffcff 	.word	0x0ffffcff
 8005534:	4bb3      	ldr	r3, [pc, #716]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	4ab2      	ldr	r2, [pc, #712]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800553a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800553e:	6093      	str	r3, [r2, #8]
 8005540:	4bb0      	ldr	r3, [pc, #704]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554c:	49ad      	ldr	r1, [pc, #692]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800554e:	4313      	orrs	r3, r2
 8005550:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0310 	and.w	r3, r3, #16
 800555a:	2b00      	cmp	r3, #0
 800555c:	d010      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800555e:	4ba9      	ldr	r3, [pc, #676]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005564:	4aa7      	ldr	r2, [pc, #668]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800556a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800556e:	4ba5      	ldr	r3, [pc, #660]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005570:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	49a2      	ldr	r1, [pc, #648]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800558c:	4b9d      	ldr	r3, [pc, #628]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559a:	499a      	ldr	r1, [pc, #616]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055ae:	4b95      	ldr	r3, [pc, #596]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055bc:	4991      	ldr	r1, [pc, #580]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055d0:	4b8c      	ldr	r3, [pc, #560]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055de:	4989      	ldr	r1, [pc, #548]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f2:	4b84      	ldr	r3, [pc, #528]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005600:	4980      	ldr	r1, [pc, #512]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005614:	4b7b      	ldr	r3, [pc, #492]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561a:	f023 0203 	bic.w	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005622:	4978      	ldr	r1, [pc, #480]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005636:	4b73      	ldr	r3, [pc, #460]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	f023 020c 	bic.w	r2, r3, #12
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005644:	496f      	ldr	r1, [pc, #444]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005658:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005666:	4967      	ldr	r1, [pc, #412]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800567a:	4b62      	ldr	r3, [pc, #392]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800567c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005680:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	495e      	ldr	r1, [pc, #376]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800569c:	4b59      	ldr	r3, [pc, #356]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	4956      	ldr	r1, [pc, #344]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056be:	4b51      	ldr	r3, [pc, #324]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056cc:	494d      	ldr	r1, [pc, #308]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056e0:	4b48      	ldr	r3, [pc, #288]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ee:	4945      	ldr	r1, [pc, #276]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005702:	4b40      	ldr	r3, [pc, #256]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005710:	493c      	ldr	r1, [pc, #240]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00a      	beq.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005724:	4b37      	ldr	r3, [pc, #220]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005732:	4934      	ldr	r1, [pc, #208]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d011      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005746:	4b2f      	ldr	r3, [pc, #188]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005754:	492b      	ldr	r1, [pc, #172]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005764:	d101      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005766:	2301      	movs	r3, #1
 8005768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005776:	2301      	movs	r3, #1
 8005778:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005786:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005794:	491b      	ldr	r1, [pc, #108]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80057a8:	4b16      	ldr	r3, [pc, #88]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b8:	4912      	ldr	r1, [pc, #72]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057dc:	4909      	ldr	r1, [pc, #36]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00f      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	e002      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005802:	bf00      	nop
 8005804:	40023800 	.word	0x40023800
 8005808:	4986      	ldr	r1, [pc, #536]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800581c:	4b81      	ldr	r3, [pc, #516]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800581e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005822:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582c:	497d      	ldr	r1, [pc, #500]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d006      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80d6 	beq.w	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005848:	4b76      	ldr	r3, [pc, #472]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a75      	ldr	r2, [pc, #468]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800584e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005854:	f7fd f99c 	bl	8002b90 <HAL_GetTick>
 8005858:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800585a:	e008      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800585c:	f7fd f998 	bl	8002b90 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	2b64      	cmp	r3, #100	; 0x64
 8005868:	d901      	bls.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e195      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800586e:	4b6d      	ldr	r3, [pc, #436]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1f0      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d021      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	2b00      	cmp	r3, #0
 800588c:	d11d      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800588e:	4b65      	ldr	r3, [pc, #404]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800589c:	4b61      	ldr	r3, [pc, #388]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800589e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a2:	0e1b      	lsrs	r3, r3, #24
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	019a      	lsls	r2, r3, #6
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	061b      	lsls	r3, r3, #24
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	071b      	lsls	r3, r3, #28
 80058c2:	4958      	ldr	r1, [pc, #352]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02e      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f4:	d129      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058f6:	4b4b      	ldr	r3, [pc, #300]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005904:	4b47      	ldr	r3, [pc, #284]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590a:	0f1b      	lsrs	r3, r3, #28
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	019a      	lsls	r2, r3, #6
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	061b      	lsls	r3, r3, #24
 8005924:	431a      	orrs	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	071b      	lsls	r3, r3, #28
 800592a:	493e      	ldr	r1, [pc, #248]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005932:	4b3c      	ldr	r3, [pc, #240]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005938:	f023 021f 	bic.w	r2, r3, #31
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	3b01      	subs	r3, #1
 8005942:	4938      	ldr	r1, [pc, #224]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d01d      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005956:	4b33      	ldr	r3, [pc, #204]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595c:	0e1b      	lsrs	r3, r3, #24
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005964:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596a:	0f1b      	lsrs	r3, r3, #28
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	019a      	lsls	r2, r3, #6
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	041b      	lsls	r3, r3, #16
 800597e:	431a      	orrs	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	061b      	lsls	r3, r3, #24
 8005984:	431a      	orrs	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	071b      	lsls	r3, r3, #28
 800598a:	4926      	ldr	r1, [pc, #152]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d011      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	019a      	lsls	r2, r3, #6
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	041b      	lsls	r3, r3, #16
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	071b      	lsls	r3, r3, #28
 80059ba:	491a      	ldr	r1, [pc, #104]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059c2:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a17      	ldr	r2, [pc, #92]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ce:	f7fd f8df 	bl	8002b90 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059d6:	f7fd f8db 	bl	8002b90 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d901      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0d8      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059e8:	4b0e      	ldr	r3, [pc, #56]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	f040 80ce 	bne.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059fc:	4b09      	ldr	r3, [pc, #36]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a08:	f7fd f8c2 	bl	8002b90 <HAL_GetTick>
 8005a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a0e:	e00b      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a10:	f7fd f8be 	bl	8002b90 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b64      	cmp	r3, #100	; 0x64
 8005a1c:	d904      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e0bb      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a22:	bf00      	nop
 8005a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a28:	4b5e      	ldr	r3, [pc, #376]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a34:	d0ec      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02e      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d12a      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a5e:	4b51      	ldr	r3, [pc, #324]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a72:	0f1b      	lsrs	r3, r3, #28
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	061b      	lsls	r3, r3, #24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	071b      	lsls	r3, r3, #28
 8005a92:	4944      	ldr	r1, [pc, #272]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a9a:	4b42      	ldr	r3, [pc, #264]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	493d      	ldr	r1, [pc, #244]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d022      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ac8:	d11d      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aca:	4b36      	ldr	r3, [pc, #216]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	0e1b      	lsrs	r3, r3, #24
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	019a      	lsls	r2, r3, #6
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	4929      	ldr	r1, [pc, #164]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d028      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b20:	4b20      	ldr	r3, [pc, #128]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	0c1b      	lsrs	r3, r3, #16
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	019a      	lsls	r2, r3, #6
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	4917      	ldr	r1, [pc, #92]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	4911      	ldr	r1, [pc, #68]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b64:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0e      	ldr	r2, [pc, #56]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b70:	f7fd f80e 	bl	8002b90 <HAL_GetTick>
 8005b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b78:	f7fd f80a 	bl	8002b90 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e007      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b96:	d1ef      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e025      	b.n	8005c08 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fa fe79 	bl	80008c8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f000 fb3b 	bl	8006264 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	f000 fba5 	bl	8006348 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d101      	bne.n	8005c2c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e018      	b.n	8005c5e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fc03 	bl	8006448 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d104      	bne.n	8005c54 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2205      	movs	r2, #5
 8005c4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005c52:	e003      	b.n	8005c5c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d101      	bne.n	8005c80 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e00e      	b.n	8005c9e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6839      	ldr	r1, [r7, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fbfe 	bl	8006490 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e049      	b.n	8005d4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f841 	bl	8005d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	f000 f9ff 	bl	80060e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d001      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e054      	b.n	8005e2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	; (8005e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d022      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d01d      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d018      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a21      	ldr	r2, [pc, #132]	; (8005e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d013      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00e      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_TIM_Base_Start_IT+0xe0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <HAL_TIM_Base_Start_IT+0xe4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d004      	beq.n	8005de8 <HAL_TIM_Base_Start_IT+0x80>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_TIM_Base_Start_IT+0xe8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d115      	bne.n	8005e14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	4b19      	ldr	r3, [pc, #100]	; (8005e54 <HAL_TIM_Base_Start_IT+0xec>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b06      	cmp	r3, #6
 8005df8:	d015      	beq.n	8005e26 <HAL_TIM_Base_Start_IT+0xbe>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e00:	d011      	beq.n	8005e26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f042 0201 	orr.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	e008      	b.n	8005e26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e000      	b.n	8005e28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40010000 	.word	0x40010000
 8005e3c:	40000400 	.word	0x40000400
 8005e40:	40000800 	.word	0x40000800
 8005e44:	40000c00 	.word	0x40000c00
 8005e48:	40010400 	.word	0x40010400
 8005e4c:	40014000 	.word	0x40014000
 8005e50:	40001800 	.word	0x40001800
 8005e54:	00010007 	.word	0x00010007

08005e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d122      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0202 	mvn.w	r2, #2
 8005e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f905 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8f7 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f908 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d122      	bne.n	8005f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b04      	cmp	r3, #4
 8005ece:	d11b      	bne.n	8005f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0204 	mvn.w	r2, #4
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8db 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8cd 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f8de 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d122      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0308 	and.w	r3, r3, #8
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d11b      	bne.n	8005f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f06f 0208 	mvn.w	r2, #8
 8005f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2204      	movs	r2, #4
 8005f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f8b1 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005f48:	e005      	b.n	8005f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f8a3 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8b4 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d122      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d11b      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f06f 0210 	mvn.w	r2, #16
 8005f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2208      	movs	r2, #8
 8005f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f887 	bl	80060aa <HAL_TIM_IC_CaptureCallback>
 8005f9c:	e005      	b.n	8005faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f879 	bl	8006096 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f88a 	bl	80060be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d10e      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d107      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0201 	mvn.w	r2, #1
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fb fdd6 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	2b80      	cmp	r3, #128	; 0x80
 8005fe8:	d10e      	bne.n	8006008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff4:	2b80      	cmp	r3, #128	; 0x80
 8005ff6:	d107      	bne.n	8006008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f91a 	bl	800623c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006016:	d10e      	bne.n	8006036 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b80      	cmp	r3, #128	; 0x80
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f90d 	bl	8006250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	2b40      	cmp	r3, #64	; 0x40
 8006042:	d10e      	bne.n	8006062 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d107      	bne.n	8006062 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800605a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f838 	bl	80060d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b20      	cmp	r3, #32
 800606e:	d10e      	bne.n	800608e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b20      	cmp	r3, #32
 800607c:	d107      	bne.n	800608e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f06f 0220 	mvn.w	r2, #32
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8cd 	bl	8006228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
	...

080060e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a40      	ldr	r2, [pc, #256]	; (80061fc <TIM_Base_SetConfig+0x114>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d013      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d00f      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a3d      	ldr	r2, [pc, #244]	; (8006200 <TIM_Base_SetConfig+0x118>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00b      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a3c      	ldr	r2, [pc, #240]	; (8006204 <TIM_Base_SetConfig+0x11c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d007      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4a3b      	ldr	r2, [pc, #236]	; (8006208 <TIM_Base_SetConfig+0x120>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d003      	beq.n	8006128 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a3a      	ldr	r2, [pc, #232]	; (800620c <TIM_Base_SetConfig+0x124>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d108      	bne.n	800613a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2f      	ldr	r2, [pc, #188]	; (80061fc <TIM_Base_SetConfig+0x114>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d02b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006148:	d027      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2c      	ldr	r2, [pc, #176]	; (8006200 <TIM_Base_SetConfig+0x118>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d023      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2b      	ldr	r2, [pc, #172]	; (8006204 <TIM_Base_SetConfig+0x11c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01f      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2a      	ldr	r2, [pc, #168]	; (8006208 <TIM_Base_SetConfig+0x120>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d01b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a29      	ldr	r2, [pc, #164]	; (800620c <TIM_Base_SetConfig+0x124>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d017      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a28      	ldr	r2, [pc, #160]	; (8006210 <TIM_Base_SetConfig+0x128>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a27      	ldr	r2, [pc, #156]	; (8006214 <TIM_Base_SetConfig+0x12c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a26      	ldr	r2, [pc, #152]	; (8006218 <TIM_Base_SetConfig+0x130>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a25      	ldr	r2, [pc, #148]	; (800621c <TIM_Base_SetConfig+0x134>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a24      	ldr	r2, [pc, #144]	; (8006220 <TIM_Base_SetConfig+0x138>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a23      	ldr	r2, [pc, #140]	; (8006224 <TIM_Base_SetConfig+0x13c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d108      	bne.n	80061ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a0a      	ldr	r2, [pc, #40]	; (80061fc <TIM_Base_SetConfig+0x114>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_Base_SetConfig+0xf8>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a0c      	ldr	r2, [pc, #48]	; (800620c <TIM_Base_SetConfig+0x124>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d103      	bne.n	80061e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	615a      	str	r2, [r3, #20]
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40010400 	.word	0x40010400
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800
 800621c:	40001800 	.word	0x40001800
 8006220:	40001c00 	.word	0x40001c00
 8006224:	40002000 	.word	0x40002000

08006228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8006272:	2300      	movs	r3, #0
 8006274:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d027      	beq.n	80062ce <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4b2f      	ldr	r3, [pc, #188]	; (8006344 <FMC_SDRAM_Init+0xe0>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006294:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800629a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80062a0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80062a6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80062ac:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80062b2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80062b8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80062be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	e032      	b.n	8006334 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062da:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80062e4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80062ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <FMC_SDRAM_Init+0xe0>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006308:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800630e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8006314:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800631a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8006320:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	ffff8000 	.word	0xffff8000

08006348 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006348:	b480      	push	{r7}
 800634a:	b087      	sub	sp, #28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d02e      	beq.n	80063c0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800636e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	3b01      	subs	r3, #1
 800637c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800637e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	3b01      	subs	r3, #1
 8006386:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8006388:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	3b01      	subs	r3, #1
 8006390:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8006392:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	3b01      	subs	r3, #1
 800639a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800639c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80063a6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063b0:	4313      	orrs	r3, r2
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	609a      	str	r2, [r3, #8]
 80063be:	e039      	b.n	8006434 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <FMC_SDRAM_Timing_Init+0xfc>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	3b01      	subs	r3, #1
 80063dc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80063de:	4313      	orrs	r3, r2
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80063f2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006402:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	3b01      	subs	r3, #1
 800640a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800640c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	3b01      	subs	r3, #1
 8006414:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8006416:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	3b01      	subs	r3, #1
 800641e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8006420:	4313      	orrs	r3, r2
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	4313      	orrs	r3, r2
 8006426:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	ff0f0fff 	.word	0xff0f0fff

08006448 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	4b0c      	ldr	r3, [pc, #48]	; (800648c <FMC_SDRAM_SendCommand+0x44>)
 800645a:	4013      	ands	r3, r2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	6811      	ldr	r1, [r2, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	6852      	ldr	r2, [r2, #4]
 8006464:	4311      	orrs	r1, r2
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	6892      	ldr	r2, [r2, #8]
 800646a:	3a01      	subs	r2, #1
 800646c:	0152      	lsls	r2, r2, #5
 800646e:	4311      	orrs	r1, r2
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	68d2      	ldr	r2, [r2, #12]
 8006474:	0252      	lsls	r2, r2, #9
 8006476:	430a      	orrs	r2, r1
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	ffc00000 	.word	0xffc00000

08006490 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	431a      	orrs	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	370c      	adds	r7, #12
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	4603      	mov	r3, r0
 80064be:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80064c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064c8:	2b84      	cmp	r3, #132	; 0x84
 80064ca:	d005      	beq.n	80064d8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80064cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4413      	add	r3, r2
 80064d4:	3303      	adds	r3, #3
 80064d6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ec:	f3ef 8305 	mrs	r3, IPSR
 80064f0:	607b      	str	r3, [r7, #4]
  return(result);
 80064f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800650e:	f001 fa57 	bl	80079c0 <vTaskStartScheduler>
  
  return osOK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}

08006518 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651a:	b089      	sub	sp, #36	; 0x24
 800651c:	af04      	add	r7, sp, #16
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d020      	beq.n	800656c <osThreadCreate+0x54>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01c      	beq.n	800656c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685c      	ldr	r4, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691e      	ldr	r6, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff ffb6 	bl	80064b6 <makeFreeRtosPriority>
 800654a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006554:	9202      	str	r2, [sp, #8]
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	9100      	str	r1, [sp, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	4632      	mov	r2, r6
 800655e:	4629      	mov	r1, r5
 8006560:	4620      	mov	r0, r4
 8006562:	f000 ffa3 	bl	80074ac <xTaskCreateStatic>
 8006566:	4603      	mov	r3, r0
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	e01c      	b.n	80065a6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685c      	ldr	r4, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006578:	b29e      	uxth	r6, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff ff98 	bl	80064b6 <makeFreeRtosPriority>
 8006586:	4602      	mov	r2, r0
 8006588:	f107 030c 	add.w	r3, r7, #12
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	9200      	str	r2, [sp, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4632      	mov	r2, r6
 8006594:	4629      	mov	r1, r5
 8006596:	4620      	mov	r0, r4
 8006598:	f000 ffeb 	bl	8007572 <xTaskCreate>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d001      	beq.n	80065a6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e000      	b.n	80065a8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80065a6:	68fb      	ldr	r3, [r7, #12]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065b0 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f939 	bl	8007830 <vTaskDelete>
  return osOK;
 80065be:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  taskYIELD();
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <osThreadYield+0x20>)
 80065ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <osDelay+0x16>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	e000      	b.n	8006604 <osDelay+0x18>
 8006602:	2301      	movs	r3, #1
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f9a5 	bl	8007954 <vTaskDelay>
  
  return osOK;
 800660a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4619      	mov	r1, r3
 800662a:	2001      	movs	r0, #1
 800662c:	f000 fac5 	bl	8006bba <xQueueCreateMutexStatic>
 8006630:	4603      	mov	r3, r0
 8006632:	e003      	b.n	800663c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006634:	2001      	movs	r0, #1
 8006636:	f000 faa8 	bl	8006b8a <xQueueCreateMutex>
 800663a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <osMutexWait+0x18>
    return osErrorParameter;
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	e03a      	b.n	80066d2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d103      	bne.n	8006670 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006668:	f04f 33ff 	mov.w	r3, #4294967295
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e009      	b.n	8006684 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d006      	beq.n	8006684 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <osMutexWait+0x40>
      ticks = 1;
 8006680:	2301      	movs	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006684:	f7ff ff2f 	bl	80064e6 <inHandlerMode>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800668e:	f107 0308 	add.w	r3, r7, #8
 8006692:	461a      	mov	r2, r3
 8006694:	2100      	movs	r1, #0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fd5a 	bl	8007150 <xQueueReceiveFromISR>
 800669c:	4603      	mov	r3, r0
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d001      	beq.n	80066a6 <osMutexWait+0x62>
      return osErrorOS;
 80066a2:	23ff      	movs	r3, #255	; 0xff
 80066a4:	e015      	b.n	80066d2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d011      	beq.n	80066d0 <osMutexWait+0x8c>
 80066ac:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <osMutexWait+0x98>)
 80066ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	e008      	b.n	80066d0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80066be:	68f9      	ldr	r1, [r7, #12]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc31 	bl	8006f28 <xQueueSemaphoreTake>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d001      	beq.n	80066d0 <osMutexWait+0x8c>
    return osErrorOS;
 80066cc:	23ff      	movs	r3, #255	; 0xff
 80066ce:	e000      	b.n	80066d2 <osMutexWait+0x8e>
  }
  
  return osOK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80066f0:	f7ff fef9 	bl	80064e6 <inHandlerMode>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d016      	beq.n	8006728 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80066fa:	f107 0308 	add.w	r3, r7, #8
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fb7b 	bl	8006dfc <xQueueGiveFromISR>
 8006706:	4603      	mov	r3, r0
 8006708:	2b01      	cmp	r3, #1
 800670a:	d001      	beq.n	8006710 <osMutexRelease+0x30>
      return osErrorOS;
 800670c:	23ff      	movs	r3, #255	; 0xff
 800670e:	e017      	b.n	8006740 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d013      	beq.n	800673e <osMutexRelease+0x5e>
 8006716:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <osMutexRelease+0x68>)
 8006718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	e00a      	b.n	800673e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006728:	2300      	movs	r3, #0
 800672a:	2200      	movs	r2, #0
 800672c:	2100      	movs	r1, #0
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa5e 	bl	8006bf0 <xQueueGenericSend>
 8006734:	4603      	mov	r3, r0
 8006736:	2b01      	cmp	r3, #1
 8006738:	d001      	beq.n	800673e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800673a:	23ff      	movs	r3, #255	; 0xff
 800673c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800673e:	68fb      	ldr	r3, [r7, #12]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f103 0208 	add.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f04f 32ff 	mov.w	r2, #4294967295
 8006764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f103 0208 	add.w	r2, r3, #8
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f103 0208 	add.w	r2, r3, #8
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689a      	ldr	r2, [r3, #8]
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
}
 80067e2:	bf00      	nop
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006804:	d103      	bne.n	800680e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e00c      	b.n	8006828 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3308      	adds	r3, #8
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e002      	b.n	800681c <vListInsert+0x2e>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d2f6      	bcs.n	8006816 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6892      	ldr	r2, [r2, #8]
 8006876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	d103      	bne.n	8006894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	1e5a      	subs	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10c      	bne.n	80068e2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	b672      	cpsid	i
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	b662      	cpsie	i
 80068dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80068e2:	f001 fffb 	bl	80088dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	3b01      	subs	r3, #1
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	22ff      	movs	r2, #255	; 0xff
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	22ff      	movs	r2, #255	; 0xff
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d114      	bne.n	8006962 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01a      	beq.n	8006976 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3310      	adds	r3, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f001 fab7 	bl	8007eb8 <xTaskRemoveFromEventList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d012      	beq.n	8006976 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <xQueueGenericReset+0xd0>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	e009      	b.n	8006976 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3310      	adds	r3, #16
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fef0 	bl	800674c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff feeb 	bl	800674c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006976:	f001 ffe5 	bl	8008944 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	; 0x38
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10c      	bne.n	80069b6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	b672      	cpsid	i
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	b662      	cpsie	i
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10c      	bne.n	80069d6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	b672      	cpsid	i
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	b662      	cpsie	i
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <xQueueGenericCreateStatic+0x5a>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <xQueueGenericCreateStatic+0x5e>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <xQueueGenericCreateStatic+0x60>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10c      	bne.n	8006a06 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	b672      	cpsid	i
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	b662      	cpsie	i
 8006a00:	623b      	str	r3, [r7, #32]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <xQueueGenericCreateStatic+0x8a>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <xQueueGenericCreateStatic+0x8e>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <xQueueGenericCreateStatic+0x90>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10c      	bne.n	8006a36 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	b672      	cpsid	i
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	b662      	cpsie	i
 8006a30:	61fb      	str	r3, [r7, #28]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a36:	2350      	movs	r3, #80	; 0x50
 8006a38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b50      	cmp	r3, #80	; 0x50
 8006a3e:	d00c      	beq.n	8006a5a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	61bb      	str	r3, [r7, #24]
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00d      	beq.n	8006a82 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	4613      	mov	r3, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f847 	bl	8006b10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3730      	adds	r7, #48	; 0x30
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af02      	add	r7, sp, #8
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10c      	bne.n	8006aba <xQueueGenericCreate+0x2e>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	b672      	cpsid	i
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	b662      	cpsie	i
 8006ab4:	613b      	str	r3, [r7, #16]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	e004      	b.n	8006ad0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	fb02 f303 	mul.w	r3, r2, r3
 8006ace:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	3350      	adds	r3, #80	; 0x50
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 f82d 	bl	8008b34 <pvPortMalloc>
 8006ada:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d011      	beq.n	8006b06 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	3350      	adds	r3, #80	; 0x50
 8006aea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006af4:	79fa      	ldrb	r2, [r7, #7]
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f805 	bl	8006b10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b06:	69bb      	ldr	r3, [r7, #24]
	}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d103      	bne.n	8006b2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	e002      	b.n	8006b32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b3e:	2101      	movs	r1, #1
 8006b40:	69b8      	ldr	r0, [r7, #24]
 8006b42:	f7ff feb7 	bl	80068b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006b76:	2300      	movs	r3, #0
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f837 	bl	8006bf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b086      	sub	sp, #24
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	4603      	mov	r3, r0
 8006b92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006b94:	2301      	movs	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	6939      	ldr	r1, [r7, #16]
 8006ba2:	6978      	ldr	r0, [r7, #20]
 8006ba4:	f7ff ff72 	bl	8006a8c <xQueueGenericCreate>
 8006ba8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff ffd3 	bl	8006b56 <prvInitialiseMutex>

		return xNewQueue;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
	}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b088      	sub	sp, #32
 8006bbe:	af02      	add	r7, sp, #8
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	6039      	str	r1, [r7, #0]
 8006bc4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	6939      	ldr	r1, [r7, #16]
 8006bd8:	6978      	ldr	r0, [r7, #20]
 8006bda:	f7ff fed5 	bl	8006988 <xQueueGenericCreateStatic>
 8006bde:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff ffb8 	bl	8006b56 <prvInitialiseMutex>

		return xNewQueue;
 8006be6:	68fb      	ldr	r3, [r7, #12]
	}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	; 0x38
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10c      	bne.n	8006c26 <xQueueGenericSend+0x36>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	b672      	cpsid	i
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	b662      	cpsie	i
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d103      	bne.n	8006c34 <xQueueGenericSend+0x44>
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <xQueueGenericSend+0x48>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <xQueueGenericSend+0x4a>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10c      	bne.n	8006c58 <xQueueGenericSend+0x68>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	b672      	cpsid	i
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	b662      	cpsie	i
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSend+0x76>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericSend+0x7a>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericSend+0x7c>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10c      	bne.n	8006c8a <xQueueGenericSend+0x9a>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	b672      	cpsid	i
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	b662      	cpsie	i
 8006c84:	623b      	str	r3, [r7, #32]
}
 8006c86:	bf00      	nop
 8006c88:	e7fe      	b.n	8006c88 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c8a:	f001 fadd 	bl	8008248 <xTaskGetSchedulerState>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d102      	bne.n	8006c9a <xQueueGenericSend+0xaa>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <xQueueGenericSend+0xae>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <xQueueGenericSend+0xb0>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <xQueueGenericSend+0xce>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	b672      	cpsid	i
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	b662      	cpsie	i
 8006cb8:	61fb      	str	r3, [r7, #28]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cbe:	f001 fe0d 	bl	80088dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d302      	bcc.n	8006cd4 <xQueueGenericSend+0xe4>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d129      	bne.n	8006d28 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cda:	f000 fad7 	bl	800728c <prvCopyDataToQueue>
 8006cde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d010      	beq.n	8006d0a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	3324      	adds	r3, #36	; 0x24
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f8e3 	bl	8007eb8 <xTaskRemoveFromEventList>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d013      	beq.n	8006d20 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006cf8:	4b3f      	ldr	r3, [pc, #252]	; (8006df8 <xQueueGenericSend+0x208>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	e00a      	b.n	8006d20 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d10:	4b39      	ldr	r3, [pc, #228]	; (8006df8 <xQueueGenericSend+0x208>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d20:	f001 fe10 	bl	8008944 <vPortExitCritical>
				return pdPASS;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e063      	b.n	8006df0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d103      	bne.n	8006d36 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d2e:	f001 fe09 	bl	8008944 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e05c      	b.n	8006df0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d106      	bne.n	8006d4a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d3c:	f107 0314 	add.w	r3, r7, #20
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 f91d 	bl	8007f80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d46:	2301      	movs	r3, #1
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d4a:	f001 fdfb 	bl	8008944 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d4e:	f000 fea7 	bl	8007aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d52:	f001 fdc3 	bl	80088dc <vPortEnterCritical>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d62:	d103      	bne.n	8006d6c <xQueueGenericSend+0x17c>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d103      	bne.n	8006d82 <xQueueGenericSend+0x192>
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d82:	f001 fddf 	bl	8008944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d86:	1d3a      	adds	r2, r7, #4
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 f90c 	bl	8007fac <xTaskCheckForTimeOut>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d124      	bne.n	8006de4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d9c:	f000 fb6e 	bl	800747c <prvIsQueueFull>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	3310      	adds	r3, #16
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	4611      	mov	r1, r2
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 f85c 	bl	8007e6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006db6:	f000 faf9 	bl	80073ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006dba:	f000 fe7f 	bl	8007abc <xTaskResumeAll>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f47f af7c 	bne.w	8006cbe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <xQueueGenericSend+0x208>)
 8006dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	e772      	b.n	8006cbe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dda:	f000 fae7 	bl	80073ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006dde:	f000 fe6d 	bl	8007abc <xTaskResumeAll>
 8006de2:	e76c      	b.n	8006cbe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de6:	f000 fae1 	bl	80073ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006dea:	f000 fe67 	bl	8007abc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3738      	adds	r7, #56	; 0x38
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	e000ed04 	.word	0xe000ed04

08006dfc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08e      	sub	sp, #56	; 0x38
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10c      	bne.n	8006e2a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	b672      	cpsid	i
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	b662      	cpsie	i
 8006e24:	623b      	str	r3, [r7, #32]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <xQueueGiveFromISR+0x50>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	b672      	cpsid	i
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	b662      	cpsie	i
 8006e46:	61fb      	str	r3, [r7, #28]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <xQueueGiveFromISR+0x60>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <xQueueGiveFromISR+0x64>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <xQueueGiveFromISR+0x66>
 8006e60:	2300      	movs	r3, #0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10c      	bne.n	8006e80 <xQueueGiveFromISR+0x84>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	b672      	cpsid	i
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	b662      	cpsie	i
 8006e7a:	61bb      	str	r3, [r7, #24]
}
 8006e7c:	bf00      	nop
 8006e7e:	e7fe      	b.n	8006e7e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e80:	f001 fe14 	bl	8008aac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e84:	f3ef 8211 	mrs	r2, BASEPRI
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	b672      	cpsid	i
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	b662      	cpsie	i
 8006e9c:	617a      	str	r2, [r7, #20]
 8006e9e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ea0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d22b      	bcs.n	8006f0c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ec6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d112      	bne.n	8006ef6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d016      	beq.n	8006f06 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	3324      	adds	r3, #36	; 0x24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 ffeb 	bl	8007eb8 <xTaskRemoveFromEventList>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00e      	beq.n	8006f06 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00b      	beq.n	8006f06 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	e007      	b.n	8006f06 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006efa:	3301      	adds	r3, #1
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	b25a      	sxtb	r2, r3
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f06:	2301      	movs	r3, #1
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	e001      	b.n	8006f10 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3738      	adds	r7, #56	; 0x38
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
	...

08006f28 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08e      	sub	sp, #56	; 0x38
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10c      	bne.n	8006f5e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	b672      	cpsid	i
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	b662      	cpsie	i
 8006f58:	623b      	str	r3, [r7, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	b672      	cpsid	i
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	b662      	cpsie	i
 8006f7a:	61fb      	str	r3, [r7, #28]
}
 8006f7c:	bf00      	nop
 8006f7e:	e7fe      	b.n	8006f7e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f80:	f001 f962 	bl	8008248 <xTaskGetSchedulerState>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d102      	bne.n	8006f90 <xQueueSemaphoreTake+0x68>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <xQueueSemaphoreTake+0x6c>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <xQueueSemaphoreTake+0x6e>
 8006f94:	2300      	movs	r3, #0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10c      	bne.n	8006fb4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	b672      	cpsid	i
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	b662      	cpsie	i
 8006fae:	61bb      	str	r3, [r7, #24]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fb4:	f001 fc92 	bl	80088dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d024      	beq.n	800700e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	1e5a      	subs	r2, r3, #1
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006fd4:	f001 fafe 	bl	80085d4 <pvTaskIncrementMutexHeldCount>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	3310      	adds	r3, #16
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 ff64 	bl	8007eb8 <xTaskRemoveFromEventList>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ff6:	4b55      	ldr	r3, [pc, #340]	; (800714c <xQueueSemaphoreTake+0x224>)
 8006ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	f3bf 8f4f 	dsb	sy
 8007002:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007006:	f001 fc9d 	bl	8008944 <vPortExitCritical>
				return pdPASS;
 800700a:	2301      	movs	r3, #1
 800700c:	e099      	b.n	8007142 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d113      	bne.n	800703c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00c      	beq.n	8007034 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	b672      	cpsid	i
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	b662      	cpsie	i
 800702e:	617b      	str	r3, [r7, #20]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007034:	f001 fc86 	bl	8008944 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007038:	2300      	movs	r3, #0
 800703a:	e082      	b.n	8007142 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007042:	f107 030c 	add.w	r3, r7, #12
 8007046:	4618      	mov	r0, r3
 8007048:	f000 ff9a 	bl	8007f80 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007050:	f001 fc78 	bl	8008944 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007054:	f000 fd24 	bl	8007aa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007058:	f001 fc40 	bl	80088dc <vPortEnterCritical>
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007062:	b25b      	sxtb	r3, r3
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d103      	bne.n	8007072 <xQueueSemaphoreTake+0x14a>
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007078:	b25b      	sxtb	r3, r3
 800707a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707e:	d103      	bne.n	8007088 <xQueueSemaphoreTake+0x160>
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	2200      	movs	r2, #0
 8007084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007088:	f001 fc5c 	bl	8008944 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800708c:	463a      	mov	r2, r7
 800708e:	f107 030c 	add.w	r3, r7, #12
 8007092:	4611      	mov	r1, r2
 8007094:	4618      	mov	r0, r3
 8007096:	f000 ff89 	bl	8007fac <xTaskCheckForTimeOut>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d132      	bne.n	8007106 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a2:	f000 f9d5 	bl	8007450 <prvIsQueueEmpty>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d026      	beq.n	80070fa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d109      	bne.n	80070c8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80070b4:	f001 fc12 	bl	80088dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 f8e1 	bl	8008284 <xTaskPriorityInherit>
 80070c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80070c4:	f001 fc3e 	bl	8008944 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	3324      	adds	r3, #36	; 0x24
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	4611      	mov	r1, r2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fecb 	bl	8007e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070d8:	f000 f968 	bl	80073ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070dc:	f000 fcee 	bl	8007abc <xTaskResumeAll>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f47f af66 	bne.w	8006fb4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80070e8:	4b18      	ldr	r3, [pc, #96]	; (800714c <xQueueSemaphoreTake+0x224>)
 80070ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	e75c      	b.n	8006fb4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070fc:	f000 f956 	bl	80073ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007100:	f000 fcdc 	bl	8007abc <xTaskResumeAll>
 8007104:	e756      	b.n	8006fb4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007106:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007108:	f000 f950 	bl	80073ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800710c:	f000 fcd6 	bl	8007abc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007112:	f000 f99d 	bl	8007450 <prvIsQueueEmpty>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	f43f af4b 	beq.w	8006fb4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007124:	f001 fbda 	bl	80088dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800712a:	f000 f897 	bl	800725c <prvGetDisinheritPriorityAfterTimeout>
 800712e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007136:	4618      	mov	r0, r3
 8007138:	f001 f9ae 	bl	8008498 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800713c:	f001 fc02 	bl	8008944 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007140:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007142:	4618      	mov	r0, r3
 8007144:	3738      	adds	r7, #56	; 0x38
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	e000ed04 	.word	0xe000ed04

08007150 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08e      	sub	sp, #56	; 0x38
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10c      	bne.n	8007180 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716a:	b672      	cpsid	i
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	b662      	cpsie	i
 800717a:	623b      	str	r3, [r7, #32]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <xQueueReceiveFromISR+0x3e>
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <xQueueReceiveFromISR+0x42>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <xQueueReceiveFromISR+0x44>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10c      	bne.n	80071b2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	b672      	cpsid	i
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	b662      	cpsie	i
 80071ac:	61fb      	str	r3, [r7, #28]
}
 80071ae:	bf00      	nop
 80071b0:	e7fe      	b.n	80071b0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071b2:	f001 fc7b 	bl	8008aac <vPortValidateInterruptPriority>
	__asm volatile
 80071b6:	f3ef 8211 	mrs	r2, BASEPRI
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	b672      	cpsid	i
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	b662      	cpsie	i
 80071ce:	61ba      	str	r2, [r7, #24]
 80071d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80071d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02f      	beq.n	8007242 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f0:	f000 f8b6 	bl	8007360 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007204:	d112      	bne.n	800722c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d016      	beq.n	800723c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	3310      	adds	r3, #16
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fe50 	bl	8007eb8 <xTaskRemoveFromEventList>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00e      	beq.n	800723c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00b      	beq.n	800723c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e007      	b.n	800723c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800722c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007230:	3301      	adds	r3, #1
 8007232:	b2db      	uxtb	r3, r3
 8007234:	b25a      	sxtb	r2, r3
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800723c:	2301      	movs	r3, #1
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
 8007240:	e001      	b.n	8007246 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	613b      	str	r3, [r7, #16]
	__asm volatile
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f383 8811 	msr	BASEPRI, r3
}
 8007250:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007254:	4618      	mov	r0, r3
 8007256:	3738      	adds	r7, #56	; 0x38
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1c3 0307 	rsb	r3, r3, #7
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e001      	b.n	800727e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800727e:	68fb      	ldr	r3, [r7, #12]
	}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10d      	bne.n	80072c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d14d      	bne.n	800734e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 f864 	bl	8008384 <xTaskPriorityDisinherit>
 80072bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	e043      	b.n	800734e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d119      	bne.n	8007300 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6858      	ldr	r0, [r3, #4]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	461a      	mov	r2, r3
 80072d6:	68b9      	ldr	r1, [r7, #8]
 80072d8:	f001 ff52 	bl	8009180 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e4:	441a      	add	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d32b      	bcc.n	800734e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	e026      	b.n	800734e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68d8      	ldr	r0, [r3, #12]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	461a      	mov	r2, r3
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	f001 ff38 	bl	8009180 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	425b      	negs	r3, r3
 800731a:	441a      	add	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68da      	ldr	r2, [r3, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d207      	bcs.n	800733c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	425b      	negs	r3, r3
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b02      	cmp	r3, #2
 8007340:	d105      	bne.n	800734e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	3b01      	subs	r3, #1
 800734c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007356:	697b      	ldr	r3, [r7, #20]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	d018      	beq.n	80073a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	441a      	add	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	d303      	bcc.n	8007394 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68d9      	ldr	r1, [r3, #12]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	461a      	mov	r2, r3
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f001 feee 	bl	8009180 <memcpy>
	}
}
 80073a4:	bf00      	nop
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073b4:	f001 fa92 	bl	80088dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073c0:	e011      	b.n	80073e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d012      	beq.n	80073f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	3324      	adds	r3, #36	; 0x24
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fd72 	bl	8007eb8 <xTaskRemoveFromEventList>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073da:	f000 fe4d 	bl	8008078 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dce9      	bgt.n	80073c2 <prvUnlockQueue+0x16>
 80073ee:	e000      	b.n	80073f2 <prvUnlockQueue+0x46>
					break;
 80073f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	22ff      	movs	r2, #255	; 0xff
 80073f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073fa:	f001 faa3 	bl	8008944 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073fe:	f001 fa6d 	bl	80088dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007408:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800740a:	e011      	b.n	8007430 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d012      	beq.n	800743a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3310      	adds	r3, #16
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fd4d 	bl	8007eb8 <xTaskRemoveFromEventList>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007424:	f000 fe28 	bl	8008078 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	3b01      	subs	r3, #1
 800742c:	b2db      	uxtb	r3, r3
 800742e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007434:	2b00      	cmp	r3, #0
 8007436:	dce9      	bgt.n	800740c <prvUnlockQueue+0x60>
 8007438:	e000      	b.n	800743c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800743a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	22ff      	movs	r2, #255	; 0xff
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007444:	f001 fa7e 	bl	8008944 <vPortExitCritical>
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007458:	f001 fa40 	bl	80088dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	2b00      	cmp	r3, #0
 8007462:	d102      	bne.n	800746a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]
 8007468:	e001      	b.n	800746e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800746e:	f001 fa69 	bl	8008944 <vPortExitCritical>

	return xReturn;
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007484:	f001 fa2a 	bl	80088dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007490:	429a      	cmp	r2, r3
 8007492:	d102      	bne.n	800749a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007494:	2301      	movs	r3, #1
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e001      	b.n	800749e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800749e:	f001 fa51 	bl	8008944 <vPortExitCritical>

	return xReturn;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08e      	sub	sp, #56	; 0x38
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10c      	bne.n	80074da <xTaskCreateStatic+0x2e>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	623b      	str	r3, [r7, #32]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10c      	bne.n	80074fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	b672      	cpsid	i
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	b662      	cpsie	i
 80074f4:	61fb      	str	r3, [r7, #28]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074fa:	23c0      	movs	r3, #192	; 0xc0
 80074fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2bc0      	cmp	r3, #192	; 0xc0
 8007502:	d00c      	beq.n	800751e <xTaskCreateStatic+0x72>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	b672      	cpsid	i
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	b662      	cpsie	i
 8007518:	61bb      	str	r3, [r7, #24]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800751e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01e      	beq.n	8007564 <xTaskCreateStatic+0xb8>
 8007526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01b      	beq.n	8007564 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007534:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	2202      	movs	r2, #2
 800753a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800753e:	2300      	movs	r3, #0
 8007540:	9303      	str	r3, [sp, #12]
 8007542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007544:	9302      	str	r3, [sp, #8]
 8007546:	f107 0314 	add.w	r3, r7, #20
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f850 	bl	80075fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800755c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800755e:	f000 f8f9 	bl	8007754 <prvAddNewTaskToReadyList>
 8007562:	e001      	b.n	8007568 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007568:	697b      	ldr	r3, [r7, #20]
	}
 800756a:	4618      	mov	r0, r3
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007572:	b580      	push	{r7, lr}
 8007574:	b08c      	sub	sp, #48	; 0x30
 8007576:	af04      	add	r7, sp, #16
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4618      	mov	r0, r3
 8007588:	f001 fad4 	bl	8008b34 <pvPortMalloc>
 800758c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00e      	beq.n	80075b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007594:	20c0      	movs	r0, #192	; 0xc0
 8007596:	f001 facd 	bl	8008b34 <pvPortMalloc>
 800759a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	631a      	str	r2, [r3, #48]	; 0x30
 80075a8:	e005      	b.n	80075b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80075aa:	6978      	ldr	r0, [r7, #20]
 80075ac:	f001 fb8c 	bl	8008cc8 <vPortFree>
 80075b0:	e001      	b.n	80075b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075c4:	88fa      	ldrh	r2, [r7, #6]
 80075c6:	2300      	movs	r3, #0
 80075c8:	9303      	str	r3, [sp, #12]
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	9301      	str	r3, [sp, #4]
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f80e 	bl	80075fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075e0:	69f8      	ldr	r0, [r7, #28]
 80075e2:	f000 f8b7 	bl	8007754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075e6:	2301      	movs	r3, #1
 80075e8:	61bb      	str	r3, [r7, #24]
 80075ea:	e002      	b.n	80075f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295
 80075f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075f2:	69bb      	ldr	r3, [r7, #24]
	}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3720      	adds	r7, #32
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	461a      	mov	r2, r3
 8007614:	21a5      	movs	r1, #165	; 0xa5
 8007616:	f001 fdc1 	bl	800919c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007624:	440b      	add	r3, r1
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00c      	beq.n	8007658 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	617b      	str	r3, [r7, #20]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d01f      	beq.n	800769e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	e012      	b.n	800768a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	7819      	ldrb	r1, [r3, #0]
 800766c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	4413      	add	r3, r2
 8007672:	3334      	adds	r3, #52	; 0x34
 8007674:	460a      	mov	r2, r1
 8007676:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	2b0f      	cmp	r3, #15
 800768e:	d9e9      	bls.n	8007664 <prvInitialiseNewTask+0x68>
 8007690:	e000      	b.n	8007694 <prvInitialiseNewTask+0x98>
			{
				break;
 8007692:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	2200      	movs	r2, #0
 8007698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800769c:	e003      	b.n	80076a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d901      	bls.n	80076b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80076ac:	2306      	movs	r3, #6
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	2200      	movs	r2, #0
 80076c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff f860 	bl	800678c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ce:	3318      	adds	r3, #24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff f85b 	bl	800678c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076de:	f1c3 0207 	rsb	r2, r3, #7
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	2200      	movs	r2, #0
 80076f0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	3358      	adds	r3, #88	; 0x58
 8007706:	2260      	movs	r2, #96	; 0x60
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f001 fd46 	bl	800919c <memset>
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	4a0d      	ldr	r2, [pc, #52]	; (8007748 <prvInitialiseNewTask+0x14c>)
 8007714:	65da      	str	r2, [r3, #92]	; 0x5c
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	4a0c      	ldr	r2, [pc, #48]	; (800774c <prvInitialiseNewTask+0x150>)
 800771a:	661a      	str	r2, [r3, #96]	; 0x60
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <prvInitialiseNewTask+0x154>)
 8007720:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	68f9      	ldr	r1, [r7, #12]
 8007726:	69b8      	ldr	r0, [r7, #24]
 8007728:	f000 ffce 	bl	80086c8 <pxPortInitialiseStack>
 800772c:	4602      	mov	r2, r0
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <prvInitialiseNewTask+0x142>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800773c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800773e:	bf00      	nop
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	0800be14 	.word	0x0800be14
 800774c:	0800be34 	.word	0x0800be34
 8007750:	0800bdf4 	.word	0x0800bdf4

08007754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800775c:	f001 f8be 	bl	80088dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007760:	4b2c      	ldr	r3, [pc, #176]	; (8007814 <prvAddNewTaskToReadyList+0xc0>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	4a2b      	ldr	r2, [pc, #172]	; (8007814 <prvAddNewTaskToReadyList+0xc0>)
 8007768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800776a:	4b2b      	ldr	r3, [pc, #172]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007772:	4a29      	ldr	r2, [pc, #164]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007778:	4b26      	ldr	r3, [pc, #152]	; (8007814 <prvAddNewTaskToReadyList+0xc0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d110      	bne.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007780:	f000 fc9e 	bl	80080c0 <prvInitialiseTaskLists>
 8007784:	e00d      	b.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007786:	4b25      	ldr	r3, [pc, #148]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d109      	bne.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800778e:	4b22      	ldr	r3, [pc, #136]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	429a      	cmp	r2, r3
 800779a:	d802      	bhi.n	80077a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800779c:	4a1e      	ldr	r2, [pc, #120]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077a2:	4b1f      	ldr	r3, [pc, #124]	; (8007820 <prvAddNewTaskToReadyList+0xcc>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3301      	adds	r3, #1
 80077a8:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <prvAddNewTaskToReadyList+0xcc>)
 80077aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80077ac:	4b1c      	ldr	r3, [pc, #112]	; (8007820 <prvAddNewTaskToReadyList+0xcc>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b8:	2201      	movs	r2, #1
 80077ba:	409a      	lsls	r2, r3
 80077bc:	4b19      	ldr	r3, [pc, #100]	; (8007824 <prvAddNewTaskToReadyList+0xd0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	4a18      	ldr	r2, [pc, #96]	; (8007824 <prvAddNewTaskToReadyList+0xd0>)
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4a15      	ldr	r2, [pc, #84]	; (8007828 <prvAddNewTaskToReadyList+0xd4>)
 80077d4:	441a      	add	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3304      	adds	r3, #4
 80077da:	4619      	mov	r1, r3
 80077dc:	4610      	mov	r0, r2
 80077de:	f7fe ffe2 	bl	80067a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077e2:	f001 f8af 	bl	8008944 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077e6:	4b0d      	ldr	r3, [pc, #52]	; (800781c <prvAddNewTaskToReadyList+0xc8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00e      	beq.n	800780c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ee:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <prvAddNewTaskToReadyList+0xc4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d207      	bcs.n	800780c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <prvAddNewTaskToReadyList+0xd8>)
 80077fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	200005d4 	.word	0x200005d4
 8007818:	200004d4 	.word	0x200004d4
 800781c:	200005e0 	.word	0x200005e0
 8007820:	200005f0 	.word	0x200005f0
 8007824:	200005dc 	.word	0x200005dc
 8007828:	200004d8 	.word	0x200004d8
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007838:	f001 f850 	bl	80088dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d102      	bne.n	8007848 <vTaskDelete+0x18>
 8007842:	4b3a      	ldr	r3, [pc, #232]	; (800792c <vTaskDelete+0xfc>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	e000      	b.n	800784a <vTaskDelete+0x1a>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff f805 	bl	8006860 <uxListRemove>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d115      	bne.n	8007888 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007860:	4933      	ldr	r1, [pc, #204]	; (8007930 <vTaskDelete+0x100>)
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	440b      	add	r3, r1
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <vTaskDelete+0x58>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	2201      	movs	r2, #1
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	43da      	mvns	r2, r3
 800787e:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <vTaskDelete+0x104>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4013      	ands	r3, r2
 8007884:	4a2b      	ldr	r2, [pc, #172]	; (8007934 <vTaskDelete+0x104>)
 8007886:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3318      	adds	r3, #24
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe ffe3 	bl	8006860 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800789a:	4b27      	ldr	r3, [pc, #156]	; (8007938 <vTaskDelete+0x108>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3301      	adds	r3, #1
 80078a0:	4a25      	ldr	r2, [pc, #148]	; (8007938 <vTaskDelete+0x108>)
 80078a2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80078a4:	4b21      	ldr	r3, [pc, #132]	; (800792c <vTaskDelete+0xfc>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d10b      	bne.n	80078c6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4821      	ldr	r0, [pc, #132]	; (800793c <vTaskDelete+0x10c>)
 80078b6:	f7fe ff76 	bl	80067a6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80078ba:	4b21      	ldr	r3, [pc, #132]	; (8007940 <vTaskDelete+0x110>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <vTaskDelete+0x110>)
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	e009      	b.n	80078da <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80078c6:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <vTaskDelete+0x114>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	3b01      	subs	r3, #1
 80078cc:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <vTaskDelete+0x114>)
 80078ce:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fc63 	bl	800819c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80078d6:	f000 fc97 	bl	8008208 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80078da:	f001 f833 	bl	8008944 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80078de:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <vTaskDelete+0x118>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01d      	beq.n	8007922 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 80078e6:	4b11      	ldr	r3, [pc, #68]	; (800792c <vTaskDelete+0xfc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d118      	bne.n	8007922 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80078f0:	4b16      	ldr	r3, [pc, #88]	; (800794c <vTaskDelete+0x11c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00c      	beq.n	8007912 <vTaskDelete+0xe2>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	60bb      	str	r3, [r7, #8]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <vTaskDelete+0x120>)
 8007914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007918:	601a      	str	r2, [r3, #0]
 800791a:	f3bf 8f4f 	dsb	sy
 800791e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	200004d4 	.word	0x200004d4
 8007930:	200004d8 	.word	0x200004d8
 8007934:	200005dc 	.word	0x200005dc
 8007938:	200005f0 	.word	0x200005f0
 800793c:	200005a8 	.word	0x200005a8
 8007940:	200005bc 	.word	0x200005bc
 8007944:	200005d4 	.word	0x200005d4
 8007948:	200005e0 	.word	0x200005e0
 800794c:	200005fc 	.word	0x200005fc
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d019      	beq.n	800799a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007966:	4b14      	ldr	r3, [pc, #80]	; (80079b8 <vTaskDelay+0x64>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <vTaskDelay+0x34>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	b672      	cpsid	i
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	b662      	cpsie	i
 8007982:	60bb      	str	r3, [r7, #8]
}
 8007984:	bf00      	nop
 8007986:	e7fe      	b.n	8007986 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007988:	f000 f88a 	bl	8007aa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800798c:	2100      	movs	r1, #0
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fe34 	bl	80085fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007994:	f000 f892 	bl	8007abc <xTaskResumeAll>
 8007998:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d107      	bne.n	80079b0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <vTaskDelay+0x68>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	200005fc 	.word	0x200005fc
 80079bc:	e000ed04 	.word	0xe000ed04

080079c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08a      	sub	sp, #40	; 0x28
 80079c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079ce:	463a      	mov	r2, r7
 80079d0:	1d39      	adds	r1, r7, #4
 80079d2:	f107 0308 	add.w	r3, r7, #8
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f8 ff8e 	bl	80008f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	9202      	str	r2, [sp, #8]
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	2300      	movs	r3, #0
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	2300      	movs	r3, #0
 80079ec:	460a      	mov	r2, r1
 80079ee:	4924      	ldr	r1, [pc, #144]	; (8007a80 <vTaskStartScheduler+0xc0>)
 80079f0:	4824      	ldr	r0, [pc, #144]	; (8007a84 <vTaskStartScheduler+0xc4>)
 80079f2:	f7ff fd5b 	bl	80074ac <xTaskCreateStatic>
 80079f6:	4603      	mov	r3, r0
 80079f8:	4a23      	ldr	r2, [pc, #140]	; (8007a88 <vTaskStartScheduler+0xc8>)
 80079fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079fc:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <vTaskStartScheduler+0xc8>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e001      	b.n	8007a0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d11f      	bne.n	8007a54 <vTaskStartScheduler+0x94>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	b672      	cpsid	i
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	b662      	cpsie	i
 8007a28:	613b      	str	r3, [r7, #16]
}
 8007a2a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a2c:	4b17      	ldr	r3, [pc, #92]	; (8007a8c <vTaskStartScheduler+0xcc>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3358      	adds	r3, #88	; 0x58
 8007a32:	4a17      	ldr	r2, [pc, #92]	; (8007a90 <vTaskStartScheduler+0xd0>)
 8007a34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a36:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <vTaskStartScheduler+0xd4>)
 8007a38:	f04f 32ff 	mov.w	r2, #4294967295
 8007a3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a3e:	4b16      	ldr	r3, [pc, #88]	; (8007a98 <vTaskStartScheduler+0xd8>)
 8007a40:	2201      	movs	r2, #1
 8007a42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <vTaskStartScheduler+0xdc>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007a4a:	f7f8 ff47 	bl	80008dc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a4e:	f000 fec7 	bl	80087e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a52:	e010      	b.n	8007a76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d10c      	bne.n	8007a76 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <vTaskStartScheduler+0xb4>
}
 8007a76:	bf00      	nop
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	0800bdac 	.word	0x0800bdac
 8007a84:	08008091 	.word	0x08008091
 8007a88:	200005f8 	.word	0x200005f8
 8007a8c:	200004d4 	.word	0x200004d4
 8007a90:	20000010 	.word	0x20000010
 8007a94:	200005f4 	.word	0x200005f4
 8007a98:	200005e0 	.word	0x200005e0
 8007a9c:	200005d8 	.word	0x200005d8

08007aa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <vTaskSuspendAll+0x18>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	4a03      	ldr	r2, [pc, #12]	; (8007ab8 <vTaskSuspendAll+0x18>)
 8007aac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007aae:	bf00      	nop
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	200005fc 	.word	0x200005fc

08007abc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007aca:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <xTaskResumeAll+0x118>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10c      	bne.n	8007aec <xTaskResumeAll+0x30>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	b672      	cpsid	i
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	b662      	cpsie	i
 8007ae6:	603b      	str	r3, [r7, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007aec:	f000 fef6 	bl	80088dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007af0:	4b38      	ldr	r3, [pc, #224]	; (8007bd4 <xTaskResumeAll+0x118>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	4a37      	ldr	r2, [pc, #220]	; (8007bd4 <xTaskResumeAll+0x118>)
 8007af8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007afa:	4b36      	ldr	r3, [pc, #216]	; (8007bd4 <xTaskResumeAll+0x118>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d161      	bne.n	8007bc6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b02:	4b35      	ldr	r3, [pc, #212]	; (8007bd8 <xTaskResumeAll+0x11c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d05d      	beq.n	8007bc6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b0a:	e02e      	b.n	8007b6a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b0c:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <xTaskResumeAll+0x120>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3318      	adds	r3, #24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fea1 	bl	8006860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3304      	adds	r3, #4
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fe9c 	bl	8006860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <xTaskResumeAll+0x124>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	4a2a      	ldr	r2, [pc, #168]	; (8007be0 <xTaskResumeAll+0x124>)
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4a27      	ldr	r2, [pc, #156]	; (8007be4 <xTaskResumeAll+0x128>)
 8007b48:	441a      	add	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f7fe fe28 	bl	80067a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4b23      	ldr	r3, [pc, #140]	; (8007be8 <xTaskResumeAll+0x12c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d302      	bcc.n	8007b6a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007b64:	4b21      	ldr	r3, [pc, #132]	; (8007bec <xTaskResumeAll+0x130>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <xTaskResumeAll+0x120>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1cc      	bne.n	8007b0c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d001      	beq.n	8007b7c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b78:	f000 fb46 	bl	8008208 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b7c:	4b1c      	ldr	r3, [pc, #112]	; (8007bf0 <xTaskResumeAll+0x134>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d010      	beq.n	8007baa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b88:	f000 f836 	bl	8007bf8 <xTaskIncrementTick>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d002      	beq.n	8007b98 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007b92:	4b16      	ldr	r3, [pc, #88]	; (8007bec <xTaskResumeAll+0x130>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1f1      	bne.n	8007b88 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007ba4:	4b12      	ldr	r3, [pc, #72]	; (8007bf0 <xTaskResumeAll+0x134>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007baa:	4b10      	ldr	r3, [pc, #64]	; (8007bec <xTaskResumeAll+0x130>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <xTaskResumeAll+0x138>)
 8007bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bc6:	f000 febd 	bl	8008944 <vPortExitCritical>

	return xAlreadyYielded;
 8007bca:	68bb      	ldr	r3, [r7, #8]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	200005fc 	.word	0x200005fc
 8007bd8:	200005d4 	.word	0x200005d4
 8007bdc:	20000594 	.word	0x20000594
 8007be0:	200005dc 	.word	0x200005dc
 8007be4:	200004d8 	.word	0x200004d8
 8007be8:	200004d4 	.word	0x200004d4
 8007bec:	200005e8 	.word	0x200005e8
 8007bf0:	200005e4 	.word	0x200005e4
 8007bf4:	e000ed04 	.word	0xe000ed04

08007bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c02:	4b4f      	ldr	r3, [pc, #316]	; (8007d40 <xTaskIncrementTick+0x148>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f040 808a 	bne.w	8007d20 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c0c:	4b4d      	ldr	r3, [pc, #308]	; (8007d44 <xTaskIncrementTick+0x14c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3301      	adds	r3, #1
 8007c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c14:	4a4b      	ldr	r2, [pc, #300]	; (8007d44 <xTaskIncrementTick+0x14c>)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d122      	bne.n	8007c66 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c20:	4b49      	ldr	r3, [pc, #292]	; (8007d48 <xTaskIncrementTick+0x150>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00c      	beq.n	8007c44 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	b672      	cpsid	i
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	b662      	cpsie	i
 8007c3e:	603b      	str	r3, [r7, #0]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xTaskIncrementTick+0x4a>
 8007c44:	4b40      	ldr	r3, [pc, #256]	; (8007d48 <xTaskIncrementTick+0x150>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	4b40      	ldr	r3, [pc, #256]	; (8007d4c <xTaskIncrementTick+0x154>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <xTaskIncrementTick+0x150>)
 8007c50:	6013      	str	r3, [r2, #0]
 8007c52:	4a3e      	ldr	r2, [pc, #248]	; (8007d4c <xTaskIncrementTick+0x154>)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	4b3d      	ldr	r3, [pc, #244]	; (8007d50 <xTaskIncrementTick+0x158>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	4a3c      	ldr	r2, [pc, #240]	; (8007d50 <xTaskIncrementTick+0x158>)
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	f000 fad1 	bl	8008208 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c66:	4b3b      	ldr	r3, [pc, #236]	; (8007d54 <xTaskIncrementTick+0x15c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d348      	bcc.n	8007d02 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c70:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <xTaskIncrementTick+0x150>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d104      	bne.n	8007c84 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c7a:	4b36      	ldr	r3, [pc, #216]	; (8007d54 <xTaskIncrementTick+0x15c>)
 8007c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c80:	601a      	str	r2, [r3, #0]
					break;
 8007c82:	e03e      	b.n	8007d02 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c84:	4b30      	ldr	r3, [pc, #192]	; (8007d48 <xTaskIncrementTick+0x150>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d203      	bcs.n	8007ca4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <xTaskIncrementTick+0x15c>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ca2:	e02e      	b.n	8007d02 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3304      	adds	r3, #4
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fdd9 	bl	8006860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	3318      	adds	r3, #24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fdd0 	bl	8006860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	4b23      	ldr	r3, [pc, #140]	; (8007d58 <xTaskIncrementTick+0x160>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <xTaskIncrementTick+0x160>)
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4a1f      	ldr	r2, [pc, #124]	; (8007d5c <xTaskIncrementTick+0x164>)
 8007ce0:	441a      	add	r2, r3
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4610      	mov	r0, r2
 8007cea:	f7fe fd5c 	bl	80067a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <xTaskIncrementTick+0x168>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d3b9      	bcc.n	8007c70 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d00:	e7b6      	b.n	8007c70 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d02:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <xTaskIncrementTick+0x168>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	4914      	ldr	r1, [pc, #80]	; (8007d5c <xTaskIncrementTick+0x164>)
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	440b      	add	r3, r1
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d907      	bls.n	8007d2a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	e004      	b.n	8007d2a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d20:	4b10      	ldr	r3, [pc, #64]	; (8007d64 <xTaskIncrementTick+0x16c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	4a0f      	ldr	r2, [pc, #60]	; (8007d64 <xTaskIncrementTick+0x16c>)
 8007d28:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <xTaskIncrementTick+0x170>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d36:	697b      	ldr	r3, [r7, #20]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200005fc 	.word	0x200005fc
 8007d44:	200005d8 	.word	0x200005d8
 8007d48:	2000058c 	.word	0x2000058c
 8007d4c:	20000590 	.word	0x20000590
 8007d50:	200005ec 	.word	0x200005ec
 8007d54:	200005f4 	.word	0x200005f4
 8007d58:	200005dc 	.word	0x200005dc
 8007d5c:	200004d8 	.word	0x200004d8
 8007d60:	200004d4 	.word	0x200004d4
 8007d64:	200005e4 	.word	0x200005e4
 8007d68:	200005e8 	.word	0x200005e8

08007d6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d72:	4b36      	ldr	r3, [pc, #216]	; (8007e4c <vTaskSwitchContext+0xe0>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d7a:	4b35      	ldr	r3, [pc, #212]	; (8007e50 <vTaskSwitchContext+0xe4>)
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d80:	e05f      	b.n	8007e42 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8007d82:	4b33      	ldr	r3, [pc, #204]	; (8007e50 <vTaskSwitchContext+0xe4>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007d88:	f7f8 fdaf 	bl	80008ea <getRunTimeCounterValue>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4a31      	ldr	r2, [pc, #196]	; (8007e54 <vTaskSwitchContext+0xe8>)
 8007d90:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007d92:	4b30      	ldr	r3, [pc, #192]	; (8007e54 <vTaskSwitchContext+0xe8>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	4b30      	ldr	r3, [pc, #192]	; (8007e58 <vTaskSwitchContext+0xec>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d909      	bls.n	8007db2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	; (8007e5c <vTaskSwitchContext+0xf0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007da4:	4a2b      	ldr	r2, [pc, #172]	; (8007e54 <vTaskSwitchContext+0xe8>)
 8007da6:	6810      	ldr	r0, [r2, #0]
 8007da8:	4a2b      	ldr	r2, [pc, #172]	; (8007e58 <vTaskSwitchContext+0xec>)
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	1a82      	subs	r2, r0, r2
 8007dae:	440a      	add	r2, r1
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <vTaskSwitchContext+0xe8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a28      	ldr	r2, [pc, #160]	; (8007e58 <vTaskSwitchContext+0xec>)
 8007db8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dba:	4b29      	ldr	r3, [pc, #164]	; (8007e60 <vTaskSwitchContext+0xf4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	fab3 f383 	clz	r3, r3
 8007dc6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	f1c3 031f 	rsb	r3, r3, #31
 8007dce:	617b      	str	r3, [r7, #20]
 8007dd0:	4924      	ldr	r1, [pc, #144]	; (8007e64 <vTaskSwitchContext+0xf8>)
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10c      	bne.n	8007dfe <vTaskSwitchContext+0x92>
	__asm volatile
 8007de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de8:	b672      	cpsid	i
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	b662      	cpsie	i
 8007df8:	607b      	str	r3, [r7, #4]
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <vTaskSwitchContext+0x90>
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4a16      	ldr	r2, [pc, #88]	; (8007e64 <vTaskSwitchContext+0xf8>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	685a      	ldr	r2, [r3, #4]
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	605a      	str	r2, [r3, #4]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d104      	bne.n	8007e2e <vTaskSwitchContext+0xc2>
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	605a      	str	r2, [r3, #4]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <vTaskSwitchContext+0xf0>)
 8007e36:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e38:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <vTaskSwitchContext+0xf0>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3358      	adds	r3, #88	; 0x58
 8007e3e:	4a0a      	ldr	r2, [pc, #40]	; (8007e68 <vTaskSwitchContext+0xfc>)
 8007e40:	6013      	str	r3, [r2, #0]
}
 8007e42:	bf00      	nop
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200005fc 	.word	0x200005fc
 8007e50:	200005e8 	.word	0x200005e8
 8007e54:	20000604 	.word	0x20000604
 8007e58:	20000600 	.word	0x20000600
 8007e5c:	200004d4 	.word	0x200004d4
 8007e60:	200005dc 	.word	0x200005dc
 8007e64:	200004d8 	.word	0x200004d8
 8007e68:	20000010 	.word	0x20000010

08007e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10c      	bne.n	8007e96 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	b672      	cpsid	i
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	b662      	cpsie	i
 8007e90:	60fb      	str	r3, [r7, #12]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <vTaskPlaceOnEventList+0x48>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3318      	adds	r3, #24
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fe fca5 	bl	80067ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	6838      	ldr	r0, [r7, #0]
 8007ea8:	f000 fba8 	bl	80085fc <prvAddCurrentTaskToDelayedList>
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	200004d4 	.word	0x200004d4

08007eb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	b672      	cpsid	i
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	b662      	cpsie	i
 8007ee2:	60fb      	str	r3, [r7, #12]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	3318      	adds	r3, #24
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe fcb7 	bl	8006860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ef2:	4b1d      	ldr	r3, [pc, #116]	; (8007f68 <xTaskRemoveFromEventList+0xb0>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d11c      	bne.n	8007f34 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fcae 	bl	8006860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	2201      	movs	r2, #1
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <xTaskRemoveFromEventList+0xb4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	4a16      	ldr	r2, [pc, #88]	; (8007f6c <xTaskRemoveFromEventList+0xb4>)
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4a13      	ldr	r2, [pc, #76]	; (8007f70 <xTaskRemoveFromEventList+0xb8>)
 8007f24:	441a      	add	r2, r3
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fe fc3a 	bl	80067a6 <vListInsertEnd>
 8007f32:	e005      	b.n	8007f40 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3318      	adds	r3, #24
 8007f38:	4619      	mov	r1, r3
 8007f3a:	480e      	ldr	r0, [pc, #56]	; (8007f74 <xTaskRemoveFromEventList+0xbc>)
 8007f3c:	f7fe fc33 	bl	80067a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f44:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <xTaskRemoveFromEventList+0xc0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d905      	bls.n	8007f5a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f52:	4b0a      	ldr	r3, [pc, #40]	; (8007f7c <xTaskRemoveFromEventList+0xc4>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e001      	b.n	8007f5e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f5e:	697b      	ldr	r3, [r7, #20]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3718      	adds	r7, #24
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	200005fc 	.word	0x200005fc
 8007f6c:	200005dc 	.word	0x200005dc
 8007f70:	200004d8 	.word	0x200004d8
 8007f74:	20000594 	.word	0x20000594
 8007f78:	200004d4 	.word	0x200004d4
 8007f7c:	200005e8 	.word	0x200005e8

08007f80 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <vTaskInternalSetTimeOutState+0x24>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <vTaskInternalSetTimeOutState+0x28>)
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	605a      	str	r2, [r3, #4]
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	200005ec 	.word	0x200005ec
 8007fa8:	200005d8 	.word	0x200005d8

08007fac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b088      	sub	sp, #32
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10c      	bne.n	8007fd6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	613b      	str	r3, [r7, #16]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10c      	bne.n	8007ff6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	b672      	cpsid	i
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	b662      	cpsie	i
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007ff6:	f000 fc71 	bl	80088dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ffa:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <xTaskCheckForTimeOut+0xc4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008012:	d102      	bne.n	800801a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	e023      	b.n	8008062 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b15      	ldr	r3, [pc, #84]	; (8008074 <xTaskCheckForTimeOut+0xc8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d007      	beq.n	8008036 <xTaskCheckForTimeOut+0x8a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	429a      	cmp	r2, r3
 800802e:	d302      	bcc.n	8008036 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008030:	2301      	movs	r3, #1
 8008032:	61fb      	str	r3, [r7, #28]
 8008034:	e015      	b.n	8008062 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	429a      	cmp	r2, r3
 800803e:	d20b      	bcs.n	8008058 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff97 	bl	8007f80 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	e004      	b.n	8008062 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800805e:	2301      	movs	r3, #1
 8008060:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008062:	f000 fc6f 	bl	8008944 <vPortExitCritical>

	return xReturn;
 8008066:	69fb      	ldr	r3, [r7, #28]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	200005d8 	.word	0x200005d8
 8008074:	200005ec 	.word	0x200005ec

08008078 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800807c:	4b03      	ldr	r3, [pc, #12]	; (800808c <vTaskMissedYield+0x14>)
 800807e:	2201      	movs	r2, #1
 8008080:	601a      	str	r2, [r3, #0]
}
 8008082:	bf00      	nop
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	200005e8 	.word	0x200005e8

08008090 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008098:	f000 f852 	bl	8008140 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800809c:	4b06      	ldr	r3, [pc, #24]	; (80080b8 <prvIdleTask+0x28>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d9f9      	bls.n	8008098 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080a4:	4b05      	ldr	r3, [pc, #20]	; (80080bc <prvIdleTask+0x2c>)
 80080a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080b4:	e7f0      	b.n	8008098 <prvIdleTask+0x8>
 80080b6:	bf00      	nop
 80080b8:	200004d8 	.word	0x200004d8
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080c6:	2300      	movs	r3, #0
 80080c8:	607b      	str	r3, [r7, #4]
 80080ca:	e00c      	b.n	80080e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4613      	mov	r3, r2
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4a12      	ldr	r2, [pc, #72]	; (8008120 <prvInitialiseTaskLists+0x60>)
 80080d8:	4413      	add	r3, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fe fb36 	bl	800674c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3301      	adds	r3, #1
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b06      	cmp	r3, #6
 80080ea:	d9ef      	bls.n	80080cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080ec:	480d      	ldr	r0, [pc, #52]	; (8008124 <prvInitialiseTaskLists+0x64>)
 80080ee:	f7fe fb2d 	bl	800674c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080f2:	480d      	ldr	r0, [pc, #52]	; (8008128 <prvInitialiseTaskLists+0x68>)
 80080f4:	f7fe fb2a 	bl	800674c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080f8:	480c      	ldr	r0, [pc, #48]	; (800812c <prvInitialiseTaskLists+0x6c>)
 80080fa:	f7fe fb27 	bl	800674c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080fe:	480c      	ldr	r0, [pc, #48]	; (8008130 <prvInitialiseTaskLists+0x70>)
 8008100:	f7fe fb24 	bl	800674c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008104:	480b      	ldr	r0, [pc, #44]	; (8008134 <prvInitialiseTaskLists+0x74>)
 8008106:	f7fe fb21 	bl	800674c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800810a:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <prvInitialiseTaskLists+0x78>)
 800810c:	4a05      	ldr	r2, [pc, #20]	; (8008124 <prvInitialiseTaskLists+0x64>)
 800810e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <prvInitialiseTaskLists+0x7c>)
 8008112:	4a05      	ldr	r2, [pc, #20]	; (8008128 <prvInitialiseTaskLists+0x68>)
 8008114:	601a      	str	r2, [r3, #0]
}
 8008116:	bf00      	nop
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200004d8 	.word	0x200004d8
 8008124:	20000564 	.word	0x20000564
 8008128:	20000578 	.word	0x20000578
 800812c:	20000594 	.word	0x20000594
 8008130:	200005a8 	.word	0x200005a8
 8008134:	200005c0 	.word	0x200005c0
 8008138:	2000058c 	.word	0x2000058c
 800813c:	20000590 	.word	0x20000590

08008140 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008146:	e019      	b.n	800817c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008148:	f000 fbc8 	bl	80088dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800814c:	4b10      	ldr	r3, [pc, #64]	; (8008190 <prvCheckTasksWaitingTermination+0x50>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	4618      	mov	r0, r3
 800815a:	f7fe fb81 	bl	8006860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800815e:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <prvCheckTasksWaitingTermination+0x54>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3b01      	subs	r3, #1
 8008164:	4a0b      	ldr	r2, [pc, #44]	; (8008194 <prvCheckTasksWaitingTermination+0x54>)
 8008166:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <prvCheckTasksWaitingTermination+0x58>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3b01      	subs	r3, #1
 800816e:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <prvCheckTasksWaitingTermination+0x58>)
 8008170:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008172:	f000 fbe7 	bl	8008944 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f810 	bl	800819c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <prvCheckTasksWaitingTermination+0x58>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e1      	bne.n	8008148 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200005a8 	.word	0x200005a8
 8008194:	200005d4 	.word	0x200005d4
 8008198:	200005bc 	.word	0x200005bc

0800819c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3358      	adds	r3, #88	; 0x58
 80081a8:	4618      	mov	r0, r3
 80081aa:	f001 fd87 	bl	8009cbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d108      	bne.n	80081ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 fd83 	bl	8008cc8 <vPortFree>
				vPortFree( pxTCB );
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fd80 	bl	8008cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081c8:	e01a      	b.n	8008200 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d103      	bne.n	80081dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fd77 	bl	8008cc8 <vPortFree>
	}
 80081da:	e011      	b.n	8008200 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d00c      	beq.n	8008200 <prvDeleteTCB+0x64>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ea:	b672      	cpsid	i
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	b662      	cpsie	i
 80081fa:	60fb      	str	r3, [r7, #12]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <prvDeleteTCB+0x62>
	}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800820e:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <prvResetNextTaskUnblockTime+0x38>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008218:	4b0a      	ldr	r3, [pc, #40]	; (8008244 <prvResetNextTaskUnblockTime+0x3c>)
 800821a:	f04f 32ff 	mov.w	r2, #4294967295
 800821e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008220:	e008      	b.n	8008234 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008222:	4b07      	ldr	r3, [pc, #28]	; (8008240 <prvResetNextTaskUnblockTime+0x38>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	4a04      	ldr	r2, [pc, #16]	; (8008244 <prvResetNextTaskUnblockTime+0x3c>)
 8008232:	6013      	str	r3, [r2, #0]
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr
 8008240:	2000058c 	.word	0x2000058c
 8008244:	200005f4 	.word	0x200005f4

08008248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800824e:	4b0b      	ldr	r3, [pc, #44]	; (800827c <xTaskGetSchedulerState+0x34>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008256:	2301      	movs	r3, #1
 8008258:	607b      	str	r3, [r7, #4]
 800825a:	e008      	b.n	800826e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800825c:	4b08      	ldr	r3, [pc, #32]	; (8008280 <xTaskGetSchedulerState+0x38>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d102      	bne.n	800826a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008264:	2302      	movs	r3, #2
 8008266:	607b      	str	r3, [r7, #4]
 8008268:	e001      	b.n	800826e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800826a:	2300      	movs	r3, #0
 800826c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800826e:	687b      	ldr	r3, [r7, #4]
	}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	200005e0 	.word	0x200005e0
 8008280:	200005fc 	.word	0x200005fc

08008284 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d069      	beq.n	800836e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	4b36      	ldr	r3, [pc, #216]	; (8008378 <xTaskPriorityInherit+0xf4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d259      	bcs.n	800835c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	db06      	blt.n	80082be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b0:	4b31      	ldr	r3, [pc, #196]	; (8008378 <xTaskPriorityInherit+0xf4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	f1c3 0207 	rsb	r2, r3, #7
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6959      	ldr	r1, [r3, #20]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c6:	4613      	mov	r3, r2
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	4413      	add	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4a2b      	ldr	r2, [pc, #172]	; (800837c <xTaskPriorityInherit+0xf8>)
 80082d0:	4413      	add	r3, r2
 80082d2:	4299      	cmp	r1, r3
 80082d4:	d13a      	bne.n	800834c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	3304      	adds	r3, #4
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fe fac0 	bl	8006860 <uxListRemove>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d115      	bne.n	8008312 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ea:	4924      	ldr	r1, [pc, #144]	; (800837c <xTaskPriorityInherit+0xf8>)
 80082ec:	4613      	mov	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xTaskPriorityInherit+0x8e>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	2201      	movs	r2, #1
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	43da      	mvns	r2, r3
 8008308:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <xTaskPriorityInherit+0xfc>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4013      	ands	r3, r2
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <xTaskPriorityInherit+0xfc>)
 8008310:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008312:	4b19      	ldr	r3, [pc, #100]	; (8008378 <xTaskPriorityInherit+0xf4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	2201      	movs	r2, #1
 8008322:	409a      	lsls	r2, r3
 8008324:	4b16      	ldr	r3, [pc, #88]	; (8008380 <xTaskPriorityInherit+0xfc>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4313      	orrs	r3, r2
 800832a:	4a15      	ldr	r2, [pc, #84]	; (8008380 <xTaskPriorityInherit+0xfc>)
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008332:	4613      	mov	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	4a10      	ldr	r2, [pc, #64]	; (800837c <xTaskPriorityInherit+0xf8>)
 800833c:	441a      	add	r2, r3
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	3304      	adds	r3, #4
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f7fe fa2e 	bl	80067a6 <vListInsertEnd>
 800834a:	e004      	b.n	8008356 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <xTaskPriorityInherit+0xf4>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e008      	b.n	800836e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008360:	4b05      	ldr	r3, [pc, #20]	; (8008378 <xTaskPriorityInherit+0xf4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	429a      	cmp	r2, r3
 8008368:	d201      	bcs.n	800836e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800836a:	2301      	movs	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800836e:	68fb      	ldr	r3, [r7, #12]
	}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	200004d4 	.word	0x200004d4
 800837c:	200004d8 	.word	0x200004d8
 8008380:	200005dc 	.word	0x200005dc

08008384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d072      	beq.n	8008480 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800839a:	4b3c      	ldr	r3, [pc, #240]	; (800848c <xTaskPriorityDisinherit+0x108>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d00c      	beq.n	80083be <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	b672      	cpsid	i
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	b662      	cpsie	i
 80083b8:	60fb      	str	r3, [r7, #12]
}
 80083ba:	bf00      	nop
 80083bc:	e7fe      	b.n	80083bc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10c      	bne.n	80083e0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	b672      	cpsid	i
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	b662      	cpsie	i
 80083da:	60bb      	str	r3, [r7, #8]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e4:	1e5a      	subs	r2, r3, #1
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d044      	beq.n	8008480 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d140      	bne.n	8008480 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3304      	adds	r3, #4
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fa2c 	bl	8006860 <uxListRemove>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d115      	bne.n	800843a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008412:	491f      	ldr	r1, [pc, #124]	; (8008490 <xTaskPriorityDisinherit+0x10c>)
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xTaskPriorityDisinherit+0xb6>
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008428:	2201      	movs	r2, #1
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	43da      	mvns	r2, r3
 8008430:	4b18      	ldr	r3, [pc, #96]	; (8008494 <xTaskPriorityDisinherit+0x110>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4013      	ands	r3, r2
 8008436:	4a17      	ldr	r2, [pc, #92]	; (8008494 <xTaskPriorityDisinherit+0x110>)
 8008438:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	f1c3 0207 	rsb	r2, r3, #7
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008452:	2201      	movs	r2, #1
 8008454:	409a      	lsls	r2, r3
 8008456:	4b0f      	ldr	r3, [pc, #60]	; (8008494 <xTaskPriorityDisinherit+0x110>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4313      	orrs	r3, r2
 800845c:	4a0d      	ldr	r2, [pc, #52]	; (8008494 <xTaskPriorityDisinherit+0x110>)
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4a08      	ldr	r2, [pc, #32]	; (8008490 <xTaskPriorityDisinherit+0x10c>)
 800846e:	441a      	add	r2, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	3304      	adds	r3, #4
 8008474:	4619      	mov	r1, r3
 8008476:	4610      	mov	r0, r2
 8008478:	f7fe f995 	bl	80067a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800847c:	2301      	movs	r3, #1
 800847e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008480:	697b      	ldr	r3, [r7, #20]
	}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	200004d4 	.word	0x200004d4
 8008490:	200004d8 	.word	0x200004d8
 8008494:	200005dc 	.word	0x200005dc

08008498 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80084a6:	2301      	movs	r3, #1
 80084a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 8087 	beq.w	80085c0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10c      	bne.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084be:	b672      	cpsid	i
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	b662      	cpsie	i
 80084ce:	60fb      	str	r3, [r7, #12]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d902      	bls.n	80084e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e002      	b.n	80084ea <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d065      	beq.n	80085c0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d160      	bne.n	80085c0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80084fe:	4b32      	ldr	r3, [pc, #200]	; (80085c8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69ba      	ldr	r2, [r7, #24]
 8008504:	429a      	cmp	r2, r3
 8008506:	d10c      	bne.n	8008522 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	b672      	cpsid	i
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	b662      	cpsie	i
 800851c:	60bb      	str	r3, [r7, #8]
}
 800851e:	bf00      	nop
 8008520:	e7fe      	b.n	8008520 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	db04      	blt.n	8008540 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f1c3 0207 	rsb	r2, r3, #7
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	6959      	ldr	r1, [r3, #20]
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4a1f      	ldr	r2, [pc, #124]	; (80085cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008550:	4413      	add	r3, r2
 8008552:	4299      	cmp	r1, r3
 8008554:	d134      	bne.n	80085c0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe f980 	bl	8006860 <uxListRemove>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d115      	bne.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	4918      	ldr	r1, [pc, #96]	; (80085cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	2201      	movs	r2, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43da      	mvns	r2, r3
 8008588:	4b11      	ldr	r3, [pc, #68]	; (80085d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4013      	ands	r3, r2
 800858e:	4a10      	ldr	r2, [pc, #64]	; (80085d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008590:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008596:	2201      	movs	r2, #1
 8008598:	409a      	lsls	r2, r3
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4313      	orrs	r3, r2
 80085a0:	4a0b      	ldr	r2, [pc, #44]	; (80085d0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4a06      	ldr	r2, [pc, #24]	; (80085cc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80085b2:	441a      	add	r2, r3
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f7fe f8f3 	bl	80067a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085c0:	bf00      	nop
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	200004d4 	.word	0x200004d4
 80085cc:	200004d8 	.word	0x200004d8
 80085d0:	200005dc 	.word	0x200005dc

080085d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80085d8:	4b07      	ldr	r3, [pc, #28]	; (80085f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085e6:	3201      	adds	r2, #1
 80085e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80085ea:	4b03      	ldr	r3, [pc, #12]	; (80085f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80085ec:	681b      	ldr	r3, [r3, #0]
	}
 80085ee:	4618      	mov	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	200004d4 	.word	0x200004d4

080085fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800860c:	4b28      	ldr	r3, [pc, #160]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe f924 	bl	8006860 <uxListRemove>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10b      	bne.n	8008636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800861e:	4b24      	ldr	r3, [pc, #144]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	2201      	movs	r2, #1
 8008626:	fa02 f303 	lsl.w	r3, r2, r3
 800862a:	43da      	mvns	r2, r3
 800862c:	4b21      	ldr	r3, [pc, #132]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4013      	ands	r3, r2
 8008632:	4a20      	ldr	r2, [pc, #128]	; (80086b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863c:	d10a      	bne.n	8008654 <prvAddCurrentTaskToDelayedList+0x58>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d007      	beq.n	8008654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008644:	4b1a      	ldr	r3, [pc, #104]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	481a      	ldr	r0, [pc, #104]	; (80086b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800864e:	f7fe f8aa 	bl	80067a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008652:	e026      	b.n	80086a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4413      	add	r3, r2
 800865a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800865c:	4b14      	ldr	r3, [pc, #80]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	429a      	cmp	r2, r3
 800866a:	d209      	bcs.n	8008680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3304      	adds	r3, #4
 8008676:	4619      	mov	r1, r3
 8008678:	4610      	mov	r0, r2
 800867a:	f7fe f8b8 	bl	80067ee <vListInsert>
}
 800867e:	e010      	b.n	80086a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008680:	4b0f      	ldr	r3, [pc, #60]	; (80086c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f7fe f8ae 	bl	80067ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008692:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	429a      	cmp	r2, r3
 800869a:	d202      	bcs.n	80086a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800869c:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	6013      	str	r3, [r2, #0]
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200005d8 	.word	0x200005d8
 80086b0:	200004d4 	.word	0x200004d4
 80086b4:	200005dc 	.word	0x200005dc
 80086b8:	200005c0 	.word	0x200005c0
 80086bc:	20000590 	.word	0x20000590
 80086c0:	2000058c 	.word	0x2000058c
 80086c4:	200005f4 	.word	0x200005f4

080086c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3b04      	subs	r3, #4
 80086d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3b04      	subs	r3, #4
 80086e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	f023 0201 	bic.w	r2, r3, #1
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3b04      	subs	r3, #4
 80086f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086f8:	4a0c      	ldr	r2, [pc, #48]	; (800872c <pxPortInitialiseStack+0x64>)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	3b14      	subs	r3, #20
 8008702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3b04      	subs	r3, #4
 800870e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f06f 0202 	mvn.w	r2, #2
 8008716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3b20      	subs	r3, #32
 800871c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800871e:	68fb      	ldr	r3, [r7, #12]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3714      	adds	r7, #20
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	08008731 	.word	0x08008731

08008730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008736:	2300      	movs	r3, #0
 8008738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800873a:	4b14      	ldr	r3, [pc, #80]	; (800878c <prvTaskExitError+0x5c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008742:	d00c      	beq.n	800875e <prvTaskExitError+0x2e>
	__asm volatile
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	b672      	cpsid	i
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	b662      	cpsie	i
 8008758:	60fb      	str	r3, [r7, #12]
}
 800875a:	bf00      	nop
 800875c:	e7fe      	b.n	800875c <prvTaskExitError+0x2c>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	b672      	cpsid	i
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	b662      	cpsie	i
 8008772:	60bb      	str	r3, [r7, #8]
}
 8008774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008776:	bf00      	nop
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0fc      	beq.n	8008778 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	2000000c 	.word	0x2000000c

08008790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <pxCurrentTCBConst2>)
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	6808      	ldr	r0, [r1, #0]
 8008796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	f380 8809 	msr	PSP, r0
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f04f 0000 	mov.w	r0, #0
 80087a6:	f380 8811 	msr	BASEPRI, r0
 80087aa:	4770      	bx	lr
 80087ac:	f3af 8000 	nop.w

080087b0 <pxCurrentTCBConst2>:
 80087b0:	200004d4 	.word	0x200004d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop

080087b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087b8:	4808      	ldr	r0, [pc, #32]	; (80087dc <prvPortStartFirstTask+0x24>)
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	6800      	ldr	r0, [r0, #0]
 80087be:	f380 8808 	msr	MSP, r0
 80087c2:	f04f 0000 	mov.w	r0, #0
 80087c6:	f380 8814 	msr	CONTROL, r0
 80087ca:	b662      	cpsie	i
 80087cc:	b661      	cpsie	f
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	df00      	svc	0
 80087d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087da:	bf00      	nop
 80087dc:	e000ed08 	.word	0xe000ed08

080087e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087e6:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <xPortStartScheduler+0xe4>)
 80087e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	22ff      	movs	r2, #255	; 0xff
 80087f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008808:	b2da      	uxtb	r2, r3
 800880a:	4b2f      	ldr	r3, [pc, #188]	; (80088c8 <xPortStartScheduler+0xe8>)
 800880c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800880e:	4b2f      	ldr	r3, [pc, #188]	; (80088cc <xPortStartScheduler+0xec>)
 8008810:	2207      	movs	r2, #7
 8008812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008814:	e009      	b.n	800882a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008816:	4b2d      	ldr	r3, [pc, #180]	; (80088cc <xPortStartScheduler+0xec>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3b01      	subs	r3, #1
 800881c:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <xPortStartScheduler+0xec>)
 800881e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	b2db      	uxtb	r3, r3
 8008828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	d0ef      	beq.n	8008816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008836:	4b25      	ldr	r3, [pc, #148]	; (80088cc <xPortStartScheduler+0xec>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1c3 0307 	rsb	r3, r3, #7
 800883e:	2b04      	cmp	r3, #4
 8008840:	d00c      	beq.n	800885c <xPortStartScheduler+0x7c>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008846:	b672      	cpsid	i
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	b662      	cpsie	i
 8008856:	60bb      	str	r3, [r7, #8]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800885c:	4b1b      	ldr	r3, [pc, #108]	; (80088cc <xPortStartScheduler+0xec>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	021b      	lsls	r3, r3, #8
 8008862:	4a1a      	ldr	r2, [pc, #104]	; (80088cc <xPortStartScheduler+0xec>)
 8008864:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008866:	4b19      	ldr	r3, [pc, #100]	; (80088cc <xPortStartScheduler+0xec>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800886e:	4a17      	ldr	r2, [pc, #92]	; (80088cc <xPortStartScheduler+0xec>)
 8008870:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	b2da      	uxtb	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <xPortStartScheduler+0xf0>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a14      	ldr	r2, [pc, #80]	; (80088d0 <xPortStartScheduler+0xf0>)
 8008880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008884:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008886:	4b12      	ldr	r3, [pc, #72]	; (80088d0 <xPortStartScheduler+0xf0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a11      	ldr	r2, [pc, #68]	; (80088d0 <xPortStartScheduler+0xf0>)
 800888c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008890:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008892:	f000 f8dd 	bl	8008a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008896:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <xPortStartScheduler+0xf4>)
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800889c:	f000 f8fc 	bl	8008a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088a0:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <xPortStartScheduler+0xf8>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a0c      	ldr	r2, [pc, #48]	; (80088d8 <xPortStartScheduler+0xf8>)
 80088a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80088aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088ac:	f7ff ff84 	bl	80087b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088b0:	f7ff fa5c 	bl	8007d6c <vTaskSwitchContext>
	prvTaskExitError();
 80088b4:	f7ff ff3c 	bl	8008730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	e000e400 	.word	0xe000e400
 80088c8:	20000608 	.word	0x20000608
 80088cc:	2000060c 	.word	0x2000060c
 80088d0:	e000ed20 	.word	0xe000ed20
 80088d4:	2000000c 	.word	0x2000000c
 80088d8:	e000ef34 	.word	0xe000ef34

080088dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
	__asm volatile
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	b672      	cpsid	i
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	b662      	cpsie	i
 80088f6:	607b      	str	r3, [r7, #4]
}
 80088f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088fa:	4b10      	ldr	r3, [pc, #64]	; (800893c <vPortEnterCritical+0x60>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3301      	adds	r3, #1
 8008900:	4a0e      	ldr	r2, [pc, #56]	; (800893c <vPortEnterCritical+0x60>)
 8008902:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008904:	4b0d      	ldr	r3, [pc, #52]	; (800893c <vPortEnterCritical+0x60>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b01      	cmp	r3, #1
 800890a:	d111      	bne.n	8008930 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800890c:	4b0c      	ldr	r3, [pc, #48]	; (8008940 <vPortEnterCritical+0x64>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00c      	beq.n	8008930 <vPortEnterCritical+0x54>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	b672      	cpsid	i
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	b662      	cpsie	i
 800892a:	603b      	str	r3, [r7, #0]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <vPortEnterCritical+0x52>
	}
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	2000000c 	.word	0x2000000c
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800894a:	4b13      	ldr	r3, [pc, #76]	; (8008998 <vPortExitCritical+0x54>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10c      	bne.n	800896c <vPortExitCritical+0x28>
	__asm volatile
 8008952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008956:	b672      	cpsid	i
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	b662      	cpsie	i
 8008966:	607b      	str	r3, [r7, #4]
}
 8008968:	bf00      	nop
 800896a:	e7fe      	b.n	800896a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <vPortExitCritical+0x54>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	4a09      	ldr	r2, [pc, #36]	; (8008998 <vPortExitCritical+0x54>)
 8008974:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <vPortExitCritical+0x54>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d105      	bne.n	800898a <vPortExitCritical+0x46>
 800897e:	2300      	movs	r3, #0
 8008980:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	f383 8811 	msr	BASEPRI, r3
}
 8008988:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	2000000c 	.word	0x2000000c
 800899c:	00000000 	.word	0x00000000

080089a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089a0:	f3ef 8009 	mrs	r0, PSP
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4b15      	ldr	r3, [pc, #84]	; (8008a00 <pxCurrentTCBConst>)
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	f01e 0f10 	tst.w	lr, #16
 80089b0:	bf08      	it	eq
 80089b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089c4:	b672      	cpsid	i
 80089c6:	f380 8811 	msr	BASEPRI, r0
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	b662      	cpsie	i
 80089d4:	f7ff f9ca 	bl	8007d6c <vTaskSwitchContext>
 80089d8:	f04f 0000 	mov.w	r0, #0
 80089dc:	f380 8811 	msr	BASEPRI, r0
 80089e0:	bc09      	pop	{r0, r3}
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	6808      	ldr	r0, [r1, #0]
 80089e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f01e 0f10 	tst.w	lr, #16
 80089ee:	bf08      	it	eq
 80089f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089f4:	f380 8809 	msr	PSP, r0
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <pxCurrentTCBConst>:
 8008a00:	200004d4 	.word	0x200004d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop

08008a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a12:	b672      	cpsid	i
 8008a14:	f383 8811 	msr	BASEPRI, r3
 8008a18:	f3bf 8f6f 	isb	sy
 8008a1c:	f3bf 8f4f 	dsb	sy
 8008a20:	b662      	cpsie	i
 8008a22:	607b      	str	r3, [r7, #4]
}
 8008a24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a26:	f7ff f8e7 	bl	8007bf8 <xTaskIncrementTick>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d003      	beq.n	8008a38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <SysTick_Handler+0x44>)
 8008a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	f383 8811 	msr	BASEPRI, r3
}
 8008a42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a44:	bf00      	nop
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	e000ed04 	.word	0xe000ed04

08008a50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a50:	b480      	push	{r7}
 8008a52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a54:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <vPortSetupTimerInterrupt+0x34>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a5a:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <vPortSetupTimerInterrupt+0x38>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a60:	4b0a      	ldr	r3, [pc, #40]	; (8008a8c <vPortSetupTimerInterrupt+0x3c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a0a      	ldr	r2, [pc, #40]	; (8008a90 <vPortSetupTimerInterrupt+0x40>)
 8008a66:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6a:	099b      	lsrs	r3, r3, #6
 8008a6c:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <vPortSetupTimerInterrupt+0x44>)
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a72:	4b04      	ldr	r3, [pc, #16]	; (8008a84 <vPortSetupTimerInterrupt+0x34>)
 8008a74:	2207      	movs	r2, #7
 8008a76:	601a      	str	r2, [r3, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	e000e010 	.word	0xe000e010
 8008a88:	e000e018 	.word	0xe000e018
 8008a8c:	20000000 	.word	0x20000000
 8008a90:	10624dd3 	.word	0x10624dd3
 8008a94:	e000e014 	.word	0xe000e014

08008a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008aa8 <vPortEnableVFP+0x10>
 8008a9c:	6801      	ldr	r1, [r0, #0]
 8008a9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008aa2:	6001      	str	r1, [r0, #0]
 8008aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008aa6:	bf00      	nop
 8008aa8:	e000ed88 	.word	0xe000ed88

08008aac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ab2:	f3ef 8305 	mrs	r3, IPSR
 8008ab6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d916      	bls.n	8008aec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008abe:	4a19      	ldr	r2, [pc, #100]	; (8008b24 <vPortValidateInterruptPriority+0x78>)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ac8:	4b17      	ldr	r3, [pc, #92]	; (8008b28 <vPortValidateInterruptPriority+0x7c>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	7afa      	ldrb	r2, [r7, #11]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d20c      	bcs.n	8008aec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	b672      	cpsid	i
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	b662      	cpsie	i
 8008ae6:	607b      	str	r3, [r7, #4]
}
 8008ae8:	bf00      	nop
 8008aea:	e7fe      	b.n	8008aea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008aec:	4b0f      	ldr	r3, [pc, #60]	; (8008b2c <vPortValidateInterruptPriority+0x80>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008af4:	4b0e      	ldr	r3, [pc, #56]	; (8008b30 <vPortValidateInterruptPriority+0x84>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d90c      	bls.n	8008b16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	b672      	cpsid	i
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	b662      	cpsie	i
 8008b10:	603b      	str	r3, [r7, #0]
}
 8008b12:	bf00      	nop
 8008b14:	e7fe      	b.n	8008b14 <vPortValidateInterruptPriority+0x68>
	}
 8008b16:	bf00      	nop
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	e000e3f0 	.word	0xe000e3f0
 8008b28:	20000608 	.word	0x20000608
 8008b2c:	e000ed0c 	.word	0xe000ed0c
 8008b30:	2000060c 	.word	0x2000060c

08008b34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b08a      	sub	sp, #40	; 0x28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b40:	f7fe ffae 	bl	8007aa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b44:	4b5b      	ldr	r3, [pc, #364]	; (8008cb4 <pvPortMalloc+0x180>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b4c:	f000 f91a 	bl	8008d84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b50:	4b59      	ldr	r3, [pc, #356]	; (8008cb8 <pvPortMalloc+0x184>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4013      	ands	r3, r2
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f040 8092 	bne.w	8008c82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d01f      	beq.n	8008ba4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008b64:	2208      	movs	r2, #8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4413      	add	r3, r2
 8008b6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d016      	beq.n	8008ba4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f023 0307 	bic.w	r3, r3, #7
 8008b7c:	3308      	adds	r3, #8
 8008b7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00c      	beq.n	8008ba4 <pvPortMalloc+0x70>
	__asm volatile
 8008b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8e:	b672      	cpsid	i
 8008b90:	f383 8811 	msr	BASEPRI, r3
 8008b94:	f3bf 8f6f 	isb	sy
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	b662      	cpsie	i
 8008b9e:	617b      	str	r3, [r7, #20]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d06b      	beq.n	8008c82 <pvPortMalloc+0x14e>
 8008baa:	4b44      	ldr	r3, [pc, #272]	; (8008cbc <pvPortMalloc+0x188>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d866      	bhi.n	8008c82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bb4:	4b42      	ldr	r3, [pc, #264]	; (8008cc0 <pvPortMalloc+0x18c>)
 8008bb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bb8:	4b41      	ldr	r3, [pc, #260]	; (8008cc0 <pvPortMalloc+0x18c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bbe:	e004      	b.n	8008bca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d903      	bls.n	8008bdc <pvPortMalloc+0xa8>
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f1      	bne.n	8008bc0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bdc:	4b35      	ldr	r3, [pc, #212]	; (8008cb4 <pvPortMalloc+0x180>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d04d      	beq.n	8008c82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2208      	movs	r2, #8
 8008bec:	4413      	add	r3, r2
 8008bee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	2308      	movs	r3, #8
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d921      	bls.n	8008c4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00c      	beq.n	8008c34 <pvPortMalloc+0x100>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	b672      	cpsid	i
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	b662      	cpsie	i
 8008c2e:	613b      	str	r3, [r7, #16]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	1ad2      	subs	r2, r2, r3
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c46:	69b8      	ldr	r0, [r7, #24]
 8008c48:	f000 f8fe 	bl	8008e48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c4c:	4b1b      	ldr	r3, [pc, #108]	; (8008cbc <pvPortMalloc+0x188>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	4a19      	ldr	r2, [pc, #100]	; (8008cbc <pvPortMalloc+0x188>)
 8008c58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c5a:	4b18      	ldr	r3, [pc, #96]	; (8008cbc <pvPortMalloc+0x188>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b19      	ldr	r3, [pc, #100]	; (8008cc4 <pvPortMalloc+0x190>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d203      	bcs.n	8008c6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c66:	4b15      	ldr	r3, [pc, #84]	; (8008cbc <pvPortMalloc+0x188>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a16      	ldr	r2, [pc, #88]	; (8008cc4 <pvPortMalloc+0x190>)
 8008c6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4b11      	ldr	r3, [pc, #68]	; (8008cb8 <pvPortMalloc+0x184>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c82:	f7fe ff1b 	bl	8007abc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00c      	beq.n	8008caa <pvPortMalloc+0x176>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	b672      	cpsid	i
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	b662      	cpsie	i
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <pvPortMalloc+0x174>
	return pvReturn;
 8008caa:	69fb      	ldr	r3, [r7, #28]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20010618 	.word	0x20010618
 8008cb8:	20010624 	.word	0x20010624
 8008cbc:	2001061c 	.word	0x2001061c
 8008cc0:	20010610 	.word	0x20010610
 8008cc4:	20010620 	.word	0x20010620

08008cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d04c      	beq.n	8008d74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cda:	2308      	movs	r3, #8
 8008cdc:	425b      	negs	r3, r3
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <vPortFree+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d10c      	bne.n	8008d10 <vPortFree+0x48>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfa:	b672      	cpsid	i
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	b662      	cpsie	i
 8008d0a:	60fb      	str	r3, [r7, #12]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00c      	beq.n	8008d32 <vPortFree+0x6a>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	b672      	cpsid	i
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	b662      	cpsie	i
 8008d2c:	60bb      	str	r3, [r7, #8]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <vPortFree+0xb4>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d019      	beq.n	8008d74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d115      	bne.n	8008d74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <vPortFree+0xb4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	43db      	mvns	r3, r3
 8008d52:	401a      	ands	r2, r3
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d58:	f7fe fea2 	bl	8007aa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <vPortFree+0xb8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4413      	add	r3, r2
 8008d66:	4a06      	ldr	r2, [pc, #24]	; (8008d80 <vPortFree+0xb8>)
 8008d68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d6a:	6938      	ldr	r0, [r7, #16]
 8008d6c:	f000 f86c 	bl	8008e48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d70:	f7fe fea4 	bl	8007abc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d74:	bf00      	nop
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	20010624 	.word	0x20010624
 8008d80:	2001061c 	.word	0x2001061c

08008d84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d90:	4b27      	ldr	r3, [pc, #156]	; (8008e30 <prvHeapInit+0xac>)
 8008d92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f003 0307 	and.w	r3, r3, #7
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00c      	beq.n	8008db8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3307      	adds	r3, #7
 8008da2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	4a1f      	ldr	r2, [pc, #124]	; (8008e30 <prvHeapInit+0xac>)
 8008db4:	4413      	add	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <prvHeapInit+0xb0>)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <prvHeapInit+0xb0>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	4413      	add	r3, r2
 8008dce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dd0:	2208      	movs	r2, #8
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	1a9b      	subs	r3, r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0307 	bic.w	r3, r3, #7
 8008dde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a15      	ldr	r2, [pc, #84]	; (8008e38 <prvHeapInit+0xb4>)
 8008de4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <prvHeapInit+0xb4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dee:	4b12      	ldr	r3, [pc, #72]	; (8008e38 <prvHeapInit+0xb4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	1ad2      	subs	r2, r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvHeapInit+0xb4>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	4a0a      	ldr	r2, [pc, #40]	; (8008e3c <prvHeapInit+0xb8>)
 8008e12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	4a09      	ldr	r2, [pc, #36]	; (8008e40 <prvHeapInit+0xbc>)
 8008e1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <prvHeapInit+0xc0>)
 8008e1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e22:	601a      	str	r2, [r3, #0]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	20000610 	.word	0x20000610
 8008e34:	20010610 	.word	0x20010610
 8008e38:	20010618 	.word	0x20010618
 8008e3c:	20010620 	.word	0x20010620
 8008e40:	2001061c 	.word	0x2001061c
 8008e44:	20010624 	.word	0x20010624

08008e48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <prvInsertBlockIntoFreeList+0xac>)
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e002      	b.n	8008e5c <prvInsertBlockIntoFreeList+0x14>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60fb      	str	r3, [r7, #12]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d8f7      	bhi.n	8008e56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	4413      	add	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d108      	bne.n	8008e8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d118      	bne.n	8008ed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b15      	ldr	r3, [pc, #84]	; (8008ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d00d      	beq.n	8008ec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	441a      	add	r2, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e008      	b.n	8008ed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	601a      	str	r2, [r3, #0]
 8008ece:	e003      	b.n	8008ed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d002      	beq.n	8008ee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	20010610 	.word	0x20010610
 8008ef8:	20010618 	.word	0x20010618

08008efc <__errno>:
 8008efc:	4b01      	ldr	r3, [pc, #4]	; (8008f04 <__errno+0x8>)
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20000010 	.word	0x20000010

08008f08 <std>:
 8008f08:	2300      	movs	r3, #0
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f16:	6083      	str	r3, [r0, #8]
 8008f18:	8181      	strh	r1, [r0, #12]
 8008f1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f1c:	81c2      	strh	r2, [r0, #14]
 8008f1e:	6183      	str	r3, [r0, #24]
 8008f20:	4619      	mov	r1, r3
 8008f22:	2208      	movs	r2, #8
 8008f24:	305c      	adds	r0, #92	; 0x5c
 8008f26:	f000 f939 	bl	800919c <memset>
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <std+0x38>)
 8008f2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <std+0x3c>)
 8008f30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f32:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <std+0x40>)
 8008f34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <std+0x44>)
 8008f38:	6224      	str	r4, [r4, #32]
 8008f3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008f3c:	bd10      	pop	{r4, pc}
 8008f3e:	bf00      	nop
 8008f40:	08009d95 	.word	0x08009d95
 8008f44:	08009db7 	.word	0x08009db7
 8008f48:	08009def 	.word	0x08009def
 8008f4c:	08009e13 	.word	0x08009e13

08008f50 <_cleanup_r>:
 8008f50:	4901      	ldr	r1, [pc, #4]	; (8008f58 <_cleanup_r+0x8>)
 8008f52:	f000 b8af 	b.w	80090b4 <_fwalk_reent>
 8008f56:	bf00      	nop
 8008f58:	0800ad09 	.word	0x0800ad09

08008f5c <__sfmoreglue>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	1e4a      	subs	r2, r1, #1
 8008f60:	2568      	movs	r5, #104	; 0x68
 8008f62:	4355      	muls	r5, r2
 8008f64:	460e      	mov	r6, r1
 8008f66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f6a:	f000 f96f 	bl	800924c <_malloc_r>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	b140      	cbz	r0, 8008f84 <__sfmoreglue+0x28>
 8008f72:	2100      	movs	r1, #0
 8008f74:	e9c0 1600 	strd	r1, r6, [r0]
 8008f78:	300c      	adds	r0, #12
 8008f7a:	60a0      	str	r0, [r4, #8]
 8008f7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f80:	f000 f90c 	bl	800919c <memset>
 8008f84:	4620      	mov	r0, r4
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <__sfp_lock_acquire>:
 8008f88:	4801      	ldr	r0, [pc, #4]	; (8008f90 <__sfp_lock_acquire+0x8>)
 8008f8a:	f000 b8d8 	b.w	800913e <__retarget_lock_acquire_recursive>
 8008f8e:	bf00      	nop
 8008f90:	20010880 	.word	0x20010880

08008f94 <__sfp_lock_release>:
 8008f94:	4801      	ldr	r0, [pc, #4]	; (8008f9c <__sfp_lock_release+0x8>)
 8008f96:	f000 b8d3 	b.w	8009140 <__retarget_lock_release_recursive>
 8008f9a:	bf00      	nop
 8008f9c:	20010880 	.word	0x20010880

08008fa0 <__sinit_lock_acquire>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__sinit_lock_acquire+0x8>)
 8008fa2:	f000 b8cc 	b.w	800913e <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	2001087b 	.word	0x2001087b

08008fac <__sinit_lock_release>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__sinit_lock_release+0x8>)
 8008fae:	f000 b8c7 	b.w	8009140 <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	2001087b 	.word	0x2001087b

08008fb8 <__sinit>:
 8008fb8:	b510      	push	{r4, lr}
 8008fba:	4604      	mov	r4, r0
 8008fbc:	f7ff fff0 	bl	8008fa0 <__sinit_lock_acquire>
 8008fc0:	69a3      	ldr	r3, [r4, #24]
 8008fc2:	b11b      	cbz	r3, 8008fcc <__sinit+0x14>
 8008fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fc8:	f7ff bff0 	b.w	8008fac <__sinit_lock_release>
 8008fcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008fd0:	6523      	str	r3, [r4, #80]	; 0x50
 8008fd2:	4b13      	ldr	r3, [pc, #76]	; (8009020 <__sinit+0x68>)
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <__sinit+0x6c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	bf04      	itt	eq
 8008fde:	2301      	moveq	r3, #1
 8008fe0:	61a3      	streq	r3, [r4, #24]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 f820 	bl	8009028 <__sfp>
 8008fe8:	6060      	str	r0, [r4, #4]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 f81c 	bl	8009028 <__sfp>
 8008ff0:	60a0      	str	r0, [r4, #8]
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 f818 	bl	8009028 <__sfp>
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	60e0      	str	r0, [r4, #12]
 8008ffc:	2104      	movs	r1, #4
 8008ffe:	6860      	ldr	r0, [r4, #4]
 8009000:	f7ff ff82 	bl	8008f08 <std>
 8009004:	68a0      	ldr	r0, [r4, #8]
 8009006:	2201      	movs	r2, #1
 8009008:	2109      	movs	r1, #9
 800900a:	f7ff ff7d 	bl	8008f08 <std>
 800900e:	68e0      	ldr	r0, [r4, #12]
 8009010:	2202      	movs	r2, #2
 8009012:	2112      	movs	r1, #18
 8009014:	f7ff ff78 	bl	8008f08 <std>
 8009018:	2301      	movs	r3, #1
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	e7d2      	b.n	8008fc4 <__sinit+0xc>
 800901e:	bf00      	nop
 8009020:	0800be54 	.word	0x0800be54
 8009024:	08008f51 	.word	0x08008f51

08009028 <__sfp>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	4607      	mov	r7, r0
 800902c:	f7ff ffac 	bl	8008f88 <__sfp_lock_acquire>
 8009030:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <__sfp+0x84>)
 8009032:	681e      	ldr	r6, [r3, #0]
 8009034:	69b3      	ldr	r3, [r6, #24]
 8009036:	b913      	cbnz	r3, 800903e <__sfp+0x16>
 8009038:	4630      	mov	r0, r6
 800903a:	f7ff ffbd 	bl	8008fb8 <__sinit>
 800903e:	3648      	adds	r6, #72	; 0x48
 8009040:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009044:	3b01      	subs	r3, #1
 8009046:	d503      	bpl.n	8009050 <__sfp+0x28>
 8009048:	6833      	ldr	r3, [r6, #0]
 800904a:	b30b      	cbz	r3, 8009090 <__sfp+0x68>
 800904c:	6836      	ldr	r6, [r6, #0]
 800904e:	e7f7      	b.n	8009040 <__sfp+0x18>
 8009050:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009054:	b9d5      	cbnz	r5, 800908c <__sfp+0x64>
 8009056:	4b16      	ldr	r3, [pc, #88]	; (80090b0 <__sfp+0x88>)
 8009058:	60e3      	str	r3, [r4, #12]
 800905a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800905e:	6665      	str	r5, [r4, #100]	; 0x64
 8009060:	f000 f86c 	bl	800913c <__retarget_lock_init_recursive>
 8009064:	f7ff ff96 	bl	8008f94 <__sfp_lock_release>
 8009068:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800906c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009070:	6025      	str	r5, [r4, #0]
 8009072:	61a5      	str	r5, [r4, #24]
 8009074:	2208      	movs	r2, #8
 8009076:	4629      	mov	r1, r5
 8009078:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800907c:	f000 f88e 	bl	800919c <memset>
 8009080:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009084:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009088:	4620      	mov	r0, r4
 800908a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800908c:	3468      	adds	r4, #104	; 0x68
 800908e:	e7d9      	b.n	8009044 <__sfp+0x1c>
 8009090:	2104      	movs	r1, #4
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff ff62 	bl	8008f5c <__sfmoreglue>
 8009098:	4604      	mov	r4, r0
 800909a:	6030      	str	r0, [r6, #0]
 800909c:	2800      	cmp	r0, #0
 800909e:	d1d5      	bne.n	800904c <__sfp+0x24>
 80090a0:	f7ff ff78 	bl	8008f94 <__sfp_lock_release>
 80090a4:	230c      	movs	r3, #12
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	e7ee      	b.n	8009088 <__sfp+0x60>
 80090aa:	bf00      	nop
 80090ac:	0800be54 	.word	0x0800be54
 80090b0:	ffff0001 	.word	0xffff0001

080090b4 <_fwalk_reent>:
 80090b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090b8:	4606      	mov	r6, r0
 80090ba:	4688      	mov	r8, r1
 80090bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090c0:	2700      	movs	r7, #0
 80090c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090c6:	f1b9 0901 	subs.w	r9, r9, #1
 80090ca:	d505      	bpl.n	80090d8 <_fwalk_reent+0x24>
 80090cc:	6824      	ldr	r4, [r4, #0]
 80090ce:	2c00      	cmp	r4, #0
 80090d0:	d1f7      	bne.n	80090c2 <_fwalk_reent+0xe>
 80090d2:	4638      	mov	r0, r7
 80090d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d8:	89ab      	ldrh	r3, [r5, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d907      	bls.n	80090ee <_fwalk_reent+0x3a>
 80090de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090e2:	3301      	adds	r3, #1
 80090e4:	d003      	beq.n	80090ee <_fwalk_reent+0x3a>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4630      	mov	r0, r6
 80090ea:	47c0      	blx	r8
 80090ec:	4307      	orrs	r7, r0
 80090ee:	3568      	adds	r5, #104	; 0x68
 80090f0:	e7e9      	b.n	80090c6 <_fwalk_reent+0x12>
	...

080090f4 <__libc_init_array>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4d0d      	ldr	r5, [pc, #52]	; (800912c <__libc_init_array+0x38>)
 80090f8:	4c0d      	ldr	r4, [pc, #52]	; (8009130 <__libc_init_array+0x3c>)
 80090fa:	1b64      	subs	r4, r4, r5
 80090fc:	10a4      	asrs	r4, r4, #2
 80090fe:	2600      	movs	r6, #0
 8009100:	42a6      	cmp	r6, r4
 8009102:	d109      	bne.n	8009118 <__libc_init_array+0x24>
 8009104:	4d0b      	ldr	r5, [pc, #44]	; (8009134 <__libc_init_array+0x40>)
 8009106:	4c0c      	ldr	r4, [pc, #48]	; (8009138 <__libc_init_array+0x44>)
 8009108:	f002 fc74 	bl	800b9f4 <_init>
 800910c:	1b64      	subs	r4, r4, r5
 800910e:	10a4      	asrs	r4, r4, #2
 8009110:	2600      	movs	r6, #0
 8009112:	42a6      	cmp	r6, r4
 8009114:	d105      	bne.n	8009122 <__libc_init_array+0x2e>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	f855 3b04 	ldr.w	r3, [r5], #4
 800911c:	4798      	blx	r3
 800911e:	3601      	adds	r6, #1
 8009120:	e7ee      	b.n	8009100 <__libc_init_array+0xc>
 8009122:	f855 3b04 	ldr.w	r3, [r5], #4
 8009126:	4798      	blx	r3
 8009128:	3601      	adds	r6, #1
 800912a:	e7f2      	b.n	8009112 <__libc_init_array+0x1e>
 800912c:	0800c1dc 	.word	0x0800c1dc
 8009130:	0800c1dc 	.word	0x0800c1dc
 8009134:	0800c1dc 	.word	0x0800c1dc
 8009138:	0800c1e0 	.word	0x0800c1e0

0800913c <__retarget_lock_init_recursive>:
 800913c:	4770      	bx	lr

0800913e <__retarget_lock_acquire_recursive>:
 800913e:	4770      	bx	lr

08009140 <__retarget_lock_release_recursive>:
 8009140:	4770      	bx	lr
	...

08009144 <malloc>:
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <malloc+0xc>)
 8009146:	4601      	mov	r1, r0
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f000 b87f 	b.w	800924c <_malloc_r>
 800914e:	bf00      	nop
 8009150:	20000010 	.word	0x20000010

08009154 <free>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <free+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f000 b827 	b.w	80091ac <_free_r>
 800915e:	bf00      	nop
 8009160:	20000010 	.word	0x20000010

08009164 <memcmp>:
 8009164:	b530      	push	{r4, r5, lr}
 8009166:	3901      	subs	r1, #1
 8009168:	2400      	movs	r4, #0
 800916a:	42a2      	cmp	r2, r4
 800916c:	d101      	bne.n	8009172 <memcmp+0xe>
 800916e:	2000      	movs	r0, #0
 8009170:	e005      	b.n	800917e <memcmp+0x1a>
 8009172:	5d03      	ldrb	r3, [r0, r4]
 8009174:	3401      	adds	r4, #1
 8009176:	5d0d      	ldrb	r5, [r1, r4]
 8009178:	42ab      	cmp	r3, r5
 800917a:	d0f6      	beq.n	800916a <memcmp+0x6>
 800917c:	1b58      	subs	r0, r3, r5
 800917e:	bd30      	pop	{r4, r5, pc}

08009180 <memcpy>:
 8009180:	440a      	add	r2, r1
 8009182:	4291      	cmp	r1, r2
 8009184:	f100 33ff 	add.w	r3, r0, #4294967295
 8009188:	d100      	bne.n	800918c <memcpy+0xc>
 800918a:	4770      	bx	lr
 800918c:	b510      	push	{r4, lr}
 800918e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009196:	4291      	cmp	r1, r2
 8009198:	d1f9      	bne.n	800918e <memcpy+0xe>
 800919a:	bd10      	pop	{r4, pc}

0800919c <memset>:
 800919c:	4402      	add	r2, r0
 800919e:	4603      	mov	r3, r0
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d100      	bne.n	80091a6 <memset+0xa>
 80091a4:	4770      	bx	lr
 80091a6:	f803 1b01 	strb.w	r1, [r3], #1
 80091aa:	e7f9      	b.n	80091a0 <memset+0x4>

080091ac <_free_r>:
 80091ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ae:	2900      	cmp	r1, #0
 80091b0:	d048      	beq.n	8009244 <_free_r+0x98>
 80091b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b6:	9001      	str	r0, [sp, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f1a1 0404 	sub.w	r4, r1, #4
 80091be:	bfb8      	it	lt
 80091c0:	18e4      	addlt	r4, r4, r3
 80091c2:	f001 fe57 	bl	800ae74 <__malloc_lock>
 80091c6:	4a20      	ldr	r2, [pc, #128]	; (8009248 <_free_r+0x9c>)
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	6813      	ldr	r3, [r2, #0]
 80091cc:	4615      	mov	r5, r2
 80091ce:	b933      	cbnz	r3, 80091de <_free_r+0x32>
 80091d0:	6063      	str	r3, [r4, #4]
 80091d2:	6014      	str	r4, [r2, #0]
 80091d4:	b003      	add	sp, #12
 80091d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091da:	f001 be51 	b.w	800ae80 <__malloc_unlock>
 80091de:	42a3      	cmp	r3, r4
 80091e0:	d90b      	bls.n	80091fa <_free_r+0x4e>
 80091e2:	6821      	ldr	r1, [r4, #0]
 80091e4:	1862      	adds	r2, r4, r1
 80091e6:	4293      	cmp	r3, r2
 80091e8:	bf04      	itt	eq
 80091ea:	681a      	ldreq	r2, [r3, #0]
 80091ec:	685b      	ldreq	r3, [r3, #4]
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	bf04      	itt	eq
 80091f2:	1852      	addeq	r2, r2, r1
 80091f4:	6022      	streq	r2, [r4, #0]
 80091f6:	602c      	str	r4, [r5, #0]
 80091f8:	e7ec      	b.n	80091d4 <_free_r+0x28>
 80091fa:	461a      	mov	r2, r3
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	b10b      	cbz	r3, 8009204 <_free_r+0x58>
 8009200:	42a3      	cmp	r3, r4
 8009202:	d9fa      	bls.n	80091fa <_free_r+0x4e>
 8009204:	6811      	ldr	r1, [r2, #0]
 8009206:	1855      	adds	r5, r2, r1
 8009208:	42a5      	cmp	r5, r4
 800920a:	d10b      	bne.n	8009224 <_free_r+0x78>
 800920c:	6824      	ldr	r4, [r4, #0]
 800920e:	4421      	add	r1, r4
 8009210:	1854      	adds	r4, r2, r1
 8009212:	42a3      	cmp	r3, r4
 8009214:	6011      	str	r1, [r2, #0]
 8009216:	d1dd      	bne.n	80091d4 <_free_r+0x28>
 8009218:	681c      	ldr	r4, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	6053      	str	r3, [r2, #4]
 800921e:	4421      	add	r1, r4
 8009220:	6011      	str	r1, [r2, #0]
 8009222:	e7d7      	b.n	80091d4 <_free_r+0x28>
 8009224:	d902      	bls.n	800922c <_free_r+0x80>
 8009226:	230c      	movs	r3, #12
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	e7d3      	b.n	80091d4 <_free_r+0x28>
 800922c:	6825      	ldr	r5, [r4, #0]
 800922e:	1961      	adds	r1, r4, r5
 8009230:	428b      	cmp	r3, r1
 8009232:	bf04      	itt	eq
 8009234:	6819      	ldreq	r1, [r3, #0]
 8009236:	685b      	ldreq	r3, [r3, #4]
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	bf04      	itt	eq
 800923c:	1949      	addeq	r1, r1, r5
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	6054      	str	r4, [r2, #4]
 8009242:	e7c7      	b.n	80091d4 <_free_r+0x28>
 8009244:	b003      	add	sp, #12
 8009246:	bd30      	pop	{r4, r5, pc}
 8009248:	20010628 	.word	0x20010628

0800924c <_malloc_r>:
 800924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800924e:	1ccd      	adds	r5, r1, #3
 8009250:	f025 0503 	bic.w	r5, r5, #3
 8009254:	3508      	adds	r5, #8
 8009256:	2d0c      	cmp	r5, #12
 8009258:	bf38      	it	cc
 800925a:	250c      	movcc	r5, #12
 800925c:	2d00      	cmp	r5, #0
 800925e:	4606      	mov	r6, r0
 8009260:	db01      	blt.n	8009266 <_malloc_r+0x1a>
 8009262:	42a9      	cmp	r1, r5
 8009264:	d903      	bls.n	800926e <_malloc_r+0x22>
 8009266:	230c      	movs	r3, #12
 8009268:	6033      	str	r3, [r6, #0]
 800926a:	2000      	movs	r0, #0
 800926c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800926e:	f001 fe01 	bl	800ae74 <__malloc_lock>
 8009272:	4921      	ldr	r1, [pc, #132]	; (80092f8 <_malloc_r+0xac>)
 8009274:	680a      	ldr	r2, [r1, #0]
 8009276:	4614      	mov	r4, r2
 8009278:	b99c      	cbnz	r4, 80092a2 <_malloc_r+0x56>
 800927a:	4f20      	ldr	r7, [pc, #128]	; (80092fc <_malloc_r+0xb0>)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	b923      	cbnz	r3, 800928a <_malloc_r+0x3e>
 8009280:	4621      	mov	r1, r4
 8009282:	4630      	mov	r0, r6
 8009284:	f000 fd76 	bl	8009d74 <_sbrk_r>
 8009288:	6038      	str	r0, [r7, #0]
 800928a:	4629      	mov	r1, r5
 800928c:	4630      	mov	r0, r6
 800928e:	f000 fd71 	bl	8009d74 <_sbrk_r>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d123      	bne.n	80092de <_malloc_r+0x92>
 8009296:	230c      	movs	r3, #12
 8009298:	6033      	str	r3, [r6, #0]
 800929a:	4630      	mov	r0, r6
 800929c:	f001 fdf0 	bl	800ae80 <__malloc_unlock>
 80092a0:	e7e3      	b.n	800926a <_malloc_r+0x1e>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	1b5b      	subs	r3, r3, r5
 80092a6:	d417      	bmi.n	80092d8 <_malloc_r+0x8c>
 80092a8:	2b0b      	cmp	r3, #11
 80092aa:	d903      	bls.n	80092b4 <_malloc_r+0x68>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	441c      	add	r4, r3
 80092b0:	6025      	str	r5, [r4, #0]
 80092b2:	e004      	b.n	80092be <_malloc_r+0x72>
 80092b4:	6863      	ldr	r3, [r4, #4]
 80092b6:	42a2      	cmp	r2, r4
 80092b8:	bf0c      	ite	eq
 80092ba:	600b      	streq	r3, [r1, #0]
 80092bc:	6053      	strne	r3, [r2, #4]
 80092be:	4630      	mov	r0, r6
 80092c0:	f001 fdde 	bl	800ae80 <__malloc_unlock>
 80092c4:	f104 000b 	add.w	r0, r4, #11
 80092c8:	1d23      	adds	r3, r4, #4
 80092ca:	f020 0007 	bic.w	r0, r0, #7
 80092ce:	1ac2      	subs	r2, r0, r3
 80092d0:	d0cc      	beq.n	800926c <_malloc_r+0x20>
 80092d2:	1a1b      	subs	r3, r3, r0
 80092d4:	50a3      	str	r3, [r4, r2]
 80092d6:	e7c9      	b.n	800926c <_malloc_r+0x20>
 80092d8:	4622      	mov	r2, r4
 80092da:	6864      	ldr	r4, [r4, #4]
 80092dc:	e7cc      	b.n	8009278 <_malloc_r+0x2c>
 80092de:	1cc4      	adds	r4, r0, #3
 80092e0:	f024 0403 	bic.w	r4, r4, #3
 80092e4:	42a0      	cmp	r0, r4
 80092e6:	d0e3      	beq.n	80092b0 <_malloc_r+0x64>
 80092e8:	1a21      	subs	r1, r4, r0
 80092ea:	4630      	mov	r0, r6
 80092ec:	f000 fd42 	bl	8009d74 <_sbrk_r>
 80092f0:	3001      	adds	r0, #1
 80092f2:	d1dd      	bne.n	80092b0 <_malloc_r+0x64>
 80092f4:	e7cf      	b.n	8009296 <_malloc_r+0x4a>
 80092f6:	bf00      	nop
 80092f8:	20010628 	.word	0x20010628
 80092fc:	2001062c 	.word	0x2001062c

08009300 <__cvt>:
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009302:	ed2d 8b02 	vpush	{d8}
 8009306:	eeb0 8b40 	vmov.f64	d8, d0
 800930a:	b085      	sub	sp, #20
 800930c:	4617      	mov	r7, r2
 800930e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009310:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009312:	ee18 2a90 	vmov	r2, s17
 8009316:	f025 0520 	bic.w	r5, r5, #32
 800931a:	2a00      	cmp	r2, #0
 800931c:	bfb6      	itet	lt
 800931e:	222d      	movlt	r2, #45	; 0x2d
 8009320:	2200      	movge	r2, #0
 8009322:	eeb1 8b40 	vneglt.f64	d8, d0
 8009326:	2d46      	cmp	r5, #70	; 0x46
 8009328:	460c      	mov	r4, r1
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	d004      	beq.n	8009338 <__cvt+0x38>
 800932e:	2d45      	cmp	r5, #69	; 0x45
 8009330:	d100      	bne.n	8009334 <__cvt+0x34>
 8009332:	3401      	adds	r4, #1
 8009334:	2102      	movs	r1, #2
 8009336:	e000      	b.n	800933a <__cvt+0x3a>
 8009338:	2103      	movs	r1, #3
 800933a:	ab03      	add	r3, sp, #12
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	ab02      	add	r3, sp, #8
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	4622      	mov	r2, r4
 8009344:	4633      	mov	r3, r6
 8009346:	eeb0 0b48 	vmov.f64	d0, d8
 800934a:	f000 fed5 	bl	800a0f8 <_dtoa_r>
 800934e:	2d47      	cmp	r5, #71	; 0x47
 8009350:	d109      	bne.n	8009366 <__cvt+0x66>
 8009352:	07fb      	lsls	r3, r7, #31
 8009354:	d407      	bmi.n	8009366 <__cvt+0x66>
 8009356:	9b03      	ldr	r3, [sp, #12]
 8009358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800935a:	1a1b      	subs	r3, r3, r0
 800935c:	6013      	str	r3, [r2, #0]
 800935e:	b005      	add	sp, #20
 8009360:	ecbd 8b02 	vpop	{d8}
 8009364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009366:	2d46      	cmp	r5, #70	; 0x46
 8009368:	eb00 0204 	add.w	r2, r0, r4
 800936c:	d10c      	bne.n	8009388 <__cvt+0x88>
 800936e:	7803      	ldrb	r3, [r0, #0]
 8009370:	2b30      	cmp	r3, #48	; 0x30
 8009372:	d107      	bne.n	8009384 <__cvt+0x84>
 8009374:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937c:	bf1c      	itt	ne
 800937e:	f1c4 0401 	rsbne	r4, r4, #1
 8009382:	6034      	strne	r4, [r6, #0]
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	441a      	add	r2, r3
 8009388:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800938c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009390:	bf08      	it	eq
 8009392:	9203      	streq	r2, [sp, #12]
 8009394:	2130      	movs	r1, #48	; 0x30
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	4293      	cmp	r3, r2
 800939a:	d2dc      	bcs.n	8009356 <__cvt+0x56>
 800939c:	1c5c      	adds	r4, r3, #1
 800939e:	9403      	str	r4, [sp, #12]
 80093a0:	7019      	strb	r1, [r3, #0]
 80093a2:	e7f8      	b.n	8009396 <__cvt+0x96>

080093a4 <__exponent>:
 80093a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093a6:	4603      	mov	r3, r0
 80093a8:	2900      	cmp	r1, #0
 80093aa:	bfb8      	it	lt
 80093ac:	4249      	neglt	r1, r1
 80093ae:	f803 2b02 	strb.w	r2, [r3], #2
 80093b2:	bfb4      	ite	lt
 80093b4:	222d      	movlt	r2, #45	; 0x2d
 80093b6:	222b      	movge	r2, #43	; 0x2b
 80093b8:	2909      	cmp	r1, #9
 80093ba:	7042      	strb	r2, [r0, #1]
 80093bc:	dd2a      	ble.n	8009414 <__exponent+0x70>
 80093be:	f10d 0407 	add.w	r4, sp, #7
 80093c2:	46a4      	mov	ip, r4
 80093c4:	270a      	movs	r7, #10
 80093c6:	46a6      	mov	lr, r4
 80093c8:	460a      	mov	r2, r1
 80093ca:	fb91 f6f7 	sdiv	r6, r1, r7
 80093ce:	fb07 1516 	mls	r5, r7, r6, r1
 80093d2:	3530      	adds	r5, #48	; 0x30
 80093d4:	2a63      	cmp	r2, #99	; 0x63
 80093d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80093da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093de:	4631      	mov	r1, r6
 80093e0:	dcf1      	bgt.n	80093c6 <__exponent+0x22>
 80093e2:	3130      	adds	r1, #48	; 0x30
 80093e4:	f1ae 0502 	sub.w	r5, lr, #2
 80093e8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093ec:	1c44      	adds	r4, r0, #1
 80093ee:	4629      	mov	r1, r5
 80093f0:	4561      	cmp	r1, ip
 80093f2:	d30a      	bcc.n	800940a <__exponent+0x66>
 80093f4:	f10d 0209 	add.w	r2, sp, #9
 80093f8:	eba2 020e 	sub.w	r2, r2, lr
 80093fc:	4565      	cmp	r5, ip
 80093fe:	bf88      	it	hi
 8009400:	2200      	movhi	r2, #0
 8009402:	4413      	add	r3, r2
 8009404:	1a18      	subs	r0, r3, r0
 8009406:	b003      	add	sp, #12
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800940e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009412:	e7ed      	b.n	80093f0 <__exponent+0x4c>
 8009414:	2330      	movs	r3, #48	; 0x30
 8009416:	3130      	adds	r1, #48	; 0x30
 8009418:	7083      	strb	r3, [r0, #2]
 800941a:	70c1      	strb	r1, [r0, #3]
 800941c:	1d03      	adds	r3, r0, #4
 800941e:	e7f1      	b.n	8009404 <__exponent+0x60>

08009420 <_printf_float>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b08b      	sub	sp, #44	; 0x2c
 8009426:	460c      	mov	r4, r1
 8009428:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800942c:	4616      	mov	r6, r2
 800942e:	461f      	mov	r7, r3
 8009430:	4605      	mov	r5, r0
 8009432:	f001 fca5 	bl	800ad80 <_localeconv_r>
 8009436:	f8d0 b000 	ldr.w	fp, [r0]
 800943a:	4658      	mov	r0, fp
 800943c:	f7f6 ff00 	bl	8000240 <strlen>
 8009440:	2300      	movs	r3, #0
 8009442:	9308      	str	r3, [sp, #32]
 8009444:	f8d8 3000 	ldr.w	r3, [r8]
 8009448:	f894 9018 	ldrb.w	r9, [r4, #24]
 800944c:	6822      	ldr	r2, [r4, #0]
 800944e:	3307      	adds	r3, #7
 8009450:	f023 0307 	bic.w	r3, r3, #7
 8009454:	f103 0108 	add.w	r1, r3, #8
 8009458:	f8c8 1000 	str.w	r1, [r8]
 800945c:	4682      	mov	sl, r0
 800945e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009462:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009466:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80096c8 <_printf_float+0x2a8>
 800946a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800946e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009472:	eeb4 6b47 	vcmp.f64	d6, d7
 8009476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947a:	dd24      	ble.n	80094c6 <_printf_float+0xa6>
 800947c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009484:	d502      	bpl.n	800948c <_printf_float+0x6c>
 8009486:	232d      	movs	r3, #45	; 0x2d
 8009488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948c:	4b90      	ldr	r3, [pc, #576]	; (80096d0 <_printf_float+0x2b0>)
 800948e:	4891      	ldr	r0, [pc, #580]	; (80096d4 <_printf_float+0x2b4>)
 8009490:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009494:	bf94      	ite	ls
 8009496:	4698      	movls	r8, r3
 8009498:	4680      	movhi	r8, r0
 800949a:	2303      	movs	r3, #3
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	f022 0204 	bic.w	r2, r2, #4
 80094a2:	2300      	movs	r3, #0
 80094a4:	6022      	str	r2, [r4, #0]
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	9700      	str	r7, [sp, #0]
 80094aa:	4633      	mov	r3, r6
 80094ac:	aa09      	add	r2, sp, #36	; 0x24
 80094ae:	4621      	mov	r1, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	f000 f9d3 	bl	800985c <_printf_common>
 80094b6:	3001      	adds	r0, #1
 80094b8:	f040 808a 	bne.w	80095d0 <_printf_float+0x1b0>
 80094bc:	f04f 30ff 	mov.w	r0, #4294967295
 80094c0:	b00b      	add	sp, #44	; 0x2c
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	eeb4 0b40 	vcmp.f64	d0, d0
 80094ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ce:	d709      	bvc.n	80094e4 <_printf_float+0xc4>
 80094d0:	ee10 3a90 	vmov	r3, s1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfbc      	itt	lt
 80094d8:	232d      	movlt	r3, #45	; 0x2d
 80094da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094de:	487e      	ldr	r0, [pc, #504]	; (80096d8 <_printf_float+0x2b8>)
 80094e0:	4b7e      	ldr	r3, [pc, #504]	; (80096dc <_printf_float+0x2bc>)
 80094e2:	e7d5      	b.n	8009490 <_printf_float+0x70>
 80094e4:	6863      	ldr	r3, [r4, #4]
 80094e6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80094ea:	9104      	str	r1, [sp, #16]
 80094ec:	1c59      	adds	r1, r3, #1
 80094ee:	d13c      	bne.n	800956a <_printf_float+0x14a>
 80094f0:	2306      	movs	r3, #6
 80094f2:	6063      	str	r3, [r4, #4]
 80094f4:	2300      	movs	r3, #0
 80094f6:	9303      	str	r3, [sp, #12]
 80094f8:	ab08      	add	r3, sp, #32
 80094fa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80094fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009502:	ab07      	add	r3, sp, #28
 8009504:	6861      	ldr	r1, [r4, #4]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	6022      	str	r2, [r4, #0]
 800950a:	f10d 031b 	add.w	r3, sp, #27
 800950e:	4628      	mov	r0, r5
 8009510:	f7ff fef6 	bl	8009300 <__cvt>
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	9907      	ldr	r1, [sp, #28]
 8009518:	2b47      	cmp	r3, #71	; 0x47
 800951a:	4680      	mov	r8, r0
 800951c:	d108      	bne.n	8009530 <_printf_float+0x110>
 800951e:	1cc8      	adds	r0, r1, #3
 8009520:	db02      	blt.n	8009528 <_printf_float+0x108>
 8009522:	6863      	ldr	r3, [r4, #4]
 8009524:	4299      	cmp	r1, r3
 8009526:	dd41      	ble.n	80095ac <_printf_float+0x18c>
 8009528:	f1a9 0902 	sub.w	r9, r9, #2
 800952c:	fa5f f989 	uxtb.w	r9, r9
 8009530:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009534:	d820      	bhi.n	8009578 <_printf_float+0x158>
 8009536:	3901      	subs	r1, #1
 8009538:	464a      	mov	r2, r9
 800953a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800953e:	9107      	str	r1, [sp, #28]
 8009540:	f7ff ff30 	bl	80093a4 <__exponent>
 8009544:	9a08      	ldr	r2, [sp, #32]
 8009546:	9004      	str	r0, [sp, #16]
 8009548:	1813      	adds	r3, r2, r0
 800954a:	2a01      	cmp	r2, #1
 800954c:	6123      	str	r3, [r4, #16]
 800954e:	dc02      	bgt.n	8009556 <_printf_float+0x136>
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	07d2      	lsls	r2, r2, #31
 8009554:	d501      	bpl.n	800955a <_printf_float+0x13a>
 8009556:	3301      	adds	r3, #1
 8009558:	6123      	str	r3, [r4, #16]
 800955a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d0a2      	beq.n	80094a8 <_printf_float+0x88>
 8009562:	232d      	movs	r3, #45	; 0x2d
 8009564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009568:	e79e      	b.n	80094a8 <_printf_float+0x88>
 800956a:	9904      	ldr	r1, [sp, #16]
 800956c:	2947      	cmp	r1, #71	; 0x47
 800956e:	d1c1      	bne.n	80094f4 <_printf_float+0xd4>
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1bf      	bne.n	80094f4 <_printf_float+0xd4>
 8009574:	2301      	movs	r3, #1
 8009576:	e7bc      	b.n	80094f2 <_printf_float+0xd2>
 8009578:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800957c:	d118      	bne.n	80095b0 <_printf_float+0x190>
 800957e:	2900      	cmp	r1, #0
 8009580:	6863      	ldr	r3, [r4, #4]
 8009582:	dd0b      	ble.n	800959c <_printf_float+0x17c>
 8009584:	6121      	str	r1, [r4, #16]
 8009586:	b913      	cbnz	r3, 800958e <_printf_float+0x16e>
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	07d0      	lsls	r0, r2, #31
 800958c:	d502      	bpl.n	8009594 <_printf_float+0x174>
 800958e:	3301      	adds	r3, #1
 8009590:	440b      	add	r3, r1
 8009592:	6123      	str	r3, [r4, #16]
 8009594:	2300      	movs	r3, #0
 8009596:	65a1      	str	r1, [r4, #88]	; 0x58
 8009598:	9304      	str	r3, [sp, #16]
 800959a:	e7de      	b.n	800955a <_printf_float+0x13a>
 800959c:	b913      	cbnz	r3, 80095a4 <_printf_float+0x184>
 800959e:	6822      	ldr	r2, [r4, #0]
 80095a0:	07d2      	lsls	r2, r2, #31
 80095a2:	d501      	bpl.n	80095a8 <_printf_float+0x188>
 80095a4:	3302      	adds	r3, #2
 80095a6:	e7f4      	b.n	8009592 <_printf_float+0x172>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e7f2      	b.n	8009592 <_printf_float+0x172>
 80095ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	4299      	cmp	r1, r3
 80095b4:	db05      	blt.n	80095c2 <_printf_float+0x1a2>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	6121      	str	r1, [r4, #16]
 80095ba:	07d8      	lsls	r0, r3, #31
 80095bc:	d5ea      	bpl.n	8009594 <_printf_float+0x174>
 80095be:	1c4b      	adds	r3, r1, #1
 80095c0:	e7e7      	b.n	8009592 <_printf_float+0x172>
 80095c2:	2900      	cmp	r1, #0
 80095c4:	bfd4      	ite	le
 80095c6:	f1c1 0202 	rsble	r2, r1, #2
 80095ca:	2201      	movgt	r2, #1
 80095cc:	4413      	add	r3, r2
 80095ce:	e7e0      	b.n	8009592 <_printf_float+0x172>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	055a      	lsls	r2, r3, #21
 80095d4:	d407      	bmi.n	80095e6 <_printf_float+0x1c6>
 80095d6:	6923      	ldr	r3, [r4, #16]
 80095d8:	4642      	mov	r2, r8
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	d12a      	bne.n	800963a <_printf_float+0x21a>
 80095e4:	e76a      	b.n	80094bc <_printf_float+0x9c>
 80095e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80095ea:	f240 80e2 	bls.w	80097b2 <_printf_float+0x392>
 80095ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80095f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095fa:	d133      	bne.n	8009664 <_printf_float+0x244>
 80095fc:	4a38      	ldr	r2, [pc, #224]	; (80096e0 <_printf_float+0x2c0>)
 80095fe:	2301      	movs	r3, #1
 8009600:	4631      	mov	r1, r6
 8009602:	4628      	mov	r0, r5
 8009604:	47b8      	blx	r7
 8009606:	3001      	adds	r0, #1
 8009608:	f43f af58 	beq.w	80094bc <_printf_float+0x9c>
 800960c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009610:	429a      	cmp	r2, r3
 8009612:	db02      	blt.n	800961a <_printf_float+0x1fa>
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	07d8      	lsls	r0, r3, #31
 8009618:	d50f      	bpl.n	800963a <_printf_float+0x21a>
 800961a:	4653      	mov	r3, sl
 800961c:	465a      	mov	r2, fp
 800961e:	4631      	mov	r1, r6
 8009620:	4628      	mov	r0, r5
 8009622:	47b8      	blx	r7
 8009624:	3001      	adds	r0, #1
 8009626:	f43f af49 	beq.w	80094bc <_printf_float+0x9c>
 800962a:	f04f 0800 	mov.w	r8, #0
 800962e:	f104 091a 	add.w	r9, r4, #26
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	3b01      	subs	r3, #1
 8009636:	4543      	cmp	r3, r8
 8009638:	dc09      	bgt.n	800964e <_printf_float+0x22e>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	079b      	lsls	r3, r3, #30
 800963e:	f100 8108 	bmi.w	8009852 <_printf_float+0x432>
 8009642:	68e0      	ldr	r0, [r4, #12]
 8009644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009646:	4298      	cmp	r0, r3
 8009648:	bfb8      	it	lt
 800964a:	4618      	movlt	r0, r3
 800964c:	e738      	b.n	80094c0 <_printf_float+0xa0>
 800964e:	2301      	movs	r3, #1
 8009650:	464a      	mov	r2, r9
 8009652:	4631      	mov	r1, r6
 8009654:	4628      	mov	r0, r5
 8009656:	47b8      	blx	r7
 8009658:	3001      	adds	r0, #1
 800965a:	f43f af2f 	beq.w	80094bc <_printf_float+0x9c>
 800965e:	f108 0801 	add.w	r8, r8, #1
 8009662:	e7e6      	b.n	8009632 <_printf_float+0x212>
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	2b00      	cmp	r3, #0
 8009668:	dc3c      	bgt.n	80096e4 <_printf_float+0x2c4>
 800966a:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <_printf_float+0x2c0>)
 800966c:	2301      	movs	r3, #1
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f af21 	beq.w	80094bc <_printf_float+0x9c>
 800967a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800967e:	4313      	orrs	r3, r2
 8009680:	d102      	bne.n	8009688 <_printf_float+0x268>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	07d9      	lsls	r1, r3, #31
 8009686:	d5d8      	bpl.n	800963a <_printf_float+0x21a>
 8009688:	4653      	mov	r3, sl
 800968a:	465a      	mov	r2, fp
 800968c:	4631      	mov	r1, r6
 800968e:	4628      	mov	r0, r5
 8009690:	47b8      	blx	r7
 8009692:	3001      	adds	r0, #1
 8009694:	f43f af12 	beq.w	80094bc <_printf_float+0x9c>
 8009698:	f04f 0900 	mov.w	r9, #0
 800969c:	f104 0a1a 	add.w	sl, r4, #26
 80096a0:	9b07      	ldr	r3, [sp, #28]
 80096a2:	425b      	negs	r3, r3
 80096a4:	454b      	cmp	r3, r9
 80096a6:	dc01      	bgt.n	80096ac <_printf_float+0x28c>
 80096a8:	9b08      	ldr	r3, [sp, #32]
 80096aa:	e795      	b.n	80095d8 <_printf_float+0x1b8>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4652      	mov	r2, sl
 80096b0:	4631      	mov	r1, r6
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b8      	blx	r7
 80096b6:	3001      	adds	r0, #1
 80096b8:	f43f af00 	beq.w	80094bc <_printf_float+0x9c>
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e7ee      	b.n	80096a0 <_printf_float+0x280>
 80096c2:	bf00      	nop
 80096c4:	f3af 8000 	nop.w
 80096c8:	ffffffff 	.word	0xffffffff
 80096cc:	7fefffff 	.word	0x7fefffff
 80096d0:	0800be58 	.word	0x0800be58
 80096d4:	0800be5c 	.word	0x0800be5c
 80096d8:	0800be64 	.word	0x0800be64
 80096dc:	0800be60 	.word	0x0800be60
 80096e0:	0800be68 	.word	0x0800be68
 80096e4:	9a08      	ldr	r2, [sp, #32]
 80096e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096e8:	429a      	cmp	r2, r3
 80096ea:	bfa8      	it	ge
 80096ec:	461a      	movge	r2, r3
 80096ee:	2a00      	cmp	r2, #0
 80096f0:	4691      	mov	r9, r2
 80096f2:	dc38      	bgt.n	8009766 <_printf_float+0x346>
 80096f4:	2300      	movs	r3, #0
 80096f6:	9305      	str	r3, [sp, #20]
 80096f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096fc:	f104 021a 	add.w	r2, r4, #26
 8009700:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009702:	9905      	ldr	r1, [sp, #20]
 8009704:	9304      	str	r3, [sp, #16]
 8009706:	eba3 0309 	sub.w	r3, r3, r9
 800970a:	428b      	cmp	r3, r1
 800970c:	dc33      	bgt.n	8009776 <_printf_float+0x356>
 800970e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009712:	429a      	cmp	r2, r3
 8009714:	db3c      	blt.n	8009790 <_printf_float+0x370>
 8009716:	6823      	ldr	r3, [r4, #0]
 8009718:	07da      	lsls	r2, r3, #31
 800971a:	d439      	bmi.n	8009790 <_printf_float+0x370>
 800971c:	9a08      	ldr	r2, [sp, #32]
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	9907      	ldr	r1, [sp, #28]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	eba2 0901 	sub.w	r9, r2, r1
 8009728:	4599      	cmp	r9, r3
 800972a:	bfa8      	it	ge
 800972c:	4699      	movge	r9, r3
 800972e:	f1b9 0f00 	cmp.w	r9, #0
 8009732:	dc35      	bgt.n	80097a0 <_printf_float+0x380>
 8009734:	f04f 0800 	mov.w	r8, #0
 8009738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800973c:	f104 0a1a 	add.w	sl, r4, #26
 8009740:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	eba3 0309 	sub.w	r3, r3, r9
 800974a:	4543      	cmp	r3, r8
 800974c:	f77f af75 	ble.w	800963a <_printf_float+0x21a>
 8009750:	2301      	movs	r3, #1
 8009752:	4652      	mov	r2, sl
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	f43f aeae 	beq.w	80094bc <_printf_float+0x9c>
 8009760:	f108 0801 	add.w	r8, r8, #1
 8009764:	e7ec      	b.n	8009740 <_printf_float+0x320>
 8009766:	4613      	mov	r3, r2
 8009768:	4631      	mov	r1, r6
 800976a:	4642      	mov	r2, r8
 800976c:	4628      	mov	r0, r5
 800976e:	47b8      	blx	r7
 8009770:	3001      	adds	r0, #1
 8009772:	d1bf      	bne.n	80096f4 <_printf_float+0x2d4>
 8009774:	e6a2      	b.n	80094bc <_printf_float+0x9c>
 8009776:	2301      	movs	r3, #1
 8009778:	4631      	mov	r1, r6
 800977a:	4628      	mov	r0, r5
 800977c:	9204      	str	r2, [sp, #16]
 800977e:	47b8      	blx	r7
 8009780:	3001      	adds	r0, #1
 8009782:	f43f ae9b 	beq.w	80094bc <_printf_float+0x9c>
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	9a04      	ldr	r2, [sp, #16]
 800978a:	3301      	adds	r3, #1
 800978c:	9305      	str	r3, [sp, #20]
 800978e:	e7b7      	b.n	8009700 <_printf_float+0x2e0>
 8009790:	4653      	mov	r3, sl
 8009792:	465a      	mov	r2, fp
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	47b8      	blx	r7
 800979a:	3001      	adds	r0, #1
 800979c:	d1be      	bne.n	800971c <_printf_float+0x2fc>
 800979e:	e68d      	b.n	80094bc <_printf_float+0x9c>
 80097a0:	9a04      	ldr	r2, [sp, #16]
 80097a2:	464b      	mov	r3, r9
 80097a4:	4442      	add	r2, r8
 80097a6:	4631      	mov	r1, r6
 80097a8:	4628      	mov	r0, r5
 80097aa:	47b8      	blx	r7
 80097ac:	3001      	adds	r0, #1
 80097ae:	d1c1      	bne.n	8009734 <_printf_float+0x314>
 80097b0:	e684      	b.n	80094bc <_printf_float+0x9c>
 80097b2:	9a08      	ldr	r2, [sp, #32]
 80097b4:	2a01      	cmp	r2, #1
 80097b6:	dc01      	bgt.n	80097bc <_printf_float+0x39c>
 80097b8:	07db      	lsls	r3, r3, #31
 80097ba:	d537      	bpl.n	800982c <_printf_float+0x40c>
 80097bc:	2301      	movs	r3, #1
 80097be:	4642      	mov	r2, r8
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b8      	blx	r7
 80097c6:	3001      	adds	r0, #1
 80097c8:	f43f ae78 	beq.w	80094bc <_printf_float+0x9c>
 80097cc:	4653      	mov	r3, sl
 80097ce:	465a      	mov	r2, fp
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f ae70 	beq.w	80094bc <_printf_float+0x9c>
 80097dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80097e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e8:	d01b      	beq.n	8009822 <_printf_float+0x402>
 80097ea:	9b08      	ldr	r3, [sp, #32]
 80097ec:	f108 0201 	add.w	r2, r8, #1
 80097f0:	3b01      	subs	r3, #1
 80097f2:	4631      	mov	r1, r6
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b8      	blx	r7
 80097f8:	3001      	adds	r0, #1
 80097fa:	d10e      	bne.n	800981a <_printf_float+0x3fa>
 80097fc:	e65e      	b.n	80094bc <_printf_float+0x9c>
 80097fe:	2301      	movs	r3, #1
 8009800:	464a      	mov	r2, r9
 8009802:	4631      	mov	r1, r6
 8009804:	4628      	mov	r0, r5
 8009806:	47b8      	blx	r7
 8009808:	3001      	adds	r0, #1
 800980a:	f43f ae57 	beq.w	80094bc <_printf_float+0x9c>
 800980e:	f108 0801 	add.w	r8, r8, #1
 8009812:	9b08      	ldr	r3, [sp, #32]
 8009814:	3b01      	subs	r3, #1
 8009816:	4543      	cmp	r3, r8
 8009818:	dcf1      	bgt.n	80097fe <_printf_float+0x3de>
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009820:	e6db      	b.n	80095da <_printf_float+0x1ba>
 8009822:	f04f 0800 	mov.w	r8, #0
 8009826:	f104 091a 	add.w	r9, r4, #26
 800982a:	e7f2      	b.n	8009812 <_printf_float+0x3f2>
 800982c:	2301      	movs	r3, #1
 800982e:	4642      	mov	r2, r8
 8009830:	e7df      	b.n	80097f2 <_printf_float+0x3d2>
 8009832:	2301      	movs	r3, #1
 8009834:	464a      	mov	r2, r9
 8009836:	4631      	mov	r1, r6
 8009838:	4628      	mov	r0, r5
 800983a:	47b8      	blx	r7
 800983c:	3001      	adds	r0, #1
 800983e:	f43f ae3d 	beq.w	80094bc <_printf_float+0x9c>
 8009842:	f108 0801 	add.w	r8, r8, #1
 8009846:	68e3      	ldr	r3, [r4, #12]
 8009848:	9909      	ldr	r1, [sp, #36]	; 0x24
 800984a:	1a5b      	subs	r3, r3, r1
 800984c:	4543      	cmp	r3, r8
 800984e:	dcf0      	bgt.n	8009832 <_printf_float+0x412>
 8009850:	e6f7      	b.n	8009642 <_printf_float+0x222>
 8009852:	f04f 0800 	mov.w	r8, #0
 8009856:	f104 0919 	add.w	r9, r4, #25
 800985a:	e7f4      	b.n	8009846 <_printf_float+0x426>

0800985c <_printf_common>:
 800985c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009860:	4616      	mov	r6, r2
 8009862:	4699      	mov	r9, r3
 8009864:	688a      	ldr	r2, [r1, #8]
 8009866:	690b      	ldr	r3, [r1, #16]
 8009868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800986c:	4293      	cmp	r3, r2
 800986e:	bfb8      	it	lt
 8009870:	4613      	movlt	r3, r2
 8009872:	6033      	str	r3, [r6, #0]
 8009874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009878:	4607      	mov	r7, r0
 800987a:	460c      	mov	r4, r1
 800987c:	b10a      	cbz	r2, 8009882 <_printf_common+0x26>
 800987e:	3301      	adds	r3, #1
 8009880:	6033      	str	r3, [r6, #0]
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	0699      	lsls	r1, r3, #26
 8009886:	bf42      	ittt	mi
 8009888:	6833      	ldrmi	r3, [r6, #0]
 800988a:	3302      	addmi	r3, #2
 800988c:	6033      	strmi	r3, [r6, #0]
 800988e:	6825      	ldr	r5, [r4, #0]
 8009890:	f015 0506 	ands.w	r5, r5, #6
 8009894:	d106      	bne.n	80098a4 <_printf_common+0x48>
 8009896:	f104 0a19 	add.w	sl, r4, #25
 800989a:	68e3      	ldr	r3, [r4, #12]
 800989c:	6832      	ldr	r2, [r6, #0]
 800989e:	1a9b      	subs	r3, r3, r2
 80098a0:	42ab      	cmp	r3, r5
 80098a2:	dc26      	bgt.n	80098f2 <_printf_common+0x96>
 80098a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098a8:	1e13      	subs	r3, r2, #0
 80098aa:	6822      	ldr	r2, [r4, #0]
 80098ac:	bf18      	it	ne
 80098ae:	2301      	movne	r3, #1
 80098b0:	0692      	lsls	r2, r2, #26
 80098b2:	d42b      	bmi.n	800990c <_printf_common+0xb0>
 80098b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098b8:	4649      	mov	r1, r9
 80098ba:	4638      	mov	r0, r7
 80098bc:	47c0      	blx	r8
 80098be:	3001      	adds	r0, #1
 80098c0:	d01e      	beq.n	8009900 <_printf_common+0xa4>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	68e5      	ldr	r5, [r4, #12]
 80098c6:	6832      	ldr	r2, [r6, #0]
 80098c8:	f003 0306 	and.w	r3, r3, #6
 80098cc:	2b04      	cmp	r3, #4
 80098ce:	bf08      	it	eq
 80098d0:	1aad      	subeq	r5, r5, r2
 80098d2:	68a3      	ldr	r3, [r4, #8]
 80098d4:	6922      	ldr	r2, [r4, #16]
 80098d6:	bf0c      	ite	eq
 80098d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098dc:	2500      	movne	r5, #0
 80098de:	4293      	cmp	r3, r2
 80098e0:	bfc4      	itt	gt
 80098e2:	1a9b      	subgt	r3, r3, r2
 80098e4:	18ed      	addgt	r5, r5, r3
 80098e6:	2600      	movs	r6, #0
 80098e8:	341a      	adds	r4, #26
 80098ea:	42b5      	cmp	r5, r6
 80098ec:	d11a      	bne.n	8009924 <_printf_common+0xc8>
 80098ee:	2000      	movs	r0, #0
 80098f0:	e008      	b.n	8009904 <_printf_common+0xa8>
 80098f2:	2301      	movs	r3, #1
 80098f4:	4652      	mov	r2, sl
 80098f6:	4649      	mov	r1, r9
 80098f8:	4638      	mov	r0, r7
 80098fa:	47c0      	blx	r8
 80098fc:	3001      	adds	r0, #1
 80098fe:	d103      	bne.n	8009908 <_printf_common+0xac>
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009908:	3501      	adds	r5, #1
 800990a:	e7c6      	b.n	800989a <_printf_common+0x3e>
 800990c:	18e1      	adds	r1, r4, r3
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	2030      	movs	r0, #48	; 0x30
 8009912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009916:	4422      	add	r2, r4
 8009918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800991c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009920:	3302      	adds	r3, #2
 8009922:	e7c7      	b.n	80098b4 <_printf_common+0x58>
 8009924:	2301      	movs	r3, #1
 8009926:	4622      	mov	r2, r4
 8009928:	4649      	mov	r1, r9
 800992a:	4638      	mov	r0, r7
 800992c:	47c0      	blx	r8
 800992e:	3001      	adds	r0, #1
 8009930:	d0e6      	beq.n	8009900 <_printf_common+0xa4>
 8009932:	3601      	adds	r6, #1
 8009934:	e7d9      	b.n	80098ea <_printf_common+0x8e>
	...

08009938 <_printf_i>:
 8009938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800993c:	460c      	mov	r4, r1
 800993e:	4691      	mov	r9, r2
 8009940:	7e27      	ldrb	r7, [r4, #24]
 8009942:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009944:	2f78      	cmp	r7, #120	; 0x78
 8009946:	4680      	mov	r8, r0
 8009948:	469a      	mov	sl, r3
 800994a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800994e:	d807      	bhi.n	8009960 <_printf_i+0x28>
 8009950:	2f62      	cmp	r7, #98	; 0x62
 8009952:	d80a      	bhi.n	800996a <_printf_i+0x32>
 8009954:	2f00      	cmp	r7, #0
 8009956:	f000 80d8 	beq.w	8009b0a <_printf_i+0x1d2>
 800995a:	2f58      	cmp	r7, #88	; 0x58
 800995c:	f000 80a3 	beq.w	8009aa6 <_printf_i+0x16e>
 8009960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009968:	e03a      	b.n	80099e0 <_printf_i+0xa8>
 800996a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800996e:	2b15      	cmp	r3, #21
 8009970:	d8f6      	bhi.n	8009960 <_printf_i+0x28>
 8009972:	a001      	add	r0, pc, #4	; (adr r0, 8009978 <_printf_i+0x40>)
 8009974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009978:	080099d1 	.word	0x080099d1
 800997c:	080099e5 	.word	0x080099e5
 8009980:	08009961 	.word	0x08009961
 8009984:	08009961 	.word	0x08009961
 8009988:	08009961 	.word	0x08009961
 800998c:	08009961 	.word	0x08009961
 8009990:	080099e5 	.word	0x080099e5
 8009994:	08009961 	.word	0x08009961
 8009998:	08009961 	.word	0x08009961
 800999c:	08009961 	.word	0x08009961
 80099a0:	08009961 	.word	0x08009961
 80099a4:	08009af1 	.word	0x08009af1
 80099a8:	08009a15 	.word	0x08009a15
 80099ac:	08009ad3 	.word	0x08009ad3
 80099b0:	08009961 	.word	0x08009961
 80099b4:	08009961 	.word	0x08009961
 80099b8:	08009b13 	.word	0x08009b13
 80099bc:	08009961 	.word	0x08009961
 80099c0:	08009a15 	.word	0x08009a15
 80099c4:	08009961 	.word	0x08009961
 80099c8:	08009961 	.word	0x08009961
 80099cc:	08009adb 	.word	0x08009adb
 80099d0:	680b      	ldr	r3, [r1, #0]
 80099d2:	1d1a      	adds	r2, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	600a      	str	r2, [r1, #0]
 80099d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099e0:	2301      	movs	r3, #1
 80099e2:	e0a3      	b.n	8009b2c <_printf_i+0x1f4>
 80099e4:	6825      	ldr	r5, [r4, #0]
 80099e6:	6808      	ldr	r0, [r1, #0]
 80099e8:	062e      	lsls	r6, r5, #24
 80099ea:	f100 0304 	add.w	r3, r0, #4
 80099ee:	d50a      	bpl.n	8009a06 <_printf_i+0xce>
 80099f0:	6805      	ldr	r5, [r0, #0]
 80099f2:	600b      	str	r3, [r1, #0]
 80099f4:	2d00      	cmp	r5, #0
 80099f6:	da03      	bge.n	8009a00 <_printf_i+0xc8>
 80099f8:	232d      	movs	r3, #45	; 0x2d
 80099fa:	426d      	negs	r5, r5
 80099fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a00:	485e      	ldr	r0, [pc, #376]	; (8009b7c <_printf_i+0x244>)
 8009a02:	230a      	movs	r3, #10
 8009a04:	e019      	b.n	8009a3a <_printf_i+0x102>
 8009a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a0a:	6805      	ldr	r5, [r0, #0]
 8009a0c:	600b      	str	r3, [r1, #0]
 8009a0e:	bf18      	it	ne
 8009a10:	b22d      	sxthne	r5, r5
 8009a12:	e7ef      	b.n	80099f4 <_printf_i+0xbc>
 8009a14:	680b      	ldr	r3, [r1, #0]
 8009a16:	6825      	ldr	r5, [r4, #0]
 8009a18:	1d18      	adds	r0, r3, #4
 8009a1a:	6008      	str	r0, [r1, #0]
 8009a1c:	0628      	lsls	r0, r5, #24
 8009a1e:	d501      	bpl.n	8009a24 <_printf_i+0xec>
 8009a20:	681d      	ldr	r5, [r3, #0]
 8009a22:	e002      	b.n	8009a2a <_printf_i+0xf2>
 8009a24:	0669      	lsls	r1, r5, #25
 8009a26:	d5fb      	bpl.n	8009a20 <_printf_i+0xe8>
 8009a28:	881d      	ldrh	r5, [r3, #0]
 8009a2a:	4854      	ldr	r0, [pc, #336]	; (8009b7c <_printf_i+0x244>)
 8009a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a2e:	bf0c      	ite	eq
 8009a30:	2308      	moveq	r3, #8
 8009a32:	230a      	movne	r3, #10
 8009a34:	2100      	movs	r1, #0
 8009a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a3a:	6866      	ldr	r6, [r4, #4]
 8009a3c:	60a6      	str	r6, [r4, #8]
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	bfa2      	ittt	ge
 8009a42:	6821      	ldrge	r1, [r4, #0]
 8009a44:	f021 0104 	bicge.w	r1, r1, #4
 8009a48:	6021      	strge	r1, [r4, #0]
 8009a4a:	b90d      	cbnz	r5, 8009a50 <_printf_i+0x118>
 8009a4c:	2e00      	cmp	r6, #0
 8009a4e:	d04d      	beq.n	8009aec <_printf_i+0x1b4>
 8009a50:	4616      	mov	r6, r2
 8009a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a56:	fb03 5711 	mls	r7, r3, r1, r5
 8009a5a:	5dc7      	ldrb	r7, [r0, r7]
 8009a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a60:	462f      	mov	r7, r5
 8009a62:	42bb      	cmp	r3, r7
 8009a64:	460d      	mov	r5, r1
 8009a66:	d9f4      	bls.n	8009a52 <_printf_i+0x11a>
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d10b      	bne.n	8009a84 <_printf_i+0x14c>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	07df      	lsls	r7, r3, #31
 8009a70:	d508      	bpl.n	8009a84 <_printf_i+0x14c>
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	6861      	ldr	r1, [r4, #4]
 8009a76:	4299      	cmp	r1, r3
 8009a78:	bfde      	ittt	le
 8009a7a:	2330      	movle	r3, #48	; 0x30
 8009a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a84:	1b92      	subs	r2, r2, r6
 8009a86:	6122      	str	r2, [r4, #16]
 8009a88:	f8cd a000 	str.w	sl, [sp]
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	aa03      	add	r2, sp, #12
 8009a90:	4621      	mov	r1, r4
 8009a92:	4640      	mov	r0, r8
 8009a94:	f7ff fee2 	bl	800985c <_printf_common>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d14c      	bne.n	8009b36 <_printf_i+0x1fe>
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	b004      	add	sp, #16
 8009aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa6:	4835      	ldr	r0, [pc, #212]	; (8009b7c <_printf_i+0x244>)
 8009aa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	680e      	ldr	r6, [r1, #0]
 8009ab0:	061f      	lsls	r7, r3, #24
 8009ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009ab6:	600e      	str	r6, [r1, #0]
 8009ab8:	d514      	bpl.n	8009ae4 <_printf_i+0x1ac>
 8009aba:	07d9      	lsls	r1, r3, #31
 8009abc:	bf44      	itt	mi
 8009abe:	f043 0320 	orrmi.w	r3, r3, #32
 8009ac2:	6023      	strmi	r3, [r4, #0]
 8009ac4:	b91d      	cbnz	r5, 8009ace <_printf_i+0x196>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f023 0320 	bic.w	r3, r3, #32
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	2310      	movs	r3, #16
 8009ad0:	e7b0      	b.n	8009a34 <_printf_i+0xfc>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	f043 0320 	orr.w	r3, r3, #32
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	2378      	movs	r3, #120	; 0x78
 8009adc:	4828      	ldr	r0, [pc, #160]	; (8009b80 <_printf_i+0x248>)
 8009ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ae2:	e7e3      	b.n	8009aac <_printf_i+0x174>
 8009ae4:	065e      	lsls	r6, r3, #25
 8009ae6:	bf48      	it	mi
 8009ae8:	b2ad      	uxthmi	r5, r5
 8009aea:	e7e6      	b.n	8009aba <_printf_i+0x182>
 8009aec:	4616      	mov	r6, r2
 8009aee:	e7bb      	b.n	8009a68 <_printf_i+0x130>
 8009af0:	680b      	ldr	r3, [r1, #0]
 8009af2:	6826      	ldr	r6, [r4, #0]
 8009af4:	6960      	ldr	r0, [r4, #20]
 8009af6:	1d1d      	adds	r5, r3, #4
 8009af8:	600d      	str	r5, [r1, #0]
 8009afa:	0635      	lsls	r5, r6, #24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	d501      	bpl.n	8009b04 <_printf_i+0x1cc>
 8009b00:	6018      	str	r0, [r3, #0]
 8009b02:	e002      	b.n	8009b0a <_printf_i+0x1d2>
 8009b04:	0671      	lsls	r1, r6, #25
 8009b06:	d5fb      	bpl.n	8009b00 <_printf_i+0x1c8>
 8009b08:	8018      	strh	r0, [r3, #0]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	6123      	str	r3, [r4, #16]
 8009b0e:	4616      	mov	r6, r2
 8009b10:	e7ba      	b.n	8009a88 <_printf_i+0x150>
 8009b12:	680b      	ldr	r3, [r1, #0]
 8009b14:	1d1a      	adds	r2, r3, #4
 8009b16:	600a      	str	r2, [r1, #0]
 8009b18:	681e      	ldr	r6, [r3, #0]
 8009b1a:	6862      	ldr	r2, [r4, #4]
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f7f6 fb96 	bl	8000250 <memchr>
 8009b24:	b108      	cbz	r0, 8009b2a <_printf_i+0x1f2>
 8009b26:	1b80      	subs	r0, r0, r6
 8009b28:	6060      	str	r0, [r4, #4]
 8009b2a:	6863      	ldr	r3, [r4, #4]
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b34:	e7a8      	b.n	8009a88 <_printf_i+0x150>
 8009b36:	6923      	ldr	r3, [r4, #16]
 8009b38:	4632      	mov	r2, r6
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4640      	mov	r0, r8
 8009b3e:	47d0      	blx	sl
 8009b40:	3001      	adds	r0, #1
 8009b42:	d0ab      	beq.n	8009a9c <_printf_i+0x164>
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	079b      	lsls	r3, r3, #30
 8009b48:	d413      	bmi.n	8009b72 <_printf_i+0x23a>
 8009b4a:	68e0      	ldr	r0, [r4, #12]
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	4298      	cmp	r0, r3
 8009b50:	bfb8      	it	lt
 8009b52:	4618      	movlt	r0, r3
 8009b54:	e7a4      	b.n	8009aa0 <_printf_i+0x168>
 8009b56:	2301      	movs	r3, #1
 8009b58:	4632      	mov	r2, r6
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	47d0      	blx	sl
 8009b60:	3001      	adds	r0, #1
 8009b62:	d09b      	beq.n	8009a9c <_printf_i+0x164>
 8009b64:	3501      	adds	r5, #1
 8009b66:	68e3      	ldr	r3, [r4, #12]
 8009b68:	9903      	ldr	r1, [sp, #12]
 8009b6a:	1a5b      	subs	r3, r3, r1
 8009b6c:	42ab      	cmp	r3, r5
 8009b6e:	dcf2      	bgt.n	8009b56 <_printf_i+0x21e>
 8009b70:	e7eb      	b.n	8009b4a <_printf_i+0x212>
 8009b72:	2500      	movs	r5, #0
 8009b74:	f104 0619 	add.w	r6, r4, #25
 8009b78:	e7f5      	b.n	8009b66 <_printf_i+0x22e>
 8009b7a:	bf00      	nop
 8009b7c:	0800be6a 	.word	0x0800be6a
 8009b80:	0800be7b 	.word	0x0800be7b

08009b84 <iprintf>:
 8009b84:	b40f      	push	{r0, r1, r2, r3}
 8009b86:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <iprintf+0x2c>)
 8009b88:	b513      	push	{r0, r1, r4, lr}
 8009b8a:	681c      	ldr	r4, [r3, #0]
 8009b8c:	b124      	cbz	r4, 8009b98 <iprintf+0x14>
 8009b8e:	69a3      	ldr	r3, [r4, #24]
 8009b90:	b913      	cbnz	r3, 8009b98 <iprintf+0x14>
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7ff fa10 	bl	8008fb8 <__sinit>
 8009b98:	ab05      	add	r3, sp, #20
 8009b9a:	9a04      	ldr	r2, [sp, #16]
 8009b9c:	68a1      	ldr	r1, [r4, #8]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f001 fd29 	bl	800b5f8 <_vfiprintf_r>
 8009ba6:	b002      	add	sp, #8
 8009ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bac:	b004      	add	sp, #16
 8009bae:	4770      	bx	lr
 8009bb0:	20000010 	.word	0x20000010

08009bb4 <_puts_r>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	460e      	mov	r6, r1
 8009bb8:	4605      	mov	r5, r0
 8009bba:	b118      	cbz	r0, 8009bc4 <_puts_r+0x10>
 8009bbc:	6983      	ldr	r3, [r0, #24]
 8009bbe:	b90b      	cbnz	r3, 8009bc4 <_puts_r+0x10>
 8009bc0:	f7ff f9fa 	bl	8008fb8 <__sinit>
 8009bc4:	69ab      	ldr	r3, [r5, #24]
 8009bc6:	68ac      	ldr	r4, [r5, #8]
 8009bc8:	b913      	cbnz	r3, 8009bd0 <_puts_r+0x1c>
 8009bca:	4628      	mov	r0, r5
 8009bcc:	f7ff f9f4 	bl	8008fb8 <__sinit>
 8009bd0:	4b2c      	ldr	r3, [pc, #176]	; (8009c84 <_puts_r+0xd0>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d120      	bne.n	8009c18 <_puts_r+0x64>
 8009bd6:	686c      	ldr	r4, [r5, #4]
 8009bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bda:	07db      	lsls	r3, r3, #31
 8009bdc:	d405      	bmi.n	8009bea <_puts_r+0x36>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	0598      	lsls	r0, r3, #22
 8009be2:	d402      	bmi.n	8009bea <_puts_r+0x36>
 8009be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009be6:	f7ff faaa 	bl	800913e <__retarget_lock_acquire_recursive>
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	0719      	lsls	r1, r3, #28
 8009bee:	d51d      	bpl.n	8009c2c <_puts_r+0x78>
 8009bf0:	6923      	ldr	r3, [r4, #16]
 8009bf2:	b1db      	cbz	r3, 8009c2c <_puts_r+0x78>
 8009bf4:	3e01      	subs	r6, #1
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	60a3      	str	r3, [r4, #8]
 8009c00:	bb39      	cbnz	r1, 8009c52 <_puts_r+0x9e>
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	da38      	bge.n	8009c78 <_puts_r+0xc4>
 8009c06:	4622      	mov	r2, r4
 8009c08:	210a      	movs	r1, #10
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 f906 	bl	8009e1c <__swbuf_r>
 8009c10:	3001      	adds	r0, #1
 8009c12:	d011      	beq.n	8009c38 <_puts_r+0x84>
 8009c14:	250a      	movs	r5, #10
 8009c16:	e011      	b.n	8009c3c <_puts_r+0x88>
 8009c18:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <_puts_r+0xd4>)
 8009c1a:	429c      	cmp	r4, r3
 8009c1c:	d101      	bne.n	8009c22 <_puts_r+0x6e>
 8009c1e:	68ac      	ldr	r4, [r5, #8]
 8009c20:	e7da      	b.n	8009bd8 <_puts_r+0x24>
 8009c22:	4b1a      	ldr	r3, [pc, #104]	; (8009c8c <_puts_r+0xd8>)
 8009c24:	429c      	cmp	r4, r3
 8009c26:	bf08      	it	eq
 8009c28:	68ec      	ldreq	r4, [r5, #12]
 8009c2a:	e7d5      	b.n	8009bd8 <_puts_r+0x24>
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 f958 	bl	8009ee4 <__swsetup_r>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d0dd      	beq.n	8009bf4 <_puts_r+0x40>
 8009c38:	f04f 35ff 	mov.w	r5, #4294967295
 8009c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c3e:	07da      	lsls	r2, r3, #31
 8009c40:	d405      	bmi.n	8009c4e <_puts_r+0x9a>
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	059b      	lsls	r3, r3, #22
 8009c46:	d402      	bmi.n	8009c4e <_puts_r+0x9a>
 8009c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c4a:	f7ff fa79 	bl	8009140 <__retarget_lock_release_recursive>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	bd70      	pop	{r4, r5, r6, pc}
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da04      	bge.n	8009c60 <_puts_r+0xac>
 8009c56:	69a2      	ldr	r2, [r4, #24]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	dc06      	bgt.n	8009c6a <_puts_r+0xb6>
 8009c5c:	290a      	cmp	r1, #10
 8009c5e:	d004      	beq.n	8009c6a <_puts_r+0xb6>
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	6022      	str	r2, [r4, #0]
 8009c66:	7019      	strb	r1, [r3, #0]
 8009c68:	e7c5      	b.n	8009bf6 <_puts_r+0x42>
 8009c6a:	4622      	mov	r2, r4
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f000 f8d5 	bl	8009e1c <__swbuf_r>
 8009c72:	3001      	adds	r0, #1
 8009c74:	d1bf      	bne.n	8009bf6 <_puts_r+0x42>
 8009c76:	e7df      	b.n	8009c38 <_puts_r+0x84>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	250a      	movs	r5, #10
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	701d      	strb	r5, [r3, #0]
 8009c82:	e7db      	b.n	8009c3c <_puts_r+0x88>
 8009c84:	0800be14 	.word	0x0800be14
 8009c88:	0800be34 	.word	0x0800be34
 8009c8c:	0800bdf4 	.word	0x0800bdf4

08009c90 <puts>:
 8009c90:	4b02      	ldr	r3, [pc, #8]	; (8009c9c <puts+0xc>)
 8009c92:	4601      	mov	r1, r0
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	f7ff bf8d 	b.w	8009bb4 <_puts_r>
 8009c9a:	bf00      	nop
 8009c9c:	20000010 	.word	0x20000010

08009ca0 <cleanup_glue>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	460c      	mov	r4, r1
 8009ca4:	6809      	ldr	r1, [r1, #0]
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	b109      	cbz	r1, 8009cae <cleanup_glue+0xe>
 8009caa:	f7ff fff9 	bl	8009ca0 <cleanup_glue>
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cb6:	f7ff ba79 	b.w	80091ac <_free_r>
	...

08009cbc <_reclaim_reent>:
 8009cbc:	4b2c      	ldr	r3, [pc, #176]	; (8009d70 <_reclaim_reent+0xb4>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4283      	cmp	r3, r0
 8009cc2:	b570      	push	{r4, r5, r6, lr}
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	d051      	beq.n	8009d6c <_reclaim_reent+0xb0>
 8009cc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009cca:	b143      	cbz	r3, 8009cde <_reclaim_reent+0x22>
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d14a      	bne.n	8009d68 <_reclaim_reent+0xac>
 8009cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cd4:	6819      	ldr	r1, [r3, #0]
 8009cd6:	b111      	cbz	r1, 8009cde <_reclaim_reent+0x22>
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff fa67 	bl	80091ac <_free_r>
 8009cde:	6961      	ldr	r1, [r4, #20]
 8009ce0:	b111      	cbz	r1, 8009ce8 <_reclaim_reent+0x2c>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	f7ff fa62 	bl	80091ac <_free_r>
 8009ce8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009cea:	b111      	cbz	r1, 8009cf2 <_reclaim_reent+0x36>
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7ff fa5d 	bl	80091ac <_free_r>
 8009cf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cf4:	b111      	cbz	r1, 8009cfc <_reclaim_reent+0x40>
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f7ff fa58 	bl	80091ac <_free_r>
 8009cfc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009cfe:	b111      	cbz	r1, 8009d06 <_reclaim_reent+0x4a>
 8009d00:	4620      	mov	r0, r4
 8009d02:	f7ff fa53 	bl	80091ac <_free_r>
 8009d06:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d08:	b111      	cbz	r1, 8009d10 <_reclaim_reent+0x54>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fa4e 	bl	80091ac <_free_r>
 8009d10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d12:	b111      	cbz	r1, 8009d1a <_reclaim_reent+0x5e>
 8009d14:	4620      	mov	r0, r4
 8009d16:	f7ff fa49 	bl	80091ac <_free_r>
 8009d1a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d1c:	b111      	cbz	r1, 8009d24 <_reclaim_reent+0x68>
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7ff fa44 	bl	80091ac <_free_r>
 8009d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d26:	b111      	cbz	r1, 8009d2e <_reclaim_reent+0x72>
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f7ff fa3f 	bl	80091ac <_free_r>
 8009d2e:	69a3      	ldr	r3, [r4, #24]
 8009d30:	b1e3      	cbz	r3, 8009d6c <_reclaim_reent+0xb0>
 8009d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d34:	4620      	mov	r0, r4
 8009d36:	4798      	blx	r3
 8009d38:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d3a:	b1b9      	cbz	r1, 8009d6c <_reclaim_reent+0xb0>
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d42:	f7ff bfad 	b.w	8009ca0 <cleanup_glue>
 8009d46:	5949      	ldr	r1, [r1, r5]
 8009d48:	b941      	cbnz	r1, 8009d5c <_reclaim_reent+0xa0>
 8009d4a:	3504      	adds	r5, #4
 8009d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d4e:	2d80      	cmp	r5, #128	; 0x80
 8009d50:	68d9      	ldr	r1, [r3, #12]
 8009d52:	d1f8      	bne.n	8009d46 <_reclaim_reent+0x8a>
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7ff fa29 	bl	80091ac <_free_r>
 8009d5a:	e7ba      	b.n	8009cd2 <_reclaim_reent+0x16>
 8009d5c:	680e      	ldr	r6, [r1, #0]
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f7ff fa24 	bl	80091ac <_free_r>
 8009d64:	4631      	mov	r1, r6
 8009d66:	e7ef      	b.n	8009d48 <_reclaim_reent+0x8c>
 8009d68:	2500      	movs	r5, #0
 8009d6a:	e7ef      	b.n	8009d4c <_reclaim_reent+0x90>
 8009d6c:	bd70      	pop	{r4, r5, r6, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000010 	.word	0x20000010

08009d74 <_sbrk_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d06      	ldr	r5, [pc, #24]	; (8009d90 <_sbrk_r+0x1c>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	602b      	str	r3, [r5, #0]
 8009d80:	f7f8 f9b0 	bl	80020e4 <_sbrk>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_sbrk_r+0x1a>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_sbrk_r+0x1a>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	20010884 	.word	0x20010884

08009d94 <__sread>:
 8009d94:	b510      	push	{r4, lr}
 8009d96:	460c      	mov	r4, r1
 8009d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d9c:	f001 fd5c 	bl	800b858 <_read_r>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	bfab      	itete	ge
 8009da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009da6:	89a3      	ldrhlt	r3, [r4, #12]
 8009da8:	181b      	addge	r3, r3, r0
 8009daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dae:	bfac      	ite	ge
 8009db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009db2:	81a3      	strhlt	r3, [r4, #12]
 8009db4:	bd10      	pop	{r4, pc}

08009db6 <__swrite>:
 8009db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dba:	461f      	mov	r7, r3
 8009dbc:	898b      	ldrh	r3, [r1, #12]
 8009dbe:	05db      	lsls	r3, r3, #23
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	4616      	mov	r6, r2
 8009dc6:	d505      	bpl.n	8009dd4 <__swrite+0x1e>
 8009dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dcc:	2302      	movs	r3, #2
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f000 ffda 	bl	800ad88 <_lseek_r>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dde:	81a3      	strh	r3, [r4, #12]
 8009de0:	4632      	mov	r2, r6
 8009de2:	463b      	mov	r3, r7
 8009de4:	4628      	mov	r0, r5
 8009de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dea:	f000 b869 	b.w	8009ec0 <_write_r>

08009dee <__sseek>:
 8009dee:	b510      	push	{r4, lr}
 8009df0:	460c      	mov	r4, r1
 8009df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df6:	f000 ffc7 	bl	800ad88 <_lseek_r>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	bf15      	itete	ne
 8009e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e0a:	81a3      	strheq	r3, [r4, #12]
 8009e0c:	bf18      	it	ne
 8009e0e:	81a3      	strhne	r3, [r4, #12]
 8009e10:	bd10      	pop	{r4, pc}

08009e12 <__sclose>:
 8009e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e16:	f000 b8d3 	b.w	8009fc0 <_close_r>
	...

08009e1c <__swbuf_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	460e      	mov	r6, r1
 8009e20:	4614      	mov	r4, r2
 8009e22:	4605      	mov	r5, r0
 8009e24:	b118      	cbz	r0, 8009e2e <__swbuf_r+0x12>
 8009e26:	6983      	ldr	r3, [r0, #24]
 8009e28:	b90b      	cbnz	r3, 8009e2e <__swbuf_r+0x12>
 8009e2a:	f7ff f8c5 	bl	8008fb8 <__sinit>
 8009e2e:	4b21      	ldr	r3, [pc, #132]	; (8009eb4 <__swbuf_r+0x98>)
 8009e30:	429c      	cmp	r4, r3
 8009e32:	d12b      	bne.n	8009e8c <__swbuf_r+0x70>
 8009e34:	686c      	ldr	r4, [r5, #4]
 8009e36:	69a3      	ldr	r3, [r4, #24]
 8009e38:	60a3      	str	r3, [r4, #8]
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	071a      	lsls	r2, r3, #28
 8009e3e:	d52f      	bpl.n	8009ea0 <__swbuf_r+0x84>
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	b36b      	cbz	r3, 8009ea0 <__swbuf_r+0x84>
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	1ac0      	subs	r0, r0, r3
 8009e4a:	6963      	ldr	r3, [r4, #20]
 8009e4c:	b2f6      	uxtb	r6, r6
 8009e4e:	4283      	cmp	r3, r0
 8009e50:	4637      	mov	r7, r6
 8009e52:	dc04      	bgt.n	8009e5e <__swbuf_r+0x42>
 8009e54:	4621      	mov	r1, r4
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 ff56 	bl	800ad08 <_fflush_r>
 8009e5c:	bb30      	cbnz	r0, 8009eac <__swbuf_r+0x90>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	60a3      	str	r3, [r4, #8]
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	6022      	str	r2, [r4, #0]
 8009e6a:	701e      	strb	r6, [r3, #0]
 8009e6c:	6963      	ldr	r3, [r4, #20]
 8009e6e:	3001      	adds	r0, #1
 8009e70:	4283      	cmp	r3, r0
 8009e72:	d004      	beq.n	8009e7e <__swbuf_r+0x62>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	07db      	lsls	r3, r3, #31
 8009e78:	d506      	bpl.n	8009e88 <__swbuf_r+0x6c>
 8009e7a:	2e0a      	cmp	r6, #10
 8009e7c:	d104      	bne.n	8009e88 <__swbuf_r+0x6c>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	f000 ff41 	bl	800ad08 <_fflush_r>
 8009e86:	b988      	cbnz	r0, 8009eac <__swbuf_r+0x90>
 8009e88:	4638      	mov	r0, r7
 8009e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8c:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <__swbuf_r+0x9c>)
 8009e8e:	429c      	cmp	r4, r3
 8009e90:	d101      	bne.n	8009e96 <__swbuf_r+0x7a>
 8009e92:	68ac      	ldr	r4, [r5, #8]
 8009e94:	e7cf      	b.n	8009e36 <__swbuf_r+0x1a>
 8009e96:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <__swbuf_r+0xa0>)
 8009e98:	429c      	cmp	r4, r3
 8009e9a:	bf08      	it	eq
 8009e9c:	68ec      	ldreq	r4, [r5, #12]
 8009e9e:	e7ca      	b.n	8009e36 <__swbuf_r+0x1a>
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	f000 f81e 	bl	8009ee4 <__swsetup_r>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d0cb      	beq.n	8009e44 <__swbuf_r+0x28>
 8009eac:	f04f 37ff 	mov.w	r7, #4294967295
 8009eb0:	e7ea      	b.n	8009e88 <__swbuf_r+0x6c>
 8009eb2:	bf00      	nop
 8009eb4:	0800be14 	.word	0x0800be14
 8009eb8:	0800be34 	.word	0x0800be34
 8009ebc:	0800bdf4 	.word	0x0800bdf4

08009ec0 <_write_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4d07      	ldr	r5, [pc, #28]	; (8009ee0 <_write_r+0x20>)
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	4611      	mov	r1, r2
 8009eca:	2200      	movs	r2, #0
 8009ecc:	602a      	str	r2, [r5, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f7f8 f8b7 	bl	8002042 <_write>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_write_r+0x1e>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_write_r+0x1e>
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	20010884 	.word	0x20010884

08009ee4 <__swsetup_r>:
 8009ee4:	4b32      	ldr	r3, [pc, #200]	; (8009fb0 <__swsetup_r+0xcc>)
 8009ee6:	b570      	push	{r4, r5, r6, lr}
 8009ee8:	681d      	ldr	r5, [r3, #0]
 8009eea:	4606      	mov	r6, r0
 8009eec:	460c      	mov	r4, r1
 8009eee:	b125      	cbz	r5, 8009efa <__swsetup_r+0x16>
 8009ef0:	69ab      	ldr	r3, [r5, #24]
 8009ef2:	b913      	cbnz	r3, 8009efa <__swsetup_r+0x16>
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f7ff f85f 	bl	8008fb8 <__sinit>
 8009efa:	4b2e      	ldr	r3, [pc, #184]	; (8009fb4 <__swsetup_r+0xd0>)
 8009efc:	429c      	cmp	r4, r3
 8009efe:	d10f      	bne.n	8009f20 <__swsetup_r+0x3c>
 8009f00:	686c      	ldr	r4, [r5, #4]
 8009f02:	89a3      	ldrh	r3, [r4, #12]
 8009f04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f08:	0719      	lsls	r1, r3, #28
 8009f0a:	d42c      	bmi.n	8009f66 <__swsetup_r+0x82>
 8009f0c:	06dd      	lsls	r5, r3, #27
 8009f0e:	d411      	bmi.n	8009f34 <__swsetup_r+0x50>
 8009f10:	2309      	movs	r3, #9
 8009f12:	6033      	str	r3, [r6, #0]
 8009f14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f18:	81a3      	strh	r3, [r4, #12]
 8009f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1e:	e03e      	b.n	8009f9e <__swsetup_r+0xba>
 8009f20:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <__swsetup_r+0xd4>)
 8009f22:	429c      	cmp	r4, r3
 8009f24:	d101      	bne.n	8009f2a <__swsetup_r+0x46>
 8009f26:	68ac      	ldr	r4, [r5, #8]
 8009f28:	e7eb      	b.n	8009f02 <__swsetup_r+0x1e>
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <__swsetup_r+0xd8>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	bf08      	it	eq
 8009f30:	68ec      	ldreq	r4, [r5, #12]
 8009f32:	e7e6      	b.n	8009f02 <__swsetup_r+0x1e>
 8009f34:	0758      	lsls	r0, r3, #29
 8009f36:	d512      	bpl.n	8009f5e <__swsetup_r+0x7a>
 8009f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f3a:	b141      	cbz	r1, 8009f4e <__swsetup_r+0x6a>
 8009f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f40:	4299      	cmp	r1, r3
 8009f42:	d002      	beq.n	8009f4a <__swsetup_r+0x66>
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff f931 	bl	80091ac <_free_r>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	2300      	movs	r3, #0
 8009f58:	6063      	str	r3, [r4, #4]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f043 0308 	orr.w	r3, r3, #8
 8009f64:	81a3      	strh	r3, [r4, #12]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	b94b      	cbnz	r3, 8009f7e <__swsetup_r+0x9a>
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f74:	d003      	beq.n	8009f7e <__swsetup_r+0x9a>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f000 ff3b 	bl	800adf4 <__smakebuf_r>
 8009f7e:	89a0      	ldrh	r0, [r4, #12]
 8009f80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f84:	f010 0301 	ands.w	r3, r0, #1
 8009f88:	d00a      	beq.n	8009fa0 <__swsetup_r+0xbc>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60a3      	str	r3, [r4, #8]
 8009f8e:	6963      	ldr	r3, [r4, #20]
 8009f90:	425b      	negs	r3, r3
 8009f92:	61a3      	str	r3, [r4, #24]
 8009f94:	6923      	ldr	r3, [r4, #16]
 8009f96:	b943      	cbnz	r3, 8009faa <__swsetup_r+0xc6>
 8009f98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f9c:	d1ba      	bne.n	8009f14 <__swsetup_r+0x30>
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	0781      	lsls	r1, r0, #30
 8009fa2:	bf58      	it	pl
 8009fa4:	6963      	ldrpl	r3, [r4, #20]
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	e7f4      	b.n	8009f94 <__swsetup_r+0xb0>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e7f7      	b.n	8009f9e <__swsetup_r+0xba>
 8009fae:	bf00      	nop
 8009fb0:	20000010 	.word	0x20000010
 8009fb4:	0800be14 	.word	0x0800be14
 8009fb8:	0800be34 	.word	0x0800be34
 8009fbc:	0800bdf4 	.word	0x0800bdf4

08009fc0 <_close_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d06      	ldr	r5, [pc, #24]	; (8009fdc <_close_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f8 f855 	bl	800207a <_close>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_close_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_close_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20010884 	.word	0x20010884

08009fe0 <quorem>:
 8009fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	6903      	ldr	r3, [r0, #16]
 8009fe6:	690c      	ldr	r4, [r1, #16]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	4607      	mov	r7, r0
 8009fec:	f2c0 8081 	blt.w	800a0f2 <quorem+0x112>
 8009ff0:	3c01      	subs	r4, #1
 8009ff2:	f101 0814 	add.w	r8, r1, #20
 8009ff6:	f100 0514 	add.w	r5, r0, #20
 8009ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a004:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a008:	3301      	adds	r3, #1
 800a00a:	429a      	cmp	r2, r3
 800a00c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a010:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a014:	fbb2 f6f3 	udiv	r6, r2, r3
 800a018:	d331      	bcc.n	800a07e <quorem+0x9e>
 800a01a:	f04f 0e00 	mov.w	lr, #0
 800a01e:	4640      	mov	r0, r8
 800a020:	46ac      	mov	ip, r5
 800a022:	46f2      	mov	sl, lr
 800a024:	f850 2b04 	ldr.w	r2, [r0], #4
 800a028:	b293      	uxth	r3, r2
 800a02a:	fb06 e303 	mla	r3, r6, r3, lr
 800a02e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a032:	b29b      	uxth	r3, r3
 800a034:	ebaa 0303 	sub.w	r3, sl, r3
 800a038:	0c12      	lsrs	r2, r2, #16
 800a03a:	f8dc a000 	ldr.w	sl, [ip]
 800a03e:	fb06 e202 	mla	r2, r6, r2, lr
 800a042:	fa13 f38a 	uxtah	r3, r3, sl
 800a046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a04a:	fa1f fa82 	uxth.w	sl, r2
 800a04e:	f8dc 2000 	ldr.w	r2, [ip]
 800a052:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a060:	4581      	cmp	r9, r0
 800a062:	f84c 3b04 	str.w	r3, [ip], #4
 800a066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a06a:	d2db      	bcs.n	800a024 <quorem+0x44>
 800a06c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a070:	b92b      	cbnz	r3, 800a07e <quorem+0x9e>
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	3b04      	subs	r3, #4
 800a076:	429d      	cmp	r5, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	d32e      	bcc.n	800a0da <quorem+0xfa>
 800a07c:	613c      	str	r4, [r7, #16]
 800a07e:	4638      	mov	r0, r7
 800a080:	f001 f982 	bl	800b388 <__mcmp>
 800a084:	2800      	cmp	r0, #0
 800a086:	db24      	blt.n	800a0d2 <quorem+0xf2>
 800a088:	3601      	adds	r6, #1
 800a08a:	4628      	mov	r0, r5
 800a08c:	f04f 0c00 	mov.w	ip, #0
 800a090:	f858 2b04 	ldr.w	r2, [r8], #4
 800a094:	f8d0 e000 	ldr.w	lr, [r0]
 800a098:	b293      	uxth	r3, r2
 800a09a:	ebac 0303 	sub.w	r3, ip, r3
 800a09e:	0c12      	lsrs	r2, r2, #16
 800a0a0:	fa13 f38e 	uxtah	r3, r3, lr
 800a0a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b2:	45c1      	cmp	r9, r8
 800a0b4:	f840 3b04 	str.w	r3, [r0], #4
 800a0b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0bc:	d2e8      	bcs.n	800a090 <quorem+0xb0>
 800a0be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0c6:	b922      	cbnz	r2, 800a0d2 <quorem+0xf2>
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	d30a      	bcc.n	800a0e6 <quorem+0x106>
 800a0d0:	613c      	str	r4, [r7, #16]
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	b003      	add	sp, #12
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	6812      	ldr	r2, [r2, #0]
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	2a00      	cmp	r2, #0
 800a0e0:	d1cc      	bne.n	800a07c <quorem+0x9c>
 800a0e2:	3c01      	subs	r4, #1
 800a0e4:	e7c7      	b.n	800a076 <quorem+0x96>
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	2a00      	cmp	r2, #0
 800a0ec:	d1f0      	bne.n	800a0d0 <quorem+0xf0>
 800a0ee:	3c01      	subs	r4, #1
 800a0f0:	e7eb      	b.n	800a0ca <quorem+0xea>
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e7ee      	b.n	800a0d4 <quorem+0xf4>
	...

0800a0f8 <_dtoa_r>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	ec59 8b10 	vmov	r8, r9, d0
 800a100:	b095      	sub	sp, #84	; 0x54
 800a102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a104:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800a106:	9107      	str	r1, [sp, #28]
 800a108:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a10c:	4606      	mov	r6, r0
 800a10e:	9209      	str	r2, [sp, #36]	; 0x24
 800a110:	9310      	str	r3, [sp, #64]	; 0x40
 800a112:	b975      	cbnz	r5, 800a132 <_dtoa_r+0x3a>
 800a114:	2010      	movs	r0, #16
 800a116:	f7ff f815 	bl	8009144 <malloc>
 800a11a:	4602      	mov	r2, r0
 800a11c:	6270      	str	r0, [r6, #36]	; 0x24
 800a11e:	b920      	cbnz	r0, 800a12a <_dtoa_r+0x32>
 800a120:	4bab      	ldr	r3, [pc, #684]	; (800a3d0 <_dtoa_r+0x2d8>)
 800a122:	21ea      	movs	r1, #234	; 0xea
 800a124:	48ab      	ldr	r0, [pc, #684]	; (800a3d4 <_dtoa_r+0x2dc>)
 800a126:	f001 fba9 	bl	800b87c <__assert_func>
 800a12a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a12e:	6005      	str	r5, [r0, #0]
 800a130:	60c5      	str	r5, [r0, #12]
 800a132:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a134:	6819      	ldr	r1, [r3, #0]
 800a136:	b151      	cbz	r1, 800a14e <_dtoa_r+0x56>
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	604a      	str	r2, [r1, #4]
 800a13c:	2301      	movs	r3, #1
 800a13e:	4093      	lsls	r3, r2
 800a140:	608b      	str	r3, [r1, #8]
 800a142:	4630      	mov	r0, r6
 800a144:	f000 fee2 	bl	800af0c <_Bfree>
 800a148:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	f1b9 0300 	subs.w	r3, r9, #0
 800a152:	bfbb      	ittet	lt
 800a154:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a158:	9303      	strlt	r3, [sp, #12]
 800a15a:	2300      	movge	r3, #0
 800a15c:	2201      	movlt	r2, #1
 800a15e:	bfac      	ite	ge
 800a160:	6023      	strge	r3, [r4, #0]
 800a162:	6022      	strlt	r2, [r4, #0]
 800a164:	4b9c      	ldr	r3, [pc, #624]	; (800a3d8 <_dtoa_r+0x2e0>)
 800a166:	9c03      	ldr	r4, [sp, #12]
 800a168:	43a3      	bics	r3, r4
 800a16a:	d11a      	bne.n	800a1a2 <_dtoa_r+0xaa>
 800a16c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a16e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a178:	ea53 0308 	orrs.w	r3, r3, r8
 800a17c:	f000 8512 	beq.w	800aba4 <_dtoa_r+0xaac>
 800a180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a182:	b953      	cbnz	r3, 800a19a <_dtoa_r+0xa2>
 800a184:	4b95      	ldr	r3, [pc, #596]	; (800a3dc <_dtoa_r+0x2e4>)
 800a186:	e01f      	b.n	800a1c8 <_dtoa_r+0xd0>
 800a188:	4b95      	ldr	r3, [pc, #596]	; (800a3e0 <_dtoa_r+0x2e8>)
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	3308      	adds	r3, #8
 800a18e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	9800      	ldr	r0, [sp, #0]
 800a194:	b015      	add	sp, #84	; 0x54
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19a:	4b90      	ldr	r3, [pc, #576]	; (800a3dc <_dtoa_r+0x2e4>)
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	3303      	adds	r3, #3
 800a1a0:	e7f5      	b.n	800a18e <_dtoa_r+0x96>
 800a1a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a1b2:	d10b      	bne.n	800a1cc <_dtoa_r+0xd4>
 800a1b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	6013      	str	r3, [r2, #0]
 800a1ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 84ee 	beq.w	800ab9e <_dtoa_r+0xaa6>
 800a1c2:	4888      	ldr	r0, [pc, #544]	; (800a3e4 <_dtoa_r+0x2ec>)
 800a1c4:	6018      	str	r0, [r3, #0]
 800a1c6:	1e43      	subs	r3, r0, #1
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	e7e2      	b.n	800a192 <_dtoa_r+0x9a>
 800a1cc:	a913      	add	r1, sp, #76	; 0x4c
 800a1ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1d2:	aa12      	add	r2, sp, #72	; 0x48
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f001 f97b 	bl	800b4d0 <__d2b>
 800a1da:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a1de:	4605      	mov	r5, r0
 800a1e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a1e2:	2900      	cmp	r1, #0
 800a1e4:	d047      	beq.n	800a276 <_dtoa_r+0x17e>
 800a1e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a1e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a1ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a1f0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a1f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a1f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a1fc:	2400      	movs	r4, #0
 800a1fe:	ec43 2b16 	vmov	d6, r2, r3
 800a202:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a206:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800a3b8 <_dtoa_r+0x2c0>
 800a20a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a20e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800a3c0 <_dtoa_r+0x2c8>
 800a212:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a216:	eeb0 7b46 	vmov.f64	d7, d6
 800a21a:	ee06 1a90 	vmov	s13, r1
 800a21e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800a222:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800a3c8 <_dtoa_r+0x2d0>
 800a226:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a22a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a22e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a236:	ee16 ba90 	vmov	fp, s13
 800a23a:	9411      	str	r4, [sp, #68]	; 0x44
 800a23c:	d508      	bpl.n	800a250 <_dtoa_r+0x158>
 800a23e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a242:	eeb4 6b47 	vcmp.f64	d6, d7
 800a246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24a:	bf18      	it	ne
 800a24c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a250:	f1bb 0f16 	cmp.w	fp, #22
 800a254:	d832      	bhi.n	800a2bc <_dtoa_r+0x1c4>
 800a256:	4b64      	ldr	r3, [pc, #400]	; (800a3e8 <_dtoa_r+0x2f0>)
 800a258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a25c:	ed93 7b00 	vldr	d7, [r3]
 800a260:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a264:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26c:	d501      	bpl.n	800a272 <_dtoa_r+0x17a>
 800a26e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a272:	2300      	movs	r3, #0
 800a274:	e023      	b.n	800a2be <_dtoa_r+0x1c6>
 800a276:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a278:	4401      	add	r1, r0
 800a27a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a27e:	2b20      	cmp	r3, #32
 800a280:	bfc3      	ittte	gt
 800a282:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a286:	fa04 f303 	lslgt.w	r3, r4, r3
 800a28a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a28e:	f1c3 0320 	rsble	r3, r3, #32
 800a292:	bfc6      	itte	gt
 800a294:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a298:	ea43 0308 	orrgt.w	r3, r3, r8
 800a29c:	fa08 f303 	lslle.w	r3, r8, r3
 800a2a0:	ee07 3a90 	vmov	s15, r3
 800a2a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a2a8:	3901      	subs	r1, #1
 800a2aa:	ed8d 7b00 	vstr	d7, [sp]
 800a2ae:	9c01      	ldr	r4, [sp, #4]
 800a2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2b4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a2b8:	2401      	movs	r4, #1
 800a2ba:	e7a0      	b.n	800a1fe <_dtoa_r+0x106>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2c0:	1a43      	subs	r3, r0, r1
 800a2c2:	1e5a      	subs	r2, r3, #1
 800a2c4:	bf45      	ittet	mi
 800a2c6:	f1c3 0301 	rsbmi	r3, r3, #1
 800a2ca:	9305      	strmi	r3, [sp, #20]
 800a2cc:	2300      	movpl	r3, #0
 800a2ce:	2300      	movmi	r3, #0
 800a2d0:	9206      	str	r2, [sp, #24]
 800a2d2:	bf54      	ite	pl
 800a2d4:	9305      	strpl	r3, [sp, #20]
 800a2d6:	9306      	strmi	r3, [sp, #24]
 800a2d8:	f1bb 0f00 	cmp.w	fp, #0
 800a2dc:	db18      	blt.n	800a310 <_dtoa_r+0x218>
 800a2de:	9b06      	ldr	r3, [sp, #24]
 800a2e0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a2e4:	445b      	add	r3, fp
 800a2e6:	9306      	str	r3, [sp, #24]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9a07      	ldr	r2, [sp, #28]
 800a2ec:	2a09      	cmp	r2, #9
 800a2ee:	d849      	bhi.n	800a384 <_dtoa_r+0x28c>
 800a2f0:	2a05      	cmp	r2, #5
 800a2f2:	bfc4      	itt	gt
 800a2f4:	3a04      	subgt	r2, #4
 800a2f6:	9207      	strgt	r2, [sp, #28]
 800a2f8:	9a07      	ldr	r2, [sp, #28]
 800a2fa:	f1a2 0202 	sub.w	r2, r2, #2
 800a2fe:	bfcc      	ite	gt
 800a300:	2400      	movgt	r4, #0
 800a302:	2401      	movle	r4, #1
 800a304:	2a03      	cmp	r2, #3
 800a306:	d848      	bhi.n	800a39a <_dtoa_r+0x2a2>
 800a308:	e8df f002 	tbb	[pc, r2]
 800a30c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a310:	9b05      	ldr	r3, [sp, #20]
 800a312:	2200      	movs	r2, #0
 800a314:	eba3 030b 	sub.w	r3, r3, fp
 800a318:	9305      	str	r3, [sp, #20]
 800a31a:	920e      	str	r2, [sp, #56]	; 0x38
 800a31c:	f1cb 0300 	rsb	r3, fp, #0
 800a320:	e7e3      	b.n	800a2ea <_dtoa_r+0x1f2>
 800a322:	2200      	movs	r2, #0
 800a324:	9208      	str	r2, [sp, #32]
 800a326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a328:	2a00      	cmp	r2, #0
 800a32a:	dc39      	bgt.n	800a3a0 <_dtoa_r+0x2a8>
 800a32c:	f04f 0a01 	mov.w	sl, #1
 800a330:	46d1      	mov	r9, sl
 800a332:	4652      	mov	r2, sl
 800a334:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a338:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a33a:	2100      	movs	r1, #0
 800a33c:	6079      	str	r1, [r7, #4]
 800a33e:	2004      	movs	r0, #4
 800a340:	f100 0c14 	add.w	ip, r0, #20
 800a344:	4594      	cmp	ip, r2
 800a346:	6879      	ldr	r1, [r7, #4]
 800a348:	d92f      	bls.n	800a3aa <_dtoa_r+0x2b2>
 800a34a:	4630      	mov	r0, r6
 800a34c:	930c      	str	r3, [sp, #48]	; 0x30
 800a34e:	f000 fd9d 	bl	800ae8c <_Balloc>
 800a352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a354:	9000      	str	r0, [sp, #0]
 800a356:	4602      	mov	r2, r0
 800a358:	2800      	cmp	r0, #0
 800a35a:	d149      	bne.n	800a3f0 <_dtoa_r+0x2f8>
 800a35c:	4b23      	ldr	r3, [pc, #140]	; (800a3ec <_dtoa_r+0x2f4>)
 800a35e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a362:	e6df      	b.n	800a124 <_dtoa_r+0x2c>
 800a364:	2201      	movs	r2, #1
 800a366:	e7dd      	b.n	800a324 <_dtoa_r+0x22c>
 800a368:	2200      	movs	r2, #0
 800a36a:	9208      	str	r2, [sp, #32]
 800a36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a36e:	eb0b 0a02 	add.w	sl, fp, r2
 800a372:	f10a 0901 	add.w	r9, sl, #1
 800a376:	464a      	mov	r2, r9
 800a378:	2a01      	cmp	r2, #1
 800a37a:	bfb8      	it	lt
 800a37c:	2201      	movlt	r2, #1
 800a37e:	e7db      	b.n	800a338 <_dtoa_r+0x240>
 800a380:	2201      	movs	r2, #1
 800a382:	e7f2      	b.n	800a36a <_dtoa_r+0x272>
 800a384:	2401      	movs	r4, #1
 800a386:	2200      	movs	r2, #0
 800a388:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a38c:	f04f 3aff 	mov.w	sl, #4294967295
 800a390:	2100      	movs	r1, #0
 800a392:	46d1      	mov	r9, sl
 800a394:	2212      	movs	r2, #18
 800a396:	9109      	str	r1, [sp, #36]	; 0x24
 800a398:	e7ce      	b.n	800a338 <_dtoa_r+0x240>
 800a39a:	2201      	movs	r2, #1
 800a39c:	9208      	str	r2, [sp, #32]
 800a39e:	e7f5      	b.n	800a38c <_dtoa_r+0x294>
 800a3a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800a3a4:	46d1      	mov	r9, sl
 800a3a6:	4652      	mov	r2, sl
 800a3a8:	e7c6      	b.n	800a338 <_dtoa_r+0x240>
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	6079      	str	r1, [r7, #4]
 800a3ae:	0040      	lsls	r0, r0, #1
 800a3b0:	e7c6      	b.n	800a340 <_dtoa_r+0x248>
 800a3b2:	bf00      	nop
 800a3b4:	f3af 8000 	nop.w
 800a3b8:	636f4361 	.word	0x636f4361
 800a3bc:	3fd287a7 	.word	0x3fd287a7
 800a3c0:	8b60c8b3 	.word	0x8b60c8b3
 800a3c4:	3fc68a28 	.word	0x3fc68a28
 800a3c8:	509f79fb 	.word	0x509f79fb
 800a3cc:	3fd34413 	.word	0x3fd34413
 800a3d0:	0800be99 	.word	0x0800be99
 800a3d4:	0800beb0 	.word	0x0800beb0
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	0800be95 	.word	0x0800be95
 800a3e0:	0800be8c 	.word	0x0800be8c
 800a3e4:	0800be69 	.word	0x0800be69
 800a3e8:	0800bfa8 	.word	0x0800bfa8
 800a3ec:	0800bf0f 	.word	0x0800bf0f
 800a3f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a3f2:	9900      	ldr	r1, [sp, #0]
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	f1b9 0f0e 	cmp.w	r9, #14
 800a3fa:	d872      	bhi.n	800a4e2 <_dtoa_r+0x3ea>
 800a3fc:	2c00      	cmp	r4, #0
 800a3fe:	d070      	beq.n	800a4e2 <_dtoa_r+0x3ea>
 800a400:	f1bb 0f00 	cmp.w	fp, #0
 800a404:	f340 80a6 	ble.w	800a554 <_dtoa_r+0x45c>
 800a408:	49ca      	ldr	r1, [pc, #808]	; (800a734 <_dtoa_r+0x63c>)
 800a40a:	f00b 020f 	and.w	r2, fp, #15
 800a40e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a412:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a416:	ed92 7b00 	vldr	d7, [r2]
 800a41a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a41e:	f000 808d 	beq.w	800a53c <_dtoa_r+0x444>
 800a422:	4ac5      	ldr	r2, [pc, #788]	; (800a738 <_dtoa_r+0x640>)
 800a424:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a428:	ed92 6b08 	vldr	d6, [r2, #32]
 800a42c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800a430:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a434:	f001 010f 	and.w	r1, r1, #15
 800a438:	2203      	movs	r2, #3
 800a43a:	48bf      	ldr	r0, [pc, #764]	; (800a738 <_dtoa_r+0x640>)
 800a43c:	2900      	cmp	r1, #0
 800a43e:	d17f      	bne.n	800a540 <_dtoa_r+0x448>
 800a440:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a444:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a44c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a44e:	2900      	cmp	r1, #0
 800a450:	f000 80b2 	beq.w	800a5b8 <_dtoa_r+0x4c0>
 800a454:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a458:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a45c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a464:	f140 80a8 	bpl.w	800a5b8 <_dtoa_r+0x4c0>
 800a468:	f1b9 0f00 	cmp.w	r9, #0
 800a46c:	f000 80a4 	beq.w	800a5b8 <_dtoa_r+0x4c0>
 800a470:	f1ba 0f00 	cmp.w	sl, #0
 800a474:	dd31      	ble.n	800a4da <_dtoa_r+0x3e2>
 800a476:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a47a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a47e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a482:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a486:	3201      	adds	r2, #1
 800a488:	4650      	mov	r0, sl
 800a48a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a48e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a492:	ee07 2a90 	vmov	s15, r2
 800a496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a49a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a49e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a4a2:	9c03      	ldr	r4, [sp, #12]
 800a4a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a4a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f040 8086 	bne.w	800a5be <_dtoa_r+0x4c6>
 800a4b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a4b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a4ba:	ec42 1b17 	vmov	d7, r1, r2
 800a4be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c6:	f300 8272 	bgt.w	800a9ae <_dtoa_r+0x8b6>
 800a4ca:	eeb1 7b47 	vneg.f64	d7, d7
 800a4ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d6:	f100 8267 	bmi.w	800a9a8 <_dtoa_r+0x8b0>
 800a4da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a4de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a4e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4e4:	2a00      	cmp	r2, #0
 800a4e6:	f2c0 8129 	blt.w	800a73c <_dtoa_r+0x644>
 800a4ea:	f1bb 0f0e 	cmp.w	fp, #14
 800a4ee:	f300 8125 	bgt.w	800a73c <_dtoa_r+0x644>
 800a4f2:	4b90      	ldr	r3, [pc, #576]	; (800a734 <_dtoa_r+0x63c>)
 800a4f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4f8:	ed93 6b00 	vldr	d6, [r3]
 800a4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f280 80c3 	bge.w	800a68a <_dtoa_r+0x592>
 800a504:	f1b9 0f00 	cmp.w	r9, #0
 800a508:	f300 80bf 	bgt.w	800a68a <_dtoa_r+0x592>
 800a50c:	f040 824c 	bne.w	800a9a8 <_dtoa_r+0x8b0>
 800a510:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a514:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a518:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a51c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a524:	464c      	mov	r4, r9
 800a526:	464f      	mov	r7, r9
 800a528:	f280 8222 	bge.w	800a970 <_dtoa_r+0x878>
 800a52c:	f8dd 8000 	ldr.w	r8, [sp]
 800a530:	2331      	movs	r3, #49	; 0x31
 800a532:	f808 3b01 	strb.w	r3, [r8], #1
 800a536:	f10b 0b01 	add.w	fp, fp, #1
 800a53a:	e21e      	b.n	800a97a <_dtoa_r+0x882>
 800a53c:	2202      	movs	r2, #2
 800a53e:	e77c      	b.n	800a43a <_dtoa_r+0x342>
 800a540:	07cc      	lsls	r4, r1, #31
 800a542:	d504      	bpl.n	800a54e <_dtoa_r+0x456>
 800a544:	ed90 6b00 	vldr	d6, [r0]
 800a548:	3201      	adds	r2, #1
 800a54a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a54e:	1049      	asrs	r1, r1, #1
 800a550:	3008      	adds	r0, #8
 800a552:	e773      	b.n	800a43c <_dtoa_r+0x344>
 800a554:	d02e      	beq.n	800a5b4 <_dtoa_r+0x4bc>
 800a556:	f1cb 0100 	rsb	r1, fp, #0
 800a55a:	4a76      	ldr	r2, [pc, #472]	; (800a734 <_dtoa_r+0x63c>)
 800a55c:	f001 000f 	and.w	r0, r1, #15
 800a560:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a564:	ed92 7b00 	vldr	d7, [r2]
 800a568:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a56c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a570:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a574:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a578:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a57c:	486e      	ldr	r0, [pc, #440]	; (800a738 <_dtoa_r+0x640>)
 800a57e:	1109      	asrs	r1, r1, #4
 800a580:	2400      	movs	r4, #0
 800a582:	2202      	movs	r2, #2
 800a584:	b939      	cbnz	r1, 800a596 <_dtoa_r+0x49e>
 800a586:	2c00      	cmp	r4, #0
 800a588:	f43f af60 	beq.w	800a44c <_dtoa_r+0x354>
 800a58c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a594:	e75a      	b.n	800a44c <_dtoa_r+0x354>
 800a596:	07cf      	lsls	r7, r1, #31
 800a598:	d509      	bpl.n	800a5ae <_dtoa_r+0x4b6>
 800a59a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a59e:	ed90 7b00 	vldr	d7, [r0]
 800a5a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a5a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a5aa:	3201      	adds	r2, #1
 800a5ac:	2401      	movs	r4, #1
 800a5ae:	1049      	asrs	r1, r1, #1
 800a5b0:	3008      	adds	r0, #8
 800a5b2:	e7e7      	b.n	800a584 <_dtoa_r+0x48c>
 800a5b4:	2202      	movs	r2, #2
 800a5b6:	e749      	b.n	800a44c <_dtoa_r+0x354>
 800a5b8:	465f      	mov	r7, fp
 800a5ba:	4648      	mov	r0, r9
 800a5bc:	e765      	b.n	800a48a <_dtoa_r+0x392>
 800a5be:	ec42 1b17 	vmov	d7, r1, r2
 800a5c2:	4a5c      	ldr	r2, [pc, #368]	; (800a734 <_dtoa_r+0x63c>)
 800a5c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a5c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a5cc:	9a00      	ldr	r2, [sp, #0]
 800a5ce:	1814      	adds	r4, r2, r0
 800a5d0:	9a08      	ldr	r2, [sp, #32]
 800a5d2:	b352      	cbz	r2, 800a62a <_dtoa_r+0x532>
 800a5d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a5d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a5dc:	f8dd 8000 	ldr.w	r8, [sp]
 800a5e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a5e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a5e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a5f0:	ee14 2a90 	vmov	r2, s9
 800a5f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a5f8:	3230      	adds	r2, #48	; 0x30
 800a5fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a5fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a606:	f808 2b01 	strb.w	r2, [r8], #1
 800a60a:	d439      	bmi.n	800a680 <_dtoa_r+0x588>
 800a60c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a610:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a618:	d472      	bmi.n	800a700 <_dtoa_r+0x608>
 800a61a:	45a0      	cmp	r8, r4
 800a61c:	f43f af5d 	beq.w	800a4da <_dtoa_r+0x3e2>
 800a620:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a624:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a628:	e7e0      	b.n	800a5ec <_dtoa_r+0x4f4>
 800a62a:	f8dd 8000 	ldr.w	r8, [sp]
 800a62e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a632:	4621      	mov	r1, r4
 800a634:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a638:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a63c:	ee14 2a90 	vmov	r2, s9
 800a640:	3230      	adds	r2, #48	; 0x30
 800a642:	f808 2b01 	strb.w	r2, [r8], #1
 800a646:	45a0      	cmp	r8, r4
 800a648:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a64c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a650:	d118      	bne.n	800a684 <_dtoa_r+0x58c>
 800a652:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a656:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a65a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a662:	dc4d      	bgt.n	800a700 <_dtoa_r+0x608>
 800a664:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a668:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a670:	f57f af33 	bpl.w	800a4da <_dtoa_r+0x3e2>
 800a674:	4688      	mov	r8, r1
 800a676:	3901      	subs	r1, #1
 800a678:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a67c:	2b30      	cmp	r3, #48	; 0x30
 800a67e:	d0f9      	beq.n	800a674 <_dtoa_r+0x57c>
 800a680:	46bb      	mov	fp, r7
 800a682:	e02a      	b.n	800a6da <_dtoa_r+0x5e2>
 800a684:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a688:	e7d6      	b.n	800a638 <_dtoa_r+0x540>
 800a68a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a68e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a692:	f8dd 8000 	ldr.w	r8, [sp]
 800a696:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a69a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a69e:	ee15 3a10 	vmov	r3, s10
 800a6a2:	3330      	adds	r3, #48	; 0x30
 800a6a4:	f808 3b01 	strb.w	r3, [r8], #1
 800a6a8:	9b00      	ldr	r3, [sp, #0]
 800a6aa:	eba8 0303 	sub.w	r3, r8, r3
 800a6ae:	4599      	cmp	r9, r3
 800a6b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a6b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a6b8:	d133      	bne.n	800a722 <_dtoa_r+0x62a>
 800a6ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a6be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c6:	dc1a      	bgt.n	800a6fe <_dtoa_r+0x606>
 800a6c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800a6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d0:	d103      	bne.n	800a6da <_dtoa_r+0x5e2>
 800a6d2:	ee15 3a10 	vmov	r3, s10
 800a6d6:	07d9      	lsls	r1, r3, #31
 800a6d8:	d411      	bmi.n	800a6fe <_dtoa_r+0x606>
 800a6da:	4629      	mov	r1, r5
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f000 fc15 	bl	800af0c <_Bfree>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a6e6:	f888 3000 	strb.w	r3, [r8]
 800a6ea:	f10b 0301 	add.w	r3, fp, #1
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f43f ad4d 	beq.w	800a192 <_dtoa_r+0x9a>
 800a6f8:	f8c3 8000 	str.w	r8, [r3]
 800a6fc:	e549      	b.n	800a192 <_dtoa_r+0x9a>
 800a6fe:	465f      	mov	r7, fp
 800a700:	4643      	mov	r3, r8
 800a702:	4698      	mov	r8, r3
 800a704:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a708:	2a39      	cmp	r2, #57	; 0x39
 800a70a:	d106      	bne.n	800a71a <_dtoa_r+0x622>
 800a70c:	9a00      	ldr	r2, [sp, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d1f7      	bne.n	800a702 <_dtoa_r+0x60a>
 800a712:	9900      	ldr	r1, [sp, #0]
 800a714:	2230      	movs	r2, #48	; 0x30
 800a716:	3701      	adds	r7, #1
 800a718:	700a      	strb	r2, [r1, #0]
 800a71a:	781a      	ldrb	r2, [r3, #0]
 800a71c:	3201      	adds	r2, #1
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e7ae      	b.n	800a680 <_dtoa_r+0x588>
 800a722:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a726:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	d1b2      	bne.n	800a696 <_dtoa_r+0x59e>
 800a730:	e7d3      	b.n	800a6da <_dtoa_r+0x5e2>
 800a732:	bf00      	nop
 800a734:	0800bfa8 	.word	0x0800bfa8
 800a738:	0800bf80 	.word	0x0800bf80
 800a73c:	9908      	ldr	r1, [sp, #32]
 800a73e:	2900      	cmp	r1, #0
 800a740:	f000 80d1 	beq.w	800a8e6 <_dtoa_r+0x7ee>
 800a744:	9907      	ldr	r1, [sp, #28]
 800a746:	2901      	cmp	r1, #1
 800a748:	f300 80b4 	bgt.w	800a8b4 <_dtoa_r+0x7bc>
 800a74c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a74e:	2900      	cmp	r1, #0
 800a750:	f000 80ac 	beq.w	800a8ac <_dtoa_r+0x7b4>
 800a754:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a758:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a75c:	461c      	mov	r4, r3
 800a75e:	930a      	str	r3, [sp, #40]	; 0x28
 800a760:	9b05      	ldr	r3, [sp, #20]
 800a762:	4413      	add	r3, r2
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	9b06      	ldr	r3, [sp, #24]
 800a768:	2101      	movs	r1, #1
 800a76a:	4413      	add	r3, r2
 800a76c:	4630      	mov	r0, r6
 800a76e:	9306      	str	r3, [sp, #24]
 800a770:	f000 fc88 	bl	800b084 <__i2b>
 800a774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a776:	4607      	mov	r7, r0
 800a778:	f1b8 0f00 	cmp.w	r8, #0
 800a77c:	dd0d      	ble.n	800a79a <_dtoa_r+0x6a2>
 800a77e:	9a06      	ldr	r2, [sp, #24]
 800a780:	2a00      	cmp	r2, #0
 800a782:	dd0a      	ble.n	800a79a <_dtoa_r+0x6a2>
 800a784:	4542      	cmp	r2, r8
 800a786:	9905      	ldr	r1, [sp, #20]
 800a788:	bfa8      	it	ge
 800a78a:	4642      	movge	r2, r8
 800a78c:	1a89      	subs	r1, r1, r2
 800a78e:	9105      	str	r1, [sp, #20]
 800a790:	9906      	ldr	r1, [sp, #24]
 800a792:	eba8 0802 	sub.w	r8, r8, r2
 800a796:	1a8a      	subs	r2, r1, r2
 800a798:	9206      	str	r2, [sp, #24]
 800a79a:	b303      	cbz	r3, 800a7de <_dtoa_r+0x6e6>
 800a79c:	9a08      	ldr	r2, [sp, #32]
 800a79e:	2a00      	cmp	r2, #0
 800a7a0:	f000 80a6 	beq.w	800a8f0 <_dtoa_r+0x7f8>
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	dd13      	ble.n	800a7d0 <_dtoa_r+0x6d8>
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4622      	mov	r2, r4
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a7b0:	f000 fd24 	bl	800b1fc <__pow5mult>
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f000 fc78 	bl	800b0b0 <__multiply>
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	900a      	str	r0, [sp, #40]	; 0x28
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f000 fba1 	bl	800af0c <_Bfree>
 800a7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ce:	4615      	mov	r5, r2
 800a7d0:	1b1a      	subs	r2, r3, r4
 800a7d2:	d004      	beq.n	800a7de <_dtoa_r+0x6e6>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f000 fd10 	bl	800b1fc <__pow5mult>
 800a7dc:	4605      	mov	r5, r0
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f000 fc4f 	bl	800b084 <__i2b>
 800a7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	f340 8082 	ble.w	800a8f4 <_dtoa_r+0x7fc>
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 fd01 	bl	800b1fc <__pow5mult>
 800a7fa:	9b07      	ldr	r3, [sp, #28]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	4604      	mov	r4, r0
 800a800:	dd7b      	ble.n	800a8fa <_dtoa_r+0x802>
 800a802:	2300      	movs	r3, #0
 800a804:	930a      	str	r3, [sp, #40]	; 0x28
 800a806:	6922      	ldr	r2, [r4, #16]
 800a808:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a80c:	6910      	ldr	r0, [r2, #16]
 800a80e:	f000 fbe9 	bl	800afe4 <__hi0bits>
 800a812:	f1c0 0020 	rsb	r0, r0, #32
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	4418      	add	r0, r3
 800a81a:	f010 001f 	ands.w	r0, r0, #31
 800a81e:	f000 808d 	beq.w	800a93c <_dtoa_r+0x844>
 800a822:	f1c0 0220 	rsb	r2, r0, #32
 800a826:	2a04      	cmp	r2, #4
 800a828:	f340 8086 	ble.w	800a938 <_dtoa_r+0x840>
 800a82c:	f1c0 001c 	rsb	r0, r0, #28
 800a830:	9b05      	ldr	r3, [sp, #20]
 800a832:	4403      	add	r3, r0
 800a834:	9305      	str	r3, [sp, #20]
 800a836:	9b06      	ldr	r3, [sp, #24]
 800a838:	4403      	add	r3, r0
 800a83a:	4480      	add	r8, r0
 800a83c:	9306      	str	r3, [sp, #24]
 800a83e:	9b05      	ldr	r3, [sp, #20]
 800a840:	2b00      	cmp	r3, #0
 800a842:	dd05      	ble.n	800a850 <_dtoa_r+0x758>
 800a844:	4629      	mov	r1, r5
 800a846:	461a      	mov	r2, r3
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 fd31 	bl	800b2b0 <__lshift>
 800a84e:	4605      	mov	r5, r0
 800a850:	9b06      	ldr	r3, [sp, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	dd05      	ble.n	800a862 <_dtoa_r+0x76a>
 800a856:	4621      	mov	r1, r4
 800a858:	461a      	mov	r2, r3
 800a85a:	4630      	mov	r0, r6
 800a85c:	f000 fd28 	bl	800b2b0 <__lshift>
 800a860:	4604      	mov	r4, r0
 800a862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d06b      	beq.n	800a940 <_dtoa_r+0x848>
 800a868:	4621      	mov	r1, r4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 fd8c 	bl	800b388 <__mcmp>
 800a870:	2800      	cmp	r0, #0
 800a872:	da65      	bge.n	800a940 <_dtoa_r+0x848>
 800a874:	2300      	movs	r3, #0
 800a876:	4629      	mov	r1, r5
 800a878:	220a      	movs	r2, #10
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 fb68 	bl	800af50 <__multadd>
 800a880:	9b08      	ldr	r3, [sp, #32]
 800a882:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a886:	4605      	mov	r5, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 8192 	beq.w	800abb2 <_dtoa_r+0xaba>
 800a88e:	4639      	mov	r1, r7
 800a890:	2300      	movs	r3, #0
 800a892:	220a      	movs	r2, #10
 800a894:	4630      	mov	r0, r6
 800a896:	f000 fb5b 	bl	800af50 <__multadd>
 800a89a:	f1ba 0f00 	cmp.w	sl, #0
 800a89e:	4607      	mov	r7, r0
 800a8a0:	f300 808e 	bgt.w	800a9c0 <_dtoa_r+0x8c8>
 800a8a4:	9b07      	ldr	r3, [sp, #28]
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	dc51      	bgt.n	800a94e <_dtoa_r+0x856>
 800a8aa:	e089      	b.n	800a9c0 <_dtoa_r+0x8c8>
 800a8ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a8b2:	e751      	b.n	800a758 <_dtoa_r+0x660>
 800a8b4:	f109 34ff 	add.w	r4, r9, #4294967295
 800a8b8:	42a3      	cmp	r3, r4
 800a8ba:	bfbf      	itttt	lt
 800a8bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a8be:	1ae3      	sublt	r3, r4, r3
 800a8c0:	18d2      	addlt	r2, r2, r3
 800a8c2:	4613      	movlt	r3, r2
 800a8c4:	bfb7      	itett	lt
 800a8c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a8c8:	1b1c      	subge	r4, r3, r4
 800a8ca:	4623      	movlt	r3, r4
 800a8cc:	2400      	movlt	r4, #0
 800a8ce:	f1b9 0f00 	cmp.w	r9, #0
 800a8d2:	bfb5      	itete	lt
 800a8d4:	9a05      	ldrlt	r2, [sp, #20]
 800a8d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a8da:	eba2 0809 	sublt.w	r8, r2, r9
 800a8de:	464a      	movge	r2, r9
 800a8e0:	bfb8      	it	lt
 800a8e2:	2200      	movlt	r2, #0
 800a8e4:	e73b      	b.n	800a75e <_dtoa_r+0x666>
 800a8e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a8ea:	9f08      	ldr	r7, [sp, #32]
 800a8ec:	461c      	mov	r4, r3
 800a8ee:	e743      	b.n	800a778 <_dtoa_r+0x680>
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	e76f      	b.n	800a7d4 <_dtoa_r+0x6dc>
 800a8f4:	9b07      	ldr	r3, [sp, #28]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	dc18      	bgt.n	800a92c <_dtoa_r+0x834>
 800a8fa:	9b02      	ldr	r3, [sp, #8]
 800a8fc:	b9b3      	cbnz	r3, 800a92c <_dtoa_r+0x834>
 800a8fe:	9b03      	ldr	r3, [sp, #12]
 800a900:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a904:	b9a2      	cbnz	r2, 800a930 <_dtoa_r+0x838>
 800a906:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a90a:	0d12      	lsrs	r2, r2, #20
 800a90c:	0512      	lsls	r2, r2, #20
 800a90e:	b18a      	cbz	r2, 800a934 <_dtoa_r+0x83c>
 800a910:	9b05      	ldr	r3, [sp, #20]
 800a912:	3301      	adds	r3, #1
 800a914:	9305      	str	r3, [sp, #20]
 800a916:	9b06      	ldr	r3, [sp, #24]
 800a918:	3301      	adds	r3, #1
 800a91a:	9306      	str	r3, [sp, #24]
 800a91c:	2301      	movs	r3, #1
 800a91e:	930a      	str	r3, [sp, #40]	; 0x28
 800a920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a922:	2b00      	cmp	r3, #0
 800a924:	f47f af6f 	bne.w	800a806 <_dtoa_r+0x70e>
 800a928:	2001      	movs	r0, #1
 800a92a:	e774      	b.n	800a816 <_dtoa_r+0x71e>
 800a92c:	2300      	movs	r3, #0
 800a92e:	e7f6      	b.n	800a91e <_dtoa_r+0x826>
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	e7f4      	b.n	800a91e <_dtoa_r+0x826>
 800a934:	920a      	str	r2, [sp, #40]	; 0x28
 800a936:	e7f3      	b.n	800a920 <_dtoa_r+0x828>
 800a938:	d081      	beq.n	800a83e <_dtoa_r+0x746>
 800a93a:	4610      	mov	r0, r2
 800a93c:	301c      	adds	r0, #28
 800a93e:	e777      	b.n	800a830 <_dtoa_r+0x738>
 800a940:	f1b9 0f00 	cmp.w	r9, #0
 800a944:	dc37      	bgt.n	800a9b6 <_dtoa_r+0x8be>
 800a946:	9b07      	ldr	r3, [sp, #28]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	dd34      	ble.n	800a9b6 <_dtoa_r+0x8be>
 800a94c:	46ca      	mov	sl, r9
 800a94e:	f1ba 0f00 	cmp.w	sl, #0
 800a952:	d10d      	bne.n	800a970 <_dtoa_r+0x878>
 800a954:	4621      	mov	r1, r4
 800a956:	4653      	mov	r3, sl
 800a958:	2205      	movs	r2, #5
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 faf8 	bl	800af50 <__multadd>
 800a960:	4601      	mov	r1, r0
 800a962:	4604      	mov	r4, r0
 800a964:	4628      	mov	r0, r5
 800a966:	f000 fd0f 	bl	800b388 <__mcmp>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	f73f adde 	bgt.w	800a52c <_dtoa_r+0x434>
 800a970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a972:	f8dd 8000 	ldr.w	r8, [sp]
 800a976:	ea6f 0b03 	mvn.w	fp, r3
 800a97a:	f04f 0900 	mov.w	r9, #0
 800a97e:	4621      	mov	r1, r4
 800a980:	4630      	mov	r0, r6
 800a982:	f000 fac3 	bl	800af0c <_Bfree>
 800a986:	2f00      	cmp	r7, #0
 800a988:	f43f aea7 	beq.w	800a6da <_dtoa_r+0x5e2>
 800a98c:	f1b9 0f00 	cmp.w	r9, #0
 800a990:	d005      	beq.n	800a99e <_dtoa_r+0x8a6>
 800a992:	45b9      	cmp	r9, r7
 800a994:	d003      	beq.n	800a99e <_dtoa_r+0x8a6>
 800a996:	4649      	mov	r1, r9
 800a998:	4630      	mov	r0, r6
 800a99a:	f000 fab7 	bl	800af0c <_Bfree>
 800a99e:	4639      	mov	r1, r7
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 fab3 	bl	800af0c <_Bfree>
 800a9a6:	e698      	b.n	800a6da <_dtoa_r+0x5e2>
 800a9a8:	2400      	movs	r4, #0
 800a9aa:	4627      	mov	r7, r4
 800a9ac:	e7e0      	b.n	800a970 <_dtoa_r+0x878>
 800a9ae:	46bb      	mov	fp, r7
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	e5ba      	b.n	800a52c <_dtoa_r+0x434>
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	46ca      	mov	sl, r9
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 8100 	beq.w	800abc0 <_dtoa_r+0xac8>
 800a9c0:	f1b8 0f00 	cmp.w	r8, #0
 800a9c4:	dd05      	ble.n	800a9d2 <_dtoa_r+0x8da>
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f000 fc70 	bl	800b2b0 <__lshift>
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d05d      	beq.n	800aa94 <_dtoa_r+0x99c>
 800a9d8:	6879      	ldr	r1, [r7, #4]
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f000 fa56 	bl	800ae8c <_Balloc>
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	b928      	cbnz	r0, 800a9f0 <_dtoa_r+0x8f8>
 800a9e4:	4b82      	ldr	r3, [pc, #520]	; (800abf0 <_dtoa_r+0xaf8>)
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9ec:	f7ff bb9a 	b.w	800a124 <_dtoa_r+0x2c>
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	3202      	adds	r2, #2
 800a9f4:	0092      	lsls	r2, r2, #2
 800a9f6:	f107 010c 	add.w	r1, r7, #12
 800a9fa:	300c      	adds	r0, #12
 800a9fc:	f7fe fbc0 	bl	8009180 <memcpy>
 800aa00:	2201      	movs	r2, #1
 800aa02:	4641      	mov	r1, r8
 800aa04:	4630      	mov	r0, r6
 800aa06:	f000 fc53 	bl	800b2b0 <__lshift>
 800aa0a:	9b00      	ldr	r3, [sp, #0]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	9305      	str	r3, [sp, #20]
 800aa10:	9b00      	ldr	r3, [sp, #0]
 800aa12:	4453      	add	r3, sl
 800aa14:	9309      	str	r3, [sp, #36]	; 0x24
 800aa16:	9b02      	ldr	r3, [sp, #8]
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	46b9      	mov	r9, r7
 800aa1e:	9308      	str	r3, [sp, #32]
 800aa20:	4607      	mov	r7, r0
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	4621      	mov	r1, r4
 800aa26:	3b01      	subs	r3, #1
 800aa28:	4628      	mov	r0, r5
 800aa2a:	9302      	str	r3, [sp, #8]
 800aa2c:	f7ff fad8 	bl	8009fe0 <quorem>
 800aa30:	4603      	mov	r3, r0
 800aa32:	3330      	adds	r3, #48	; 0x30
 800aa34:	9006      	str	r0, [sp, #24]
 800aa36:	4649      	mov	r1, r9
 800aa38:	4628      	mov	r0, r5
 800aa3a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa3c:	f000 fca4 	bl	800b388 <__mcmp>
 800aa40:	463a      	mov	r2, r7
 800aa42:	4682      	mov	sl, r0
 800aa44:	4621      	mov	r1, r4
 800aa46:	4630      	mov	r0, r6
 800aa48:	f000 fcba 	bl	800b3c0 <__mdiff>
 800aa4c:	68c2      	ldr	r2, [r0, #12]
 800aa4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa50:	4680      	mov	r8, r0
 800aa52:	bb0a      	cbnz	r2, 800aa98 <_dtoa_r+0x9a0>
 800aa54:	4601      	mov	r1, r0
 800aa56:	4628      	mov	r0, r5
 800aa58:	f000 fc96 	bl	800b388 <__mcmp>
 800aa5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa5e:	4602      	mov	r2, r0
 800aa60:	4641      	mov	r1, r8
 800aa62:	4630      	mov	r0, r6
 800aa64:	920e      	str	r2, [sp, #56]	; 0x38
 800aa66:	930a      	str	r3, [sp, #40]	; 0x28
 800aa68:	f000 fa50 	bl	800af0c <_Bfree>
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800aa74:	ea43 0102 	orr.w	r1, r3, r2
 800aa78:	9b08      	ldr	r3, [sp, #32]
 800aa7a:	430b      	orrs	r3, r1
 800aa7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7e:	d10d      	bne.n	800aa9c <_dtoa_r+0x9a4>
 800aa80:	2b39      	cmp	r3, #57	; 0x39
 800aa82:	d029      	beq.n	800aad8 <_dtoa_r+0x9e0>
 800aa84:	f1ba 0f00 	cmp.w	sl, #0
 800aa88:	dd01      	ble.n	800aa8e <_dtoa_r+0x996>
 800aa8a:	9b06      	ldr	r3, [sp, #24]
 800aa8c:	3331      	adds	r3, #49	; 0x31
 800aa8e:	9a02      	ldr	r2, [sp, #8]
 800aa90:	7013      	strb	r3, [r2, #0]
 800aa92:	e774      	b.n	800a97e <_dtoa_r+0x886>
 800aa94:	4638      	mov	r0, r7
 800aa96:	e7b8      	b.n	800aa0a <_dtoa_r+0x912>
 800aa98:	2201      	movs	r2, #1
 800aa9a:	e7e1      	b.n	800aa60 <_dtoa_r+0x968>
 800aa9c:	f1ba 0f00 	cmp.w	sl, #0
 800aaa0:	db06      	blt.n	800aab0 <_dtoa_r+0x9b8>
 800aaa2:	9907      	ldr	r1, [sp, #28]
 800aaa4:	ea41 0a0a 	orr.w	sl, r1, sl
 800aaa8:	9908      	ldr	r1, [sp, #32]
 800aaaa:	ea5a 0101 	orrs.w	r1, sl, r1
 800aaae:	d120      	bne.n	800aaf2 <_dtoa_r+0x9fa>
 800aab0:	2a00      	cmp	r2, #0
 800aab2:	ddec      	ble.n	800aa8e <_dtoa_r+0x996>
 800aab4:	4629      	mov	r1, r5
 800aab6:	2201      	movs	r2, #1
 800aab8:	4630      	mov	r0, r6
 800aaba:	9305      	str	r3, [sp, #20]
 800aabc:	f000 fbf8 	bl	800b2b0 <__lshift>
 800aac0:	4621      	mov	r1, r4
 800aac2:	4605      	mov	r5, r0
 800aac4:	f000 fc60 	bl	800b388 <__mcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	9b05      	ldr	r3, [sp, #20]
 800aacc:	dc02      	bgt.n	800aad4 <_dtoa_r+0x9dc>
 800aace:	d1de      	bne.n	800aa8e <_dtoa_r+0x996>
 800aad0:	07da      	lsls	r2, r3, #31
 800aad2:	d5dc      	bpl.n	800aa8e <_dtoa_r+0x996>
 800aad4:	2b39      	cmp	r3, #57	; 0x39
 800aad6:	d1d8      	bne.n	800aa8a <_dtoa_r+0x992>
 800aad8:	9a02      	ldr	r2, [sp, #8]
 800aada:	2339      	movs	r3, #57	; 0x39
 800aadc:	7013      	strb	r3, [r2, #0]
 800aade:	4643      	mov	r3, r8
 800aae0:	4698      	mov	r8, r3
 800aae2:	3b01      	subs	r3, #1
 800aae4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800aae8:	2a39      	cmp	r2, #57	; 0x39
 800aaea:	d051      	beq.n	800ab90 <_dtoa_r+0xa98>
 800aaec:	3201      	adds	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
 800aaf0:	e745      	b.n	800a97e <_dtoa_r+0x886>
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	dd03      	ble.n	800aafe <_dtoa_r+0xa06>
 800aaf6:	2b39      	cmp	r3, #57	; 0x39
 800aaf8:	d0ee      	beq.n	800aad8 <_dtoa_r+0x9e0>
 800aafa:	3301      	adds	r3, #1
 800aafc:	e7c7      	b.n	800aa8e <_dtoa_r+0x996>
 800aafe:	9a05      	ldr	r2, [sp, #20]
 800ab00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab02:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab06:	428a      	cmp	r2, r1
 800ab08:	d02b      	beq.n	800ab62 <_dtoa_r+0xa6a>
 800ab0a:	4629      	mov	r1, r5
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	220a      	movs	r2, #10
 800ab10:	4630      	mov	r0, r6
 800ab12:	f000 fa1d 	bl	800af50 <__multadd>
 800ab16:	45b9      	cmp	r9, r7
 800ab18:	4605      	mov	r5, r0
 800ab1a:	f04f 0300 	mov.w	r3, #0
 800ab1e:	f04f 020a 	mov.w	r2, #10
 800ab22:	4649      	mov	r1, r9
 800ab24:	4630      	mov	r0, r6
 800ab26:	d107      	bne.n	800ab38 <_dtoa_r+0xa40>
 800ab28:	f000 fa12 	bl	800af50 <__multadd>
 800ab2c:	4681      	mov	r9, r0
 800ab2e:	4607      	mov	r7, r0
 800ab30:	9b05      	ldr	r3, [sp, #20]
 800ab32:	3301      	adds	r3, #1
 800ab34:	9305      	str	r3, [sp, #20]
 800ab36:	e774      	b.n	800aa22 <_dtoa_r+0x92a>
 800ab38:	f000 fa0a 	bl	800af50 <__multadd>
 800ab3c:	4639      	mov	r1, r7
 800ab3e:	4681      	mov	r9, r0
 800ab40:	2300      	movs	r3, #0
 800ab42:	220a      	movs	r2, #10
 800ab44:	4630      	mov	r0, r6
 800ab46:	f000 fa03 	bl	800af50 <__multadd>
 800ab4a:	4607      	mov	r7, r0
 800ab4c:	e7f0      	b.n	800ab30 <_dtoa_r+0xa38>
 800ab4e:	f1ba 0f00 	cmp.w	sl, #0
 800ab52:	9a00      	ldr	r2, [sp, #0]
 800ab54:	bfcc      	ite	gt
 800ab56:	46d0      	movgt	r8, sl
 800ab58:	f04f 0801 	movle.w	r8, #1
 800ab5c:	4490      	add	r8, r2
 800ab5e:	f04f 0900 	mov.w	r9, #0
 800ab62:	4629      	mov	r1, r5
 800ab64:	2201      	movs	r2, #1
 800ab66:	4630      	mov	r0, r6
 800ab68:	9302      	str	r3, [sp, #8]
 800ab6a:	f000 fba1 	bl	800b2b0 <__lshift>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4605      	mov	r5, r0
 800ab72:	f000 fc09 	bl	800b388 <__mcmp>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	dcb1      	bgt.n	800aade <_dtoa_r+0x9e6>
 800ab7a:	d102      	bne.n	800ab82 <_dtoa_r+0xa8a>
 800ab7c:	9b02      	ldr	r3, [sp, #8]
 800ab7e:	07db      	lsls	r3, r3, #31
 800ab80:	d4ad      	bmi.n	800aade <_dtoa_r+0x9e6>
 800ab82:	4643      	mov	r3, r8
 800ab84:	4698      	mov	r8, r3
 800ab86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab8a:	2a30      	cmp	r2, #48	; 0x30
 800ab8c:	d0fa      	beq.n	800ab84 <_dtoa_r+0xa8c>
 800ab8e:	e6f6      	b.n	800a97e <_dtoa_r+0x886>
 800ab90:	9a00      	ldr	r2, [sp, #0]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d1a4      	bne.n	800aae0 <_dtoa_r+0x9e8>
 800ab96:	f10b 0b01 	add.w	fp, fp, #1
 800ab9a:	2331      	movs	r3, #49	; 0x31
 800ab9c:	e778      	b.n	800aa90 <_dtoa_r+0x998>
 800ab9e:	4b15      	ldr	r3, [pc, #84]	; (800abf4 <_dtoa_r+0xafc>)
 800aba0:	f7ff bb12 	b.w	800a1c8 <_dtoa_r+0xd0>
 800aba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f47f aaee 	bne.w	800a188 <_dtoa_r+0x90>
 800abac:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <_dtoa_r+0xb00>)
 800abae:	f7ff bb0b 	b.w	800a1c8 <_dtoa_r+0xd0>
 800abb2:	f1ba 0f00 	cmp.w	sl, #0
 800abb6:	dc03      	bgt.n	800abc0 <_dtoa_r+0xac8>
 800abb8:	9b07      	ldr	r3, [sp, #28]
 800abba:	2b02      	cmp	r3, #2
 800abbc:	f73f aec7 	bgt.w	800a94e <_dtoa_r+0x856>
 800abc0:	f8dd 8000 	ldr.w	r8, [sp]
 800abc4:	4621      	mov	r1, r4
 800abc6:	4628      	mov	r0, r5
 800abc8:	f7ff fa0a 	bl	8009fe0 <quorem>
 800abcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abd0:	f808 3b01 	strb.w	r3, [r8], #1
 800abd4:	9a00      	ldr	r2, [sp, #0]
 800abd6:	eba8 0202 	sub.w	r2, r8, r2
 800abda:	4592      	cmp	sl, r2
 800abdc:	ddb7      	ble.n	800ab4e <_dtoa_r+0xa56>
 800abde:	4629      	mov	r1, r5
 800abe0:	2300      	movs	r3, #0
 800abe2:	220a      	movs	r2, #10
 800abe4:	4630      	mov	r0, r6
 800abe6:	f000 f9b3 	bl	800af50 <__multadd>
 800abea:	4605      	mov	r5, r0
 800abec:	e7ea      	b.n	800abc4 <_dtoa_r+0xacc>
 800abee:	bf00      	nop
 800abf0:	0800bf0f 	.word	0x0800bf0f
 800abf4:	0800be68 	.word	0x0800be68
 800abf8:	0800be8c 	.word	0x0800be8c

0800abfc <__sflush_r>:
 800abfc:	898a      	ldrh	r2, [r1, #12]
 800abfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac02:	4605      	mov	r5, r0
 800ac04:	0710      	lsls	r0, r2, #28
 800ac06:	460c      	mov	r4, r1
 800ac08:	d458      	bmi.n	800acbc <__sflush_r+0xc0>
 800ac0a:	684b      	ldr	r3, [r1, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	dc05      	bgt.n	800ac1c <__sflush_r+0x20>
 800ac10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dc02      	bgt.n	800ac1c <__sflush_r+0x20>
 800ac16:	2000      	movs	r0, #0
 800ac18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac1e:	2e00      	cmp	r6, #0
 800ac20:	d0f9      	beq.n	800ac16 <__sflush_r+0x1a>
 800ac22:	2300      	movs	r3, #0
 800ac24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac28:	682f      	ldr	r7, [r5, #0]
 800ac2a:	602b      	str	r3, [r5, #0]
 800ac2c:	d032      	beq.n	800ac94 <__sflush_r+0x98>
 800ac2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	075a      	lsls	r2, r3, #29
 800ac34:	d505      	bpl.n	800ac42 <__sflush_r+0x46>
 800ac36:	6863      	ldr	r3, [r4, #4]
 800ac38:	1ac0      	subs	r0, r0, r3
 800ac3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac3c:	b10b      	cbz	r3, 800ac42 <__sflush_r+0x46>
 800ac3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac40:	1ac0      	subs	r0, r0, r3
 800ac42:	2300      	movs	r3, #0
 800ac44:	4602      	mov	r2, r0
 800ac46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac48:	6a21      	ldr	r1, [r4, #32]
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	47b0      	blx	r6
 800ac4e:	1c43      	adds	r3, r0, #1
 800ac50:	89a3      	ldrh	r3, [r4, #12]
 800ac52:	d106      	bne.n	800ac62 <__sflush_r+0x66>
 800ac54:	6829      	ldr	r1, [r5, #0]
 800ac56:	291d      	cmp	r1, #29
 800ac58:	d82c      	bhi.n	800acb4 <__sflush_r+0xb8>
 800ac5a:	4a2a      	ldr	r2, [pc, #168]	; (800ad04 <__sflush_r+0x108>)
 800ac5c:	40ca      	lsrs	r2, r1
 800ac5e:	07d6      	lsls	r6, r2, #31
 800ac60:	d528      	bpl.n	800acb4 <__sflush_r+0xb8>
 800ac62:	2200      	movs	r2, #0
 800ac64:	6062      	str	r2, [r4, #4]
 800ac66:	04d9      	lsls	r1, r3, #19
 800ac68:	6922      	ldr	r2, [r4, #16]
 800ac6a:	6022      	str	r2, [r4, #0]
 800ac6c:	d504      	bpl.n	800ac78 <__sflush_r+0x7c>
 800ac6e:	1c42      	adds	r2, r0, #1
 800ac70:	d101      	bne.n	800ac76 <__sflush_r+0x7a>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	b903      	cbnz	r3, 800ac78 <__sflush_r+0x7c>
 800ac76:	6560      	str	r0, [r4, #84]	; 0x54
 800ac78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac7a:	602f      	str	r7, [r5, #0]
 800ac7c:	2900      	cmp	r1, #0
 800ac7e:	d0ca      	beq.n	800ac16 <__sflush_r+0x1a>
 800ac80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac84:	4299      	cmp	r1, r3
 800ac86:	d002      	beq.n	800ac8e <__sflush_r+0x92>
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f7fe fa8f 	bl	80091ac <_free_r>
 800ac8e:	2000      	movs	r0, #0
 800ac90:	6360      	str	r0, [r4, #52]	; 0x34
 800ac92:	e7c1      	b.n	800ac18 <__sflush_r+0x1c>
 800ac94:	6a21      	ldr	r1, [r4, #32]
 800ac96:	2301      	movs	r3, #1
 800ac98:	4628      	mov	r0, r5
 800ac9a:	47b0      	blx	r6
 800ac9c:	1c41      	adds	r1, r0, #1
 800ac9e:	d1c7      	bne.n	800ac30 <__sflush_r+0x34>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0c4      	beq.n	800ac30 <__sflush_r+0x34>
 800aca6:	2b1d      	cmp	r3, #29
 800aca8:	d001      	beq.n	800acae <__sflush_r+0xb2>
 800acaa:	2b16      	cmp	r3, #22
 800acac:	d101      	bne.n	800acb2 <__sflush_r+0xb6>
 800acae:	602f      	str	r7, [r5, #0]
 800acb0:	e7b1      	b.n	800ac16 <__sflush_r+0x1a>
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb8:	81a3      	strh	r3, [r4, #12]
 800acba:	e7ad      	b.n	800ac18 <__sflush_r+0x1c>
 800acbc:	690f      	ldr	r7, [r1, #16]
 800acbe:	2f00      	cmp	r7, #0
 800acc0:	d0a9      	beq.n	800ac16 <__sflush_r+0x1a>
 800acc2:	0793      	lsls	r3, r2, #30
 800acc4:	680e      	ldr	r6, [r1, #0]
 800acc6:	bf08      	it	eq
 800acc8:	694b      	ldreq	r3, [r1, #20]
 800acca:	600f      	str	r7, [r1, #0]
 800accc:	bf18      	it	ne
 800acce:	2300      	movne	r3, #0
 800acd0:	eba6 0807 	sub.w	r8, r6, r7
 800acd4:	608b      	str	r3, [r1, #8]
 800acd6:	f1b8 0f00 	cmp.w	r8, #0
 800acda:	dd9c      	ble.n	800ac16 <__sflush_r+0x1a>
 800acdc:	6a21      	ldr	r1, [r4, #32]
 800acde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ace0:	4643      	mov	r3, r8
 800ace2:	463a      	mov	r2, r7
 800ace4:	4628      	mov	r0, r5
 800ace6:	47b0      	blx	r6
 800ace8:	2800      	cmp	r0, #0
 800acea:	dc06      	bgt.n	800acfa <__sflush_r+0xfe>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acf2:	81a3      	strh	r3, [r4, #12]
 800acf4:	f04f 30ff 	mov.w	r0, #4294967295
 800acf8:	e78e      	b.n	800ac18 <__sflush_r+0x1c>
 800acfa:	4407      	add	r7, r0
 800acfc:	eba8 0800 	sub.w	r8, r8, r0
 800ad00:	e7e9      	b.n	800acd6 <__sflush_r+0xda>
 800ad02:	bf00      	nop
 800ad04:	20400001 	.word	0x20400001

0800ad08 <_fflush_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	690b      	ldr	r3, [r1, #16]
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	460c      	mov	r4, r1
 800ad10:	b913      	cbnz	r3, 800ad18 <_fflush_r+0x10>
 800ad12:	2500      	movs	r5, #0
 800ad14:	4628      	mov	r0, r5
 800ad16:	bd38      	pop	{r3, r4, r5, pc}
 800ad18:	b118      	cbz	r0, 800ad22 <_fflush_r+0x1a>
 800ad1a:	6983      	ldr	r3, [r0, #24]
 800ad1c:	b90b      	cbnz	r3, 800ad22 <_fflush_r+0x1a>
 800ad1e:	f7fe f94b 	bl	8008fb8 <__sinit>
 800ad22:	4b14      	ldr	r3, [pc, #80]	; (800ad74 <_fflush_r+0x6c>)
 800ad24:	429c      	cmp	r4, r3
 800ad26:	d11b      	bne.n	800ad60 <_fflush_r+0x58>
 800ad28:	686c      	ldr	r4, [r5, #4]
 800ad2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0ef      	beq.n	800ad12 <_fflush_r+0xa>
 800ad32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad34:	07d0      	lsls	r0, r2, #31
 800ad36:	d404      	bmi.n	800ad42 <_fflush_r+0x3a>
 800ad38:	0599      	lsls	r1, r3, #22
 800ad3a:	d402      	bmi.n	800ad42 <_fflush_r+0x3a>
 800ad3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad3e:	f7fe f9fe 	bl	800913e <__retarget_lock_acquire_recursive>
 800ad42:	4628      	mov	r0, r5
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7ff ff59 	bl	800abfc <__sflush_r>
 800ad4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad4c:	07da      	lsls	r2, r3, #31
 800ad4e:	4605      	mov	r5, r0
 800ad50:	d4e0      	bmi.n	800ad14 <_fflush_r+0xc>
 800ad52:	89a3      	ldrh	r3, [r4, #12]
 800ad54:	059b      	lsls	r3, r3, #22
 800ad56:	d4dd      	bmi.n	800ad14 <_fflush_r+0xc>
 800ad58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad5a:	f7fe f9f1 	bl	8009140 <__retarget_lock_release_recursive>
 800ad5e:	e7d9      	b.n	800ad14 <_fflush_r+0xc>
 800ad60:	4b05      	ldr	r3, [pc, #20]	; (800ad78 <_fflush_r+0x70>)
 800ad62:	429c      	cmp	r4, r3
 800ad64:	d101      	bne.n	800ad6a <_fflush_r+0x62>
 800ad66:	68ac      	ldr	r4, [r5, #8]
 800ad68:	e7df      	b.n	800ad2a <_fflush_r+0x22>
 800ad6a:	4b04      	ldr	r3, [pc, #16]	; (800ad7c <_fflush_r+0x74>)
 800ad6c:	429c      	cmp	r4, r3
 800ad6e:	bf08      	it	eq
 800ad70:	68ec      	ldreq	r4, [r5, #12]
 800ad72:	e7da      	b.n	800ad2a <_fflush_r+0x22>
 800ad74:	0800be14 	.word	0x0800be14
 800ad78:	0800be34 	.word	0x0800be34
 800ad7c:	0800bdf4 	.word	0x0800bdf4

0800ad80 <_localeconv_r>:
 800ad80:	4800      	ldr	r0, [pc, #0]	; (800ad84 <_localeconv_r+0x4>)
 800ad82:	4770      	bx	lr
 800ad84:	20000164 	.word	0x20000164

0800ad88 <_lseek_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d07      	ldr	r5, [pc, #28]	; (800ada8 <_lseek_r+0x20>)
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	4608      	mov	r0, r1
 800ad90:	4611      	mov	r1, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	602a      	str	r2, [r5, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	f7f7 f996 	bl	80020c8 <_lseek>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d102      	bne.n	800ada6 <_lseek_r+0x1e>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	b103      	cbz	r3, 800ada6 <_lseek_r+0x1e>
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	20010884 	.word	0x20010884

0800adac <__swhatbuf_r>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	460e      	mov	r6, r1
 800adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb4:	2900      	cmp	r1, #0
 800adb6:	b096      	sub	sp, #88	; 0x58
 800adb8:	4614      	mov	r4, r2
 800adba:	461d      	mov	r5, r3
 800adbc:	da07      	bge.n	800adce <__swhatbuf_r+0x22>
 800adbe:	2300      	movs	r3, #0
 800adc0:	602b      	str	r3, [r5, #0]
 800adc2:	89b3      	ldrh	r3, [r6, #12]
 800adc4:	061a      	lsls	r2, r3, #24
 800adc6:	d410      	bmi.n	800adea <__swhatbuf_r+0x3e>
 800adc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adcc:	e00e      	b.n	800adec <__swhatbuf_r+0x40>
 800adce:	466a      	mov	r2, sp
 800add0:	f000 fd84 	bl	800b8dc <_fstat_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	dbf2      	blt.n	800adbe <__swhatbuf_r+0x12>
 800add8:	9a01      	ldr	r2, [sp, #4]
 800adda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ade2:	425a      	negs	r2, r3
 800ade4:	415a      	adcs	r2, r3
 800ade6:	602a      	str	r2, [r5, #0]
 800ade8:	e7ee      	b.n	800adc8 <__swhatbuf_r+0x1c>
 800adea:	2340      	movs	r3, #64	; 0x40
 800adec:	2000      	movs	r0, #0
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	b016      	add	sp, #88	; 0x58
 800adf2:	bd70      	pop	{r4, r5, r6, pc}

0800adf4 <__smakebuf_r>:
 800adf4:	898b      	ldrh	r3, [r1, #12]
 800adf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adf8:	079d      	lsls	r5, r3, #30
 800adfa:	4606      	mov	r6, r0
 800adfc:	460c      	mov	r4, r1
 800adfe:	d507      	bpl.n	800ae10 <__smakebuf_r+0x1c>
 800ae00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	6123      	str	r3, [r4, #16]
 800ae08:	2301      	movs	r3, #1
 800ae0a:	6163      	str	r3, [r4, #20]
 800ae0c:	b002      	add	sp, #8
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	ab01      	add	r3, sp, #4
 800ae12:	466a      	mov	r2, sp
 800ae14:	f7ff ffca 	bl	800adac <__swhatbuf_r>
 800ae18:	9900      	ldr	r1, [sp, #0]
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7fe fa15 	bl	800924c <_malloc_r>
 800ae22:	b948      	cbnz	r0, 800ae38 <__smakebuf_r+0x44>
 800ae24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae28:	059a      	lsls	r2, r3, #22
 800ae2a:	d4ef      	bmi.n	800ae0c <__smakebuf_r+0x18>
 800ae2c:	f023 0303 	bic.w	r3, r3, #3
 800ae30:	f043 0302 	orr.w	r3, r3, #2
 800ae34:	81a3      	strh	r3, [r4, #12]
 800ae36:	e7e3      	b.n	800ae00 <__smakebuf_r+0xc>
 800ae38:	4b0d      	ldr	r3, [pc, #52]	; (800ae70 <__smakebuf_r+0x7c>)
 800ae3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	6020      	str	r0, [r4, #0]
 800ae40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	9b00      	ldr	r3, [sp, #0]
 800ae48:	6163      	str	r3, [r4, #20]
 800ae4a:	9b01      	ldr	r3, [sp, #4]
 800ae4c:	6120      	str	r0, [r4, #16]
 800ae4e:	b15b      	cbz	r3, 800ae68 <__smakebuf_r+0x74>
 800ae50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae54:	4630      	mov	r0, r6
 800ae56:	f000 fd53 	bl	800b900 <_isatty_r>
 800ae5a:	b128      	cbz	r0, 800ae68 <__smakebuf_r+0x74>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	89a0      	ldrh	r0, [r4, #12]
 800ae6a:	4305      	orrs	r5, r0
 800ae6c:	81a5      	strh	r5, [r4, #12]
 800ae6e:	e7cd      	b.n	800ae0c <__smakebuf_r+0x18>
 800ae70:	08008f51 	.word	0x08008f51

0800ae74 <__malloc_lock>:
 800ae74:	4801      	ldr	r0, [pc, #4]	; (800ae7c <__malloc_lock+0x8>)
 800ae76:	f7fe b962 	b.w	800913e <__retarget_lock_acquire_recursive>
 800ae7a:	bf00      	nop
 800ae7c:	2001087c 	.word	0x2001087c

0800ae80 <__malloc_unlock>:
 800ae80:	4801      	ldr	r0, [pc, #4]	; (800ae88 <__malloc_unlock+0x8>)
 800ae82:	f7fe b95d 	b.w	8009140 <__retarget_lock_release_recursive>
 800ae86:	bf00      	nop
 800ae88:	2001087c 	.word	0x2001087c

0800ae8c <_Balloc>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae90:	4604      	mov	r4, r0
 800ae92:	460d      	mov	r5, r1
 800ae94:	b976      	cbnz	r6, 800aeb4 <_Balloc+0x28>
 800ae96:	2010      	movs	r0, #16
 800ae98:	f7fe f954 	bl	8009144 <malloc>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	6260      	str	r0, [r4, #36]	; 0x24
 800aea0:	b920      	cbnz	r0, 800aeac <_Balloc+0x20>
 800aea2:	4b18      	ldr	r3, [pc, #96]	; (800af04 <_Balloc+0x78>)
 800aea4:	4818      	ldr	r0, [pc, #96]	; (800af08 <_Balloc+0x7c>)
 800aea6:	2166      	movs	r1, #102	; 0x66
 800aea8:	f000 fce8 	bl	800b87c <__assert_func>
 800aeac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeb0:	6006      	str	r6, [r0, #0]
 800aeb2:	60c6      	str	r6, [r0, #12]
 800aeb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aeb6:	68f3      	ldr	r3, [r6, #12]
 800aeb8:	b183      	cbz	r3, 800aedc <_Balloc+0x50>
 800aeba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aec2:	b9b8      	cbnz	r0, 800aef4 <_Balloc+0x68>
 800aec4:	2101      	movs	r1, #1
 800aec6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeca:	1d72      	adds	r2, r6, #5
 800aecc:	0092      	lsls	r2, r2, #2
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 fb5a 	bl	800b588 <_calloc_r>
 800aed4:	b160      	cbz	r0, 800aef0 <_Balloc+0x64>
 800aed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeda:	e00e      	b.n	800aefa <_Balloc+0x6e>
 800aedc:	2221      	movs	r2, #33	; 0x21
 800aede:	2104      	movs	r1, #4
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fb51 	bl	800b588 <_calloc_r>
 800aee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee8:	60f0      	str	r0, [r6, #12]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1e4      	bne.n	800aeba <_Balloc+0x2e>
 800aef0:	2000      	movs	r0, #0
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	6802      	ldr	r2, [r0, #0]
 800aef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aefa:	2300      	movs	r3, #0
 800aefc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af00:	e7f7      	b.n	800aef2 <_Balloc+0x66>
 800af02:	bf00      	nop
 800af04:	0800be99 	.word	0x0800be99
 800af08:	0800bf20 	.word	0x0800bf20

0800af0c <_Bfree>:
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af10:	4605      	mov	r5, r0
 800af12:	460c      	mov	r4, r1
 800af14:	b976      	cbnz	r6, 800af34 <_Bfree+0x28>
 800af16:	2010      	movs	r0, #16
 800af18:	f7fe f914 	bl	8009144 <malloc>
 800af1c:	4602      	mov	r2, r0
 800af1e:	6268      	str	r0, [r5, #36]	; 0x24
 800af20:	b920      	cbnz	r0, 800af2c <_Bfree+0x20>
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <_Bfree+0x3c>)
 800af24:	4809      	ldr	r0, [pc, #36]	; (800af4c <_Bfree+0x40>)
 800af26:	218a      	movs	r1, #138	; 0x8a
 800af28:	f000 fca8 	bl	800b87c <__assert_func>
 800af2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af30:	6006      	str	r6, [r0, #0]
 800af32:	60c6      	str	r6, [r0, #12]
 800af34:	b13c      	cbz	r4, 800af46 <_Bfree+0x3a>
 800af36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af38:	6862      	ldr	r2, [r4, #4]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af40:	6021      	str	r1, [r4, #0]
 800af42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af46:	bd70      	pop	{r4, r5, r6, pc}
 800af48:	0800be99 	.word	0x0800be99
 800af4c:	0800bf20 	.word	0x0800bf20

0800af50 <__multadd>:
 800af50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af54:	690e      	ldr	r6, [r1, #16]
 800af56:	4607      	mov	r7, r0
 800af58:	4698      	mov	r8, r3
 800af5a:	460c      	mov	r4, r1
 800af5c:	f101 0014 	add.w	r0, r1, #20
 800af60:	2300      	movs	r3, #0
 800af62:	6805      	ldr	r5, [r0, #0]
 800af64:	b2a9      	uxth	r1, r5
 800af66:	fb02 8101 	mla	r1, r2, r1, r8
 800af6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af6e:	0c2d      	lsrs	r5, r5, #16
 800af70:	fb02 c505 	mla	r5, r2, r5, ip
 800af74:	b289      	uxth	r1, r1
 800af76:	3301      	adds	r3, #1
 800af78:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af7c:	429e      	cmp	r6, r3
 800af7e:	f840 1b04 	str.w	r1, [r0], #4
 800af82:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af86:	dcec      	bgt.n	800af62 <__multadd+0x12>
 800af88:	f1b8 0f00 	cmp.w	r8, #0
 800af8c:	d022      	beq.n	800afd4 <__multadd+0x84>
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	42b3      	cmp	r3, r6
 800af92:	dc19      	bgt.n	800afc8 <__multadd+0x78>
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	4638      	mov	r0, r7
 800af98:	3101      	adds	r1, #1
 800af9a:	f7ff ff77 	bl	800ae8c <_Balloc>
 800af9e:	4605      	mov	r5, r0
 800afa0:	b928      	cbnz	r0, 800afae <__multadd+0x5e>
 800afa2:	4602      	mov	r2, r0
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <__multadd+0x8c>)
 800afa6:	480e      	ldr	r0, [pc, #56]	; (800afe0 <__multadd+0x90>)
 800afa8:	21b5      	movs	r1, #181	; 0xb5
 800afaa:	f000 fc67 	bl	800b87c <__assert_func>
 800afae:	6922      	ldr	r2, [r4, #16]
 800afb0:	3202      	adds	r2, #2
 800afb2:	f104 010c 	add.w	r1, r4, #12
 800afb6:	0092      	lsls	r2, r2, #2
 800afb8:	300c      	adds	r0, #12
 800afba:	f7fe f8e1 	bl	8009180 <memcpy>
 800afbe:	4621      	mov	r1, r4
 800afc0:	4638      	mov	r0, r7
 800afc2:	f7ff ffa3 	bl	800af0c <_Bfree>
 800afc6:	462c      	mov	r4, r5
 800afc8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800afcc:	3601      	adds	r6, #1
 800afce:	f8c3 8014 	str.w	r8, [r3, #20]
 800afd2:	6126      	str	r6, [r4, #16]
 800afd4:	4620      	mov	r0, r4
 800afd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afda:	bf00      	nop
 800afdc:	0800bf0f 	.word	0x0800bf0f
 800afe0:	0800bf20 	.word	0x0800bf20

0800afe4 <__hi0bits>:
 800afe4:	0c03      	lsrs	r3, r0, #16
 800afe6:	041b      	lsls	r3, r3, #16
 800afe8:	b9d3      	cbnz	r3, 800b020 <__hi0bits+0x3c>
 800afea:	0400      	lsls	r0, r0, #16
 800afec:	2310      	movs	r3, #16
 800afee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aff2:	bf04      	itt	eq
 800aff4:	0200      	lsleq	r0, r0, #8
 800aff6:	3308      	addeq	r3, #8
 800aff8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800affc:	bf04      	itt	eq
 800affe:	0100      	lsleq	r0, r0, #4
 800b000:	3304      	addeq	r3, #4
 800b002:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b006:	bf04      	itt	eq
 800b008:	0080      	lsleq	r0, r0, #2
 800b00a:	3302      	addeq	r3, #2
 800b00c:	2800      	cmp	r0, #0
 800b00e:	db05      	blt.n	800b01c <__hi0bits+0x38>
 800b010:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b014:	f103 0301 	add.w	r3, r3, #1
 800b018:	bf08      	it	eq
 800b01a:	2320      	moveq	r3, #32
 800b01c:	4618      	mov	r0, r3
 800b01e:	4770      	bx	lr
 800b020:	2300      	movs	r3, #0
 800b022:	e7e4      	b.n	800afee <__hi0bits+0xa>

0800b024 <__lo0bits>:
 800b024:	6803      	ldr	r3, [r0, #0]
 800b026:	f013 0207 	ands.w	r2, r3, #7
 800b02a:	4601      	mov	r1, r0
 800b02c:	d00b      	beq.n	800b046 <__lo0bits+0x22>
 800b02e:	07da      	lsls	r2, r3, #31
 800b030:	d424      	bmi.n	800b07c <__lo0bits+0x58>
 800b032:	0798      	lsls	r0, r3, #30
 800b034:	bf49      	itett	mi
 800b036:	085b      	lsrmi	r3, r3, #1
 800b038:	089b      	lsrpl	r3, r3, #2
 800b03a:	2001      	movmi	r0, #1
 800b03c:	600b      	strmi	r3, [r1, #0]
 800b03e:	bf5c      	itt	pl
 800b040:	600b      	strpl	r3, [r1, #0]
 800b042:	2002      	movpl	r0, #2
 800b044:	4770      	bx	lr
 800b046:	b298      	uxth	r0, r3
 800b048:	b9b0      	cbnz	r0, 800b078 <__lo0bits+0x54>
 800b04a:	0c1b      	lsrs	r3, r3, #16
 800b04c:	2010      	movs	r0, #16
 800b04e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b052:	bf04      	itt	eq
 800b054:	0a1b      	lsreq	r3, r3, #8
 800b056:	3008      	addeq	r0, #8
 800b058:	071a      	lsls	r2, r3, #28
 800b05a:	bf04      	itt	eq
 800b05c:	091b      	lsreq	r3, r3, #4
 800b05e:	3004      	addeq	r0, #4
 800b060:	079a      	lsls	r2, r3, #30
 800b062:	bf04      	itt	eq
 800b064:	089b      	lsreq	r3, r3, #2
 800b066:	3002      	addeq	r0, #2
 800b068:	07da      	lsls	r2, r3, #31
 800b06a:	d403      	bmi.n	800b074 <__lo0bits+0x50>
 800b06c:	085b      	lsrs	r3, r3, #1
 800b06e:	f100 0001 	add.w	r0, r0, #1
 800b072:	d005      	beq.n	800b080 <__lo0bits+0x5c>
 800b074:	600b      	str	r3, [r1, #0]
 800b076:	4770      	bx	lr
 800b078:	4610      	mov	r0, r2
 800b07a:	e7e8      	b.n	800b04e <__lo0bits+0x2a>
 800b07c:	2000      	movs	r0, #0
 800b07e:	4770      	bx	lr
 800b080:	2020      	movs	r0, #32
 800b082:	4770      	bx	lr

0800b084 <__i2b>:
 800b084:	b510      	push	{r4, lr}
 800b086:	460c      	mov	r4, r1
 800b088:	2101      	movs	r1, #1
 800b08a:	f7ff feff 	bl	800ae8c <_Balloc>
 800b08e:	4602      	mov	r2, r0
 800b090:	b928      	cbnz	r0, 800b09e <__i2b+0x1a>
 800b092:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <__i2b+0x24>)
 800b094:	4805      	ldr	r0, [pc, #20]	; (800b0ac <__i2b+0x28>)
 800b096:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b09a:	f000 fbef 	bl	800b87c <__assert_func>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	6144      	str	r4, [r0, #20]
 800b0a2:	6103      	str	r3, [r0, #16]
 800b0a4:	bd10      	pop	{r4, pc}
 800b0a6:	bf00      	nop
 800b0a8:	0800bf0f 	.word	0x0800bf0f
 800b0ac:	0800bf20 	.word	0x0800bf20

0800b0b0 <__multiply>:
 800b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	690a      	ldr	r2, [r1, #16]
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	bfb8      	it	lt
 800b0be:	460b      	movlt	r3, r1
 800b0c0:	460d      	mov	r5, r1
 800b0c2:	bfbc      	itt	lt
 800b0c4:	4625      	movlt	r5, r4
 800b0c6:	461c      	movlt	r4, r3
 800b0c8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b0cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b0d0:	68ab      	ldr	r3, [r5, #8]
 800b0d2:	6869      	ldr	r1, [r5, #4]
 800b0d4:	eb0a 0709 	add.w	r7, sl, r9
 800b0d8:	42bb      	cmp	r3, r7
 800b0da:	b085      	sub	sp, #20
 800b0dc:	bfb8      	it	lt
 800b0de:	3101      	addlt	r1, #1
 800b0e0:	f7ff fed4 	bl	800ae8c <_Balloc>
 800b0e4:	b930      	cbnz	r0, 800b0f4 <__multiply+0x44>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	4b42      	ldr	r3, [pc, #264]	; (800b1f4 <__multiply+0x144>)
 800b0ea:	4843      	ldr	r0, [pc, #268]	; (800b1f8 <__multiply+0x148>)
 800b0ec:	f240 115d 	movw	r1, #349	; 0x15d
 800b0f0:	f000 fbc4 	bl	800b87c <__assert_func>
 800b0f4:	f100 0614 	add.w	r6, r0, #20
 800b0f8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b0fc:	4633      	mov	r3, r6
 800b0fe:	2200      	movs	r2, #0
 800b100:	4543      	cmp	r3, r8
 800b102:	d31e      	bcc.n	800b142 <__multiply+0x92>
 800b104:	f105 0c14 	add.w	ip, r5, #20
 800b108:	f104 0314 	add.w	r3, r4, #20
 800b10c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b110:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b114:	9202      	str	r2, [sp, #8]
 800b116:	ebac 0205 	sub.w	r2, ip, r5
 800b11a:	3a15      	subs	r2, #21
 800b11c:	f022 0203 	bic.w	r2, r2, #3
 800b120:	3204      	adds	r2, #4
 800b122:	f105 0115 	add.w	r1, r5, #21
 800b126:	458c      	cmp	ip, r1
 800b128:	bf38      	it	cc
 800b12a:	2204      	movcc	r2, #4
 800b12c:	9201      	str	r2, [sp, #4]
 800b12e:	9a02      	ldr	r2, [sp, #8]
 800b130:	9303      	str	r3, [sp, #12]
 800b132:	429a      	cmp	r2, r3
 800b134:	d808      	bhi.n	800b148 <__multiply+0x98>
 800b136:	2f00      	cmp	r7, #0
 800b138:	dc55      	bgt.n	800b1e6 <__multiply+0x136>
 800b13a:	6107      	str	r7, [r0, #16]
 800b13c:	b005      	add	sp, #20
 800b13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b142:	f843 2b04 	str.w	r2, [r3], #4
 800b146:	e7db      	b.n	800b100 <__multiply+0x50>
 800b148:	f8b3 a000 	ldrh.w	sl, [r3]
 800b14c:	f1ba 0f00 	cmp.w	sl, #0
 800b150:	d020      	beq.n	800b194 <__multiply+0xe4>
 800b152:	f105 0e14 	add.w	lr, r5, #20
 800b156:	46b1      	mov	r9, r6
 800b158:	2200      	movs	r2, #0
 800b15a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b15e:	f8d9 b000 	ldr.w	fp, [r9]
 800b162:	b2a1      	uxth	r1, r4
 800b164:	fa1f fb8b 	uxth.w	fp, fp
 800b168:	fb0a b101 	mla	r1, sl, r1, fp
 800b16c:	4411      	add	r1, r2
 800b16e:	f8d9 2000 	ldr.w	r2, [r9]
 800b172:	0c24      	lsrs	r4, r4, #16
 800b174:	0c12      	lsrs	r2, r2, #16
 800b176:	fb0a 2404 	mla	r4, sl, r4, r2
 800b17a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b17e:	b289      	uxth	r1, r1
 800b180:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b184:	45f4      	cmp	ip, lr
 800b186:	f849 1b04 	str.w	r1, [r9], #4
 800b18a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b18e:	d8e4      	bhi.n	800b15a <__multiply+0xaa>
 800b190:	9901      	ldr	r1, [sp, #4]
 800b192:	5072      	str	r2, [r6, r1]
 800b194:	9a03      	ldr	r2, [sp, #12]
 800b196:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b19a:	3304      	adds	r3, #4
 800b19c:	f1b9 0f00 	cmp.w	r9, #0
 800b1a0:	d01f      	beq.n	800b1e2 <__multiply+0x132>
 800b1a2:	6834      	ldr	r4, [r6, #0]
 800b1a4:	f105 0114 	add.w	r1, r5, #20
 800b1a8:	46b6      	mov	lr, r6
 800b1aa:	f04f 0a00 	mov.w	sl, #0
 800b1ae:	880a      	ldrh	r2, [r1, #0]
 800b1b0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b1b4:	fb09 b202 	mla	r2, r9, r2, fp
 800b1b8:	4492      	add	sl, r2
 800b1ba:	b2a4      	uxth	r4, r4
 800b1bc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b1c0:	f84e 4b04 	str.w	r4, [lr], #4
 800b1c4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b1c8:	f8be 2000 	ldrh.w	r2, [lr]
 800b1cc:	0c24      	lsrs	r4, r4, #16
 800b1ce:	fb09 2404 	mla	r4, r9, r4, r2
 800b1d2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b1d6:	458c      	cmp	ip, r1
 800b1d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b1dc:	d8e7      	bhi.n	800b1ae <__multiply+0xfe>
 800b1de:	9a01      	ldr	r2, [sp, #4]
 800b1e0:	50b4      	str	r4, [r6, r2]
 800b1e2:	3604      	adds	r6, #4
 800b1e4:	e7a3      	b.n	800b12e <__multiply+0x7e>
 800b1e6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1a5      	bne.n	800b13a <__multiply+0x8a>
 800b1ee:	3f01      	subs	r7, #1
 800b1f0:	e7a1      	b.n	800b136 <__multiply+0x86>
 800b1f2:	bf00      	nop
 800b1f4:	0800bf0f 	.word	0x0800bf0f
 800b1f8:	0800bf20 	.word	0x0800bf20

0800b1fc <__pow5mult>:
 800b1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b200:	4615      	mov	r5, r2
 800b202:	f012 0203 	ands.w	r2, r2, #3
 800b206:	4606      	mov	r6, r0
 800b208:	460f      	mov	r7, r1
 800b20a:	d007      	beq.n	800b21c <__pow5mult+0x20>
 800b20c:	4c25      	ldr	r4, [pc, #148]	; (800b2a4 <__pow5mult+0xa8>)
 800b20e:	3a01      	subs	r2, #1
 800b210:	2300      	movs	r3, #0
 800b212:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b216:	f7ff fe9b 	bl	800af50 <__multadd>
 800b21a:	4607      	mov	r7, r0
 800b21c:	10ad      	asrs	r5, r5, #2
 800b21e:	d03d      	beq.n	800b29c <__pow5mult+0xa0>
 800b220:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b222:	b97c      	cbnz	r4, 800b244 <__pow5mult+0x48>
 800b224:	2010      	movs	r0, #16
 800b226:	f7fd ff8d 	bl	8009144 <malloc>
 800b22a:	4602      	mov	r2, r0
 800b22c:	6270      	str	r0, [r6, #36]	; 0x24
 800b22e:	b928      	cbnz	r0, 800b23c <__pow5mult+0x40>
 800b230:	4b1d      	ldr	r3, [pc, #116]	; (800b2a8 <__pow5mult+0xac>)
 800b232:	481e      	ldr	r0, [pc, #120]	; (800b2ac <__pow5mult+0xb0>)
 800b234:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b238:	f000 fb20 	bl	800b87c <__assert_func>
 800b23c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b240:	6004      	str	r4, [r0, #0]
 800b242:	60c4      	str	r4, [r0, #12]
 800b244:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b248:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b24c:	b94c      	cbnz	r4, 800b262 <__pow5mult+0x66>
 800b24e:	f240 2171 	movw	r1, #625	; 0x271
 800b252:	4630      	mov	r0, r6
 800b254:	f7ff ff16 	bl	800b084 <__i2b>
 800b258:	2300      	movs	r3, #0
 800b25a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b25e:	4604      	mov	r4, r0
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	f04f 0900 	mov.w	r9, #0
 800b266:	07eb      	lsls	r3, r5, #31
 800b268:	d50a      	bpl.n	800b280 <__pow5mult+0x84>
 800b26a:	4639      	mov	r1, r7
 800b26c:	4622      	mov	r2, r4
 800b26e:	4630      	mov	r0, r6
 800b270:	f7ff ff1e 	bl	800b0b0 <__multiply>
 800b274:	4639      	mov	r1, r7
 800b276:	4680      	mov	r8, r0
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff fe47 	bl	800af0c <_Bfree>
 800b27e:	4647      	mov	r7, r8
 800b280:	106d      	asrs	r5, r5, #1
 800b282:	d00b      	beq.n	800b29c <__pow5mult+0xa0>
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	b938      	cbnz	r0, 800b298 <__pow5mult+0x9c>
 800b288:	4622      	mov	r2, r4
 800b28a:	4621      	mov	r1, r4
 800b28c:	4630      	mov	r0, r6
 800b28e:	f7ff ff0f 	bl	800b0b0 <__multiply>
 800b292:	6020      	str	r0, [r4, #0]
 800b294:	f8c0 9000 	str.w	r9, [r0]
 800b298:	4604      	mov	r4, r0
 800b29a:	e7e4      	b.n	800b266 <__pow5mult+0x6a>
 800b29c:	4638      	mov	r0, r7
 800b29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2a2:	bf00      	nop
 800b2a4:	0800c070 	.word	0x0800c070
 800b2a8:	0800be99 	.word	0x0800be99
 800b2ac:	0800bf20 	.word	0x0800bf20

0800b2b0 <__lshift>:
 800b2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	6849      	ldr	r1, [r1, #4]
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	4607      	mov	r7, r0
 800b2c2:	4691      	mov	r9, r2
 800b2c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2c8:	f108 0601 	add.w	r6, r8, #1
 800b2cc:	42b3      	cmp	r3, r6
 800b2ce:	db0b      	blt.n	800b2e8 <__lshift+0x38>
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff fddb 	bl	800ae8c <_Balloc>
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	b948      	cbnz	r0, 800b2ee <__lshift+0x3e>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	4b28      	ldr	r3, [pc, #160]	; (800b380 <__lshift+0xd0>)
 800b2de:	4829      	ldr	r0, [pc, #164]	; (800b384 <__lshift+0xd4>)
 800b2e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2e4:	f000 faca 	bl	800b87c <__assert_func>
 800b2e8:	3101      	adds	r1, #1
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	e7ee      	b.n	800b2cc <__lshift+0x1c>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f100 0114 	add.w	r1, r0, #20
 800b2f4:	f100 0210 	add.w	r2, r0, #16
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	4553      	cmp	r3, sl
 800b2fc:	db33      	blt.n	800b366 <__lshift+0xb6>
 800b2fe:	6920      	ldr	r0, [r4, #16]
 800b300:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b304:	f104 0314 	add.w	r3, r4, #20
 800b308:	f019 091f 	ands.w	r9, r9, #31
 800b30c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b310:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b314:	d02b      	beq.n	800b36e <__lshift+0xbe>
 800b316:	f1c9 0e20 	rsb	lr, r9, #32
 800b31a:	468a      	mov	sl, r1
 800b31c:	2200      	movs	r2, #0
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	fa00 f009 	lsl.w	r0, r0, r9
 800b324:	4302      	orrs	r2, r0
 800b326:	f84a 2b04 	str.w	r2, [sl], #4
 800b32a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32e:	459c      	cmp	ip, r3
 800b330:	fa22 f20e 	lsr.w	r2, r2, lr
 800b334:	d8f3      	bhi.n	800b31e <__lshift+0x6e>
 800b336:	ebac 0304 	sub.w	r3, ip, r4
 800b33a:	3b15      	subs	r3, #21
 800b33c:	f023 0303 	bic.w	r3, r3, #3
 800b340:	3304      	adds	r3, #4
 800b342:	f104 0015 	add.w	r0, r4, #21
 800b346:	4584      	cmp	ip, r0
 800b348:	bf38      	it	cc
 800b34a:	2304      	movcc	r3, #4
 800b34c:	50ca      	str	r2, [r1, r3]
 800b34e:	b10a      	cbz	r2, 800b354 <__lshift+0xa4>
 800b350:	f108 0602 	add.w	r6, r8, #2
 800b354:	3e01      	subs	r6, #1
 800b356:	4638      	mov	r0, r7
 800b358:	612e      	str	r6, [r5, #16]
 800b35a:	4621      	mov	r1, r4
 800b35c:	f7ff fdd6 	bl	800af0c <_Bfree>
 800b360:	4628      	mov	r0, r5
 800b362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b366:	f842 0f04 	str.w	r0, [r2, #4]!
 800b36a:	3301      	adds	r3, #1
 800b36c:	e7c5      	b.n	800b2fa <__lshift+0x4a>
 800b36e:	3904      	subs	r1, #4
 800b370:	f853 2b04 	ldr.w	r2, [r3], #4
 800b374:	f841 2f04 	str.w	r2, [r1, #4]!
 800b378:	459c      	cmp	ip, r3
 800b37a:	d8f9      	bhi.n	800b370 <__lshift+0xc0>
 800b37c:	e7ea      	b.n	800b354 <__lshift+0xa4>
 800b37e:	bf00      	nop
 800b380:	0800bf0f 	.word	0x0800bf0f
 800b384:	0800bf20 	.word	0x0800bf20

0800b388 <__mcmp>:
 800b388:	b530      	push	{r4, r5, lr}
 800b38a:	6902      	ldr	r2, [r0, #16]
 800b38c:	690c      	ldr	r4, [r1, #16]
 800b38e:	1b12      	subs	r2, r2, r4
 800b390:	d10e      	bne.n	800b3b0 <__mcmp+0x28>
 800b392:	f100 0314 	add.w	r3, r0, #20
 800b396:	3114      	adds	r1, #20
 800b398:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b39c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3a8:	42a5      	cmp	r5, r4
 800b3aa:	d003      	beq.n	800b3b4 <__mcmp+0x2c>
 800b3ac:	d305      	bcc.n	800b3ba <__mcmp+0x32>
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	bd30      	pop	{r4, r5, pc}
 800b3b4:	4283      	cmp	r3, r0
 800b3b6:	d3f3      	bcc.n	800b3a0 <__mcmp+0x18>
 800b3b8:	e7fa      	b.n	800b3b0 <__mcmp+0x28>
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b3be:	e7f7      	b.n	800b3b0 <__mcmp+0x28>

0800b3c0 <__mdiff>:
 800b3c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c4:	460c      	mov	r4, r1
 800b3c6:	4606      	mov	r6, r0
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4617      	mov	r7, r2
 800b3ce:	f7ff ffdb 	bl	800b388 <__mcmp>
 800b3d2:	1e05      	subs	r5, r0, #0
 800b3d4:	d110      	bne.n	800b3f8 <__mdiff+0x38>
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4630      	mov	r0, r6
 800b3da:	f7ff fd57 	bl	800ae8c <_Balloc>
 800b3de:	b930      	cbnz	r0, 800b3ee <__mdiff+0x2e>
 800b3e0:	4b39      	ldr	r3, [pc, #228]	; (800b4c8 <__mdiff+0x108>)
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	f240 2132 	movw	r1, #562	; 0x232
 800b3e8:	4838      	ldr	r0, [pc, #224]	; (800b4cc <__mdiff+0x10c>)
 800b3ea:	f000 fa47 	bl	800b87c <__assert_func>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f8:	bfa4      	itt	ge
 800b3fa:	463b      	movge	r3, r7
 800b3fc:	4627      	movge	r7, r4
 800b3fe:	4630      	mov	r0, r6
 800b400:	6879      	ldr	r1, [r7, #4]
 800b402:	bfa6      	itte	ge
 800b404:	461c      	movge	r4, r3
 800b406:	2500      	movge	r5, #0
 800b408:	2501      	movlt	r5, #1
 800b40a:	f7ff fd3f 	bl	800ae8c <_Balloc>
 800b40e:	b920      	cbnz	r0, 800b41a <__mdiff+0x5a>
 800b410:	4b2d      	ldr	r3, [pc, #180]	; (800b4c8 <__mdiff+0x108>)
 800b412:	4602      	mov	r2, r0
 800b414:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b418:	e7e6      	b.n	800b3e8 <__mdiff+0x28>
 800b41a:	693e      	ldr	r6, [r7, #16]
 800b41c:	60c5      	str	r5, [r0, #12]
 800b41e:	6925      	ldr	r5, [r4, #16]
 800b420:	f107 0114 	add.w	r1, r7, #20
 800b424:	f104 0914 	add.w	r9, r4, #20
 800b428:	f100 0e14 	add.w	lr, r0, #20
 800b42c:	f107 0210 	add.w	r2, r7, #16
 800b430:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b434:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b438:	46f2      	mov	sl, lr
 800b43a:	2700      	movs	r7, #0
 800b43c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b440:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b444:	fa1f f883 	uxth.w	r8, r3
 800b448:	fa17 f78b 	uxtah	r7, r7, fp
 800b44c:	0c1b      	lsrs	r3, r3, #16
 800b44e:	eba7 0808 	sub.w	r8, r7, r8
 800b452:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b456:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b45a:	fa1f f888 	uxth.w	r8, r8
 800b45e:	141f      	asrs	r7, r3, #16
 800b460:	454d      	cmp	r5, r9
 800b462:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b466:	f84a 3b04 	str.w	r3, [sl], #4
 800b46a:	d8e7      	bhi.n	800b43c <__mdiff+0x7c>
 800b46c:	1b2b      	subs	r3, r5, r4
 800b46e:	3b15      	subs	r3, #21
 800b470:	f023 0303 	bic.w	r3, r3, #3
 800b474:	3304      	adds	r3, #4
 800b476:	3415      	adds	r4, #21
 800b478:	42a5      	cmp	r5, r4
 800b47a:	bf38      	it	cc
 800b47c:	2304      	movcc	r3, #4
 800b47e:	4419      	add	r1, r3
 800b480:	4473      	add	r3, lr
 800b482:	469e      	mov	lr, r3
 800b484:	460d      	mov	r5, r1
 800b486:	4565      	cmp	r5, ip
 800b488:	d30e      	bcc.n	800b4a8 <__mdiff+0xe8>
 800b48a:	f10c 0203 	add.w	r2, ip, #3
 800b48e:	1a52      	subs	r2, r2, r1
 800b490:	f022 0203 	bic.w	r2, r2, #3
 800b494:	3903      	subs	r1, #3
 800b496:	458c      	cmp	ip, r1
 800b498:	bf38      	it	cc
 800b49a:	2200      	movcc	r2, #0
 800b49c:	441a      	add	r2, r3
 800b49e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4a2:	b17b      	cbz	r3, 800b4c4 <__mdiff+0x104>
 800b4a4:	6106      	str	r6, [r0, #16]
 800b4a6:	e7a5      	b.n	800b3f4 <__mdiff+0x34>
 800b4a8:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4ac:	fa17 f488 	uxtah	r4, r7, r8
 800b4b0:	1422      	asrs	r2, r4, #16
 800b4b2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b4b6:	b2a4      	uxth	r4, r4
 800b4b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b4bc:	f84e 4b04 	str.w	r4, [lr], #4
 800b4c0:	1417      	asrs	r7, r2, #16
 800b4c2:	e7e0      	b.n	800b486 <__mdiff+0xc6>
 800b4c4:	3e01      	subs	r6, #1
 800b4c6:	e7ea      	b.n	800b49e <__mdiff+0xde>
 800b4c8:	0800bf0f 	.word	0x0800bf0f
 800b4cc:	0800bf20 	.word	0x0800bf20

0800b4d0 <__d2b>:
 800b4d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4d4:	4689      	mov	r9, r1
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	ec57 6b10 	vmov	r6, r7, d0
 800b4dc:	4690      	mov	r8, r2
 800b4de:	f7ff fcd5 	bl	800ae8c <_Balloc>
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	b930      	cbnz	r0, 800b4f4 <__d2b+0x24>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	4b25      	ldr	r3, [pc, #148]	; (800b580 <__d2b+0xb0>)
 800b4ea:	4826      	ldr	r0, [pc, #152]	; (800b584 <__d2b+0xb4>)
 800b4ec:	f240 310a 	movw	r1, #778	; 0x30a
 800b4f0:	f000 f9c4 	bl	800b87c <__assert_func>
 800b4f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4fc:	bb35      	cbnz	r5, 800b54c <__d2b+0x7c>
 800b4fe:	2e00      	cmp	r6, #0
 800b500:	9301      	str	r3, [sp, #4]
 800b502:	d028      	beq.n	800b556 <__d2b+0x86>
 800b504:	4668      	mov	r0, sp
 800b506:	9600      	str	r6, [sp, #0]
 800b508:	f7ff fd8c 	bl	800b024 <__lo0bits>
 800b50c:	9900      	ldr	r1, [sp, #0]
 800b50e:	b300      	cbz	r0, 800b552 <__d2b+0x82>
 800b510:	9a01      	ldr	r2, [sp, #4]
 800b512:	f1c0 0320 	rsb	r3, r0, #32
 800b516:	fa02 f303 	lsl.w	r3, r2, r3
 800b51a:	430b      	orrs	r3, r1
 800b51c:	40c2      	lsrs	r2, r0
 800b51e:	6163      	str	r3, [r4, #20]
 800b520:	9201      	str	r2, [sp, #4]
 800b522:	9b01      	ldr	r3, [sp, #4]
 800b524:	61a3      	str	r3, [r4, #24]
 800b526:	2b00      	cmp	r3, #0
 800b528:	bf14      	ite	ne
 800b52a:	2202      	movne	r2, #2
 800b52c:	2201      	moveq	r2, #1
 800b52e:	6122      	str	r2, [r4, #16]
 800b530:	b1d5      	cbz	r5, 800b568 <__d2b+0x98>
 800b532:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b536:	4405      	add	r5, r0
 800b538:	f8c9 5000 	str.w	r5, [r9]
 800b53c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b540:	f8c8 0000 	str.w	r0, [r8]
 800b544:	4620      	mov	r0, r4
 800b546:	b003      	add	sp, #12
 800b548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b54c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b550:	e7d5      	b.n	800b4fe <__d2b+0x2e>
 800b552:	6161      	str	r1, [r4, #20]
 800b554:	e7e5      	b.n	800b522 <__d2b+0x52>
 800b556:	a801      	add	r0, sp, #4
 800b558:	f7ff fd64 	bl	800b024 <__lo0bits>
 800b55c:	9b01      	ldr	r3, [sp, #4]
 800b55e:	6163      	str	r3, [r4, #20]
 800b560:	2201      	movs	r2, #1
 800b562:	6122      	str	r2, [r4, #16]
 800b564:	3020      	adds	r0, #32
 800b566:	e7e3      	b.n	800b530 <__d2b+0x60>
 800b568:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b56c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b570:	f8c9 0000 	str.w	r0, [r9]
 800b574:	6918      	ldr	r0, [r3, #16]
 800b576:	f7ff fd35 	bl	800afe4 <__hi0bits>
 800b57a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b57e:	e7df      	b.n	800b540 <__d2b+0x70>
 800b580:	0800bf0f 	.word	0x0800bf0f
 800b584:	0800bf20 	.word	0x0800bf20

0800b588 <_calloc_r>:
 800b588:	b513      	push	{r0, r1, r4, lr}
 800b58a:	434a      	muls	r2, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	9201      	str	r2, [sp, #4]
 800b590:	f7fd fe5c 	bl	800924c <_malloc_r>
 800b594:	4604      	mov	r4, r0
 800b596:	b118      	cbz	r0, 800b5a0 <_calloc_r+0x18>
 800b598:	9a01      	ldr	r2, [sp, #4]
 800b59a:	2100      	movs	r1, #0
 800b59c:	f7fd fdfe 	bl	800919c <memset>
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	b002      	add	sp, #8
 800b5a4:	bd10      	pop	{r4, pc}

0800b5a6 <__sfputc_r>:
 800b5a6:	6893      	ldr	r3, [r2, #8]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	b410      	push	{r4}
 800b5ae:	6093      	str	r3, [r2, #8]
 800b5b0:	da08      	bge.n	800b5c4 <__sfputc_r+0x1e>
 800b5b2:	6994      	ldr	r4, [r2, #24]
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	db01      	blt.n	800b5bc <__sfputc_r+0x16>
 800b5b8:	290a      	cmp	r1, #10
 800b5ba:	d103      	bne.n	800b5c4 <__sfputc_r+0x1e>
 800b5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c0:	f7fe bc2c 	b.w	8009e1c <__swbuf_r>
 800b5c4:	6813      	ldr	r3, [r2, #0]
 800b5c6:	1c58      	adds	r0, r3, #1
 800b5c8:	6010      	str	r0, [r2, #0]
 800b5ca:	7019      	strb	r1, [r3, #0]
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <__sfputs_r>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460f      	mov	r7, r1
 800b5da:	4614      	mov	r4, r2
 800b5dc:	18d5      	adds	r5, r2, r3
 800b5de:	42ac      	cmp	r4, r5
 800b5e0:	d101      	bne.n	800b5e6 <__sfputs_r+0x12>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e007      	b.n	800b5f6 <__sfputs_r+0x22>
 800b5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ea:	463a      	mov	r2, r7
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ffda 	bl	800b5a6 <__sfputc_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d1f3      	bne.n	800b5de <__sfputs_r+0xa>
 800b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5f8 <_vfiprintf_r>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	b09d      	sub	sp, #116	; 0x74
 800b600:	4614      	mov	r4, r2
 800b602:	4698      	mov	r8, r3
 800b604:	4606      	mov	r6, r0
 800b606:	b118      	cbz	r0, 800b610 <_vfiprintf_r+0x18>
 800b608:	6983      	ldr	r3, [r0, #24]
 800b60a:	b90b      	cbnz	r3, 800b610 <_vfiprintf_r+0x18>
 800b60c:	f7fd fcd4 	bl	8008fb8 <__sinit>
 800b610:	4b89      	ldr	r3, [pc, #548]	; (800b838 <_vfiprintf_r+0x240>)
 800b612:	429d      	cmp	r5, r3
 800b614:	d11b      	bne.n	800b64e <_vfiprintf_r+0x56>
 800b616:	6875      	ldr	r5, [r6, #4]
 800b618:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b61a:	07d9      	lsls	r1, r3, #31
 800b61c:	d405      	bmi.n	800b62a <_vfiprintf_r+0x32>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	059a      	lsls	r2, r3, #22
 800b622:	d402      	bmi.n	800b62a <_vfiprintf_r+0x32>
 800b624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b626:	f7fd fd8a 	bl	800913e <__retarget_lock_acquire_recursive>
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	071b      	lsls	r3, r3, #28
 800b62e:	d501      	bpl.n	800b634 <_vfiprintf_r+0x3c>
 800b630:	692b      	ldr	r3, [r5, #16]
 800b632:	b9eb      	cbnz	r3, 800b670 <_vfiprintf_r+0x78>
 800b634:	4629      	mov	r1, r5
 800b636:	4630      	mov	r0, r6
 800b638:	f7fe fc54 	bl	8009ee4 <__swsetup_r>
 800b63c:	b1c0      	cbz	r0, 800b670 <_vfiprintf_r+0x78>
 800b63e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b640:	07dc      	lsls	r4, r3, #31
 800b642:	d50e      	bpl.n	800b662 <_vfiprintf_r+0x6a>
 800b644:	f04f 30ff 	mov.w	r0, #4294967295
 800b648:	b01d      	add	sp, #116	; 0x74
 800b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64e:	4b7b      	ldr	r3, [pc, #492]	; (800b83c <_vfiprintf_r+0x244>)
 800b650:	429d      	cmp	r5, r3
 800b652:	d101      	bne.n	800b658 <_vfiprintf_r+0x60>
 800b654:	68b5      	ldr	r5, [r6, #8]
 800b656:	e7df      	b.n	800b618 <_vfiprintf_r+0x20>
 800b658:	4b79      	ldr	r3, [pc, #484]	; (800b840 <_vfiprintf_r+0x248>)
 800b65a:	429d      	cmp	r5, r3
 800b65c:	bf08      	it	eq
 800b65e:	68f5      	ldreq	r5, [r6, #12]
 800b660:	e7da      	b.n	800b618 <_vfiprintf_r+0x20>
 800b662:	89ab      	ldrh	r3, [r5, #12]
 800b664:	0598      	lsls	r0, r3, #22
 800b666:	d4ed      	bmi.n	800b644 <_vfiprintf_r+0x4c>
 800b668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b66a:	f7fd fd69 	bl	8009140 <__retarget_lock_release_recursive>
 800b66e:	e7e9      	b.n	800b644 <_vfiprintf_r+0x4c>
 800b670:	2300      	movs	r3, #0
 800b672:	9309      	str	r3, [sp, #36]	; 0x24
 800b674:	2320      	movs	r3, #32
 800b676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b67a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b67e:	2330      	movs	r3, #48	; 0x30
 800b680:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b844 <_vfiprintf_r+0x24c>
 800b684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b688:	f04f 0901 	mov.w	r9, #1
 800b68c:	4623      	mov	r3, r4
 800b68e:	469a      	mov	sl, r3
 800b690:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b694:	b10a      	cbz	r2, 800b69a <_vfiprintf_r+0xa2>
 800b696:	2a25      	cmp	r2, #37	; 0x25
 800b698:	d1f9      	bne.n	800b68e <_vfiprintf_r+0x96>
 800b69a:	ebba 0b04 	subs.w	fp, sl, r4
 800b69e:	d00b      	beq.n	800b6b8 <_vfiprintf_r+0xc0>
 800b6a0:	465b      	mov	r3, fp
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7ff ff94 	bl	800b5d4 <__sfputs_r>
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	f000 80aa 	beq.w	800b806 <_vfiprintf_r+0x20e>
 800b6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6b4:	445a      	add	r2, fp
 800b6b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	f000 80a2 	beq.w	800b806 <_vfiprintf_r+0x20e>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6cc:	f10a 0a01 	add.w	sl, sl, #1
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	9307      	str	r3, [sp, #28]
 800b6d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d8:	931a      	str	r3, [sp, #104]	; 0x68
 800b6da:	4654      	mov	r4, sl
 800b6dc:	2205      	movs	r2, #5
 800b6de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e2:	4858      	ldr	r0, [pc, #352]	; (800b844 <_vfiprintf_r+0x24c>)
 800b6e4:	f7f4 fdb4 	bl	8000250 <memchr>
 800b6e8:	9a04      	ldr	r2, [sp, #16]
 800b6ea:	b9d8      	cbnz	r0, 800b724 <_vfiprintf_r+0x12c>
 800b6ec:	06d1      	lsls	r1, r2, #27
 800b6ee:	bf44      	itt	mi
 800b6f0:	2320      	movmi	r3, #32
 800b6f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f6:	0713      	lsls	r3, r2, #28
 800b6f8:	bf44      	itt	mi
 800b6fa:	232b      	movmi	r3, #43	; 0x2b
 800b6fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b700:	f89a 3000 	ldrb.w	r3, [sl]
 800b704:	2b2a      	cmp	r3, #42	; 0x2a
 800b706:	d015      	beq.n	800b734 <_vfiprintf_r+0x13c>
 800b708:	9a07      	ldr	r2, [sp, #28]
 800b70a:	4654      	mov	r4, sl
 800b70c:	2000      	movs	r0, #0
 800b70e:	f04f 0c0a 	mov.w	ip, #10
 800b712:	4621      	mov	r1, r4
 800b714:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b718:	3b30      	subs	r3, #48	; 0x30
 800b71a:	2b09      	cmp	r3, #9
 800b71c:	d94e      	bls.n	800b7bc <_vfiprintf_r+0x1c4>
 800b71e:	b1b0      	cbz	r0, 800b74e <_vfiprintf_r+0x156>
 800b720:	9207      	str	r2, [sp, #28]
 800b722:	e014      	b.n	800b74e <_vfiprintf_r+0x156>
 800b724:	eba0 0308 	sub.w	r3, r0, r8
 800b728:	fa09 f303 	lsl.w	r3, r9, r3
 800b72c:	4313      	orrs	r3, r2
 800b72e:	9304      	str	r3, [sp, #16]
 800b730:	46a2      	mov	sl, r4
 800b732:	e7d2      	b.n	800b6da <_vfiprintf_r+0xe2>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	1d19      	adds	r1, r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	9103      	str	r1, [sp, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bfbb      	ittet	lt
 800b740:	425b      	neglt	r3, r3
 800b742:	f042 0202 	orrlt.w	r2, r2, #2
 800b746:	9307      	strge	r3, [sp, #28]
 800b748:	9307      	strlt	r3, [sp, #28]
 800b74a:	bfb8      	it	lt
 800b74c:	9204      	strlt	r2, [sp, #16]
 800b74e:	7823      	ldrb	r3, [r4, #0]
 800b750:	2b2e      	cmp	r3, #46	; 0x2e
 800b752:	d10c      	bne.n	800b76e <_vfiprintf_r+0x176>
 800b754:	7863      	ldrb	r3, [r4, #1]
 800b756:	2b2a      	cmp	r3, #42	; 0x2a
 800b758:	d135      	bne.n	800b7c6 <_vfiprintf_r+0x1ce>
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	1d1a      	adds	r2, r3, #4
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	9203      	str	r2, [sp, #12]
 800b762:	2b00      	cmp	r3, #0
 800b764:	bfb8      	it	lt
 800b766:	f04f 33ff 	movlt.w	r3, #4294967295
 800b76a:	3402      	adds	r4, #2
 800b76c:	9305      	str	r3, [sp, #20]
 800b76e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b854 <_vfiprintf_r+0x25c>
 800b772:	7821      	ldrb	r1, [r4, #0]
 800b774:	2203      	movs	r2, #3
 800b776:	4650      	mov	r0, sl
 800b778:	f7f4 fd6a 	bl	8000250 <memchr>
 800b77c:	b140      	cbz	r0, 800b790 <_vfiprintf_r+0x198>
 800b77e:	2340      	movs	r3, #64	; 0x40
 800b780:	eba0 000a 	sub.w	r0, r0, sl
 800b784:	fa03 f000 	lsl.w	r0, r3, r0
 800b788:	9b04      	ldr	r3, [sp, #16]
 800b78a:	4303      	orrs	r3, r0
 800b78c:	3401      	adds	r4, #1
 800b78e:	9304      	str	r3, [sp, #16]
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	482c      	ldr	r0, [pc, #176]	; (800b848 <_vfiprintf_r+0x250>)
 800b796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b79a:	2206      	movs	r2, #6
 800b79c:	f7f4 fd58 	bl	8000250 <memchr>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d03f      	beq.n	800b824 <_vfiprintf_r+0x22c>
 800b7a4:	4b29      	ldr	r3, [pc, #164]	; (800b84c <_vfiprintf_r+0x254>)
 800b7a6:	bb1b      	cbnz	r3, 800b7f0 <_vfiprintf_r+0x1f8>
 800b7a8:	9b03      	ldr	r3, [sp, #12]
 800b7aa:	3307      	adds	r3, #7
 800b7ac:	f023 0307 	bic.w	r3, r3, #7
 800b7b0:	3308      	adds	r3, #8
 800b7b2:	9303      	str	r3, [sp, #12]
 800b7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b6:	443b      	add	r3, r7
 800b7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ba:	e767      	b.n	800b68c <_vfiprintf_r+0x94>
 800b7bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	e7a5      	b.n	800b712 <_vfiprintf_r+0x11a>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	3401      	adds	r4, #1
 800b7ca:	9305      	str	r3, [sp, #20]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	f04f 0c0a 	mov.w	ip, #10
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d8:	3a30      	subs	r2, #48	; 0x30
 800b7da:	2a09      	cmp	r2, #9
 800b7dc:	d903      	bls.n	800b7e6 <_vfiprintf_r+0x1ee>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d0c5      	beq.n	800b76e <_vfiprintf_r+0x176>
 800b7e2:	9105      	str	r1, [sp, #20]
 800b7e4:	e7c3      	b.n	800b76e <_vfiprintf_r+0x176>
 800b7e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e7f0      	b.n	800b7d2 <_vfiprintf_r+0x1da>
 800b7f0:	ab03      	add	r3, sp, #12
 800b7f2:	9300      	str	r3, [sp, #0]
 800b7f4:	462a      	mov	r2, r5
 800b7f6:	4b16      	ldr	r3, [pc, #88]	; (800b850 <_vfiprintf_r+0x258>)
 800b7f8:	a904      	add	r1, sp, #16
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7fd fe10 	bl	8009420 <_printf_float>
 800b800:	4607      	mov	r7, r0
 800b802:	1c78      	adds	r0, r7, #1
 800b804:	d1d6      	bne.n	800b7b4 <_vfiprintf_r+0x1bc>
 800b806:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b808:	07d9      	lsls	r1, r3, #31
 800b80a:	d405      	bmi.n	800b818 <_vfiprintf_r+0x220>
 800b80c:	89ab      	ldrh	r3, [r5, #12]
 800b80e:	059a      	lsls	r2, r3, #22
 800b810:	d402      	bmi.n	800b818 <_vfiprintf_r+0x220>
 800b812:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b814:	f7fd fc94 	bl	8009140 <__retarget_lock_release_recursive>
 800b818:	89ab      	ldrh	r3, [r5, #12]
 800b81a:	065b      	lsls	r3, r3, #25
 800b81c:	f53f af12 	bmi.w	800b644 <_vfiprintf_r+0x4c>
 800b820:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b822:	e711      	b.n	800b648 <_vfiprintf_r+0x50>
 800b824:	ab03      	add	r3, sp, #12
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	462a      	mov	r2, r5
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <_vfiprintf_r+0x258>)
 800b82c:	a904      	add	r1, sp, #16
 800b82e:	4630      	mov	r0, r6
 800b830:	f7fe f882 	bl	8009938 <_printf_i>
 800b834:	e7e4      	b.n	800b800 <_vfiprintf_r+0x208>
 800b836:	bf00      	nop
 800b838:	0800be14 	.word	0x0800be14
 800b83c:	0800be34 	.word	0x0800be34
 800b840:	0800bdf4 	.word	0x0800bdf4
 800b844:	0800c07c 	.word	0x0800c07c
 800b848:	0800c086 	.word	0x0800c086
 800b84c:	08009421 	.word	0x08009421
 800b850:	0800b5d5 	.word	0x0800b5d5
 800b854:	0800c082 	.word	0x0800c082

0800b858 <_read_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4d07      	ldr	r5, [pc, #28]	; (800b878 <_read_r+0x20>)
 800b85c:	4604      	mov	r4, r0
 800b85e:	4608      	mov	r0, r1
 800b860:	4611      	mov	r1, r2
 800b862:	2200      	movs	r2, #0
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f7f6 fbce 	bl	8002008 <_read>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_read_r+0x1e>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_read_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20010884 	.word	0x20010884

0800b87c <__assert_func>:
 800b87c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b87e:	4614      	mov	r4, r2
 800b880:	461a      	mov	r2, r3
 800b882:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <__assert_func+0x2c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4605      	mov	r5, r0
 800b888:	68d8      	ldr	r0, [r3, #12]
 800b88a:	b14c      	cbz	r4, 800b8a0 <__assert_func+0x24>
 800b88c:	4b07      	ldr	r3, [pc, #28]	; (800b8ac <__assert_func+0x30>)
 800b88e:	9100      	str	r1, [sp, #0]
 800b890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b894:	4906      	ldr	r1, [pc, #24]	; (800b8b0 <__assert_func+0x34>)
 800b896:	462b      	mov	r3, r5
 800b898:	f000 f80e 	bl	800b8b8 <fiprintf>
 800b89c:	f000 f85f 	bl	800b95e <abort>
 800b8a0:	4b04      	ldr	r3, [pc, #16]	; (800b8b4 <__assert_func+0x38>)
 800b8a2:	461c      	mov	r4, r3
 800b8a4:	e7f3      	b.n	800b88e <__assert_func+0x12>
 800b8a6:	bf00      	nop
 800b8a8:	20000010 	.word	0x20000010
 800b8ac:	0800c08d 	.word	0x0800c08d
 800b8b0:	0800c09a 	.word	0x0800c09a
 800b8b4:	0800c0c8 	.word	0x0800c0c8

0800b8b8 <fiprintf>:
 800b8b8:	b40e      	push	{r1, r2, r3}
 800b8ba:	b503      	push	{r0, r1, lr}
 800b8bc:	4601      	mov	r1, r0
 800b8be:	ab03      	add	r3, sp, #12
 800b8c0:	4805      	ldr	r0, [pc, #20]	; (800b8d8 <fiprintf+0x20>)
 800b8c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	f7ff fe95 	bl	800b5f8 <_vfiprintf_r>
 800b8ce:	b002      	add	sp, #8
 800b8d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8d4:	b003      	add	sp, #12
 800b8d6:	4770      	bx	lr
 800b8d8:	20000010 	.word	0x20000010

0800b8dc <_fstat_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d07      	ldr	r5, [pc, #28]	; (800b8fc <_fstat_r+0x20>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	f7f6 fbd2 	bl	8002092 <_fstat>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d102      	bne.n	800b8f8 <_fstat_r+0x1c>
 800b8f2:	682b      	ldr	r3, [r5, #0]
 800b8f4:	b103      	cbz	r3, 800b8f8 <_fstat_r+0x1c>
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20010884 	.word	0x20010884

0800b900 <_isatty_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	; (800b91c <_isatty_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f7f6 fbd1 	bl	80020b2 <_isatty>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_isatty_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_isatty_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20010884 	.word	0x20010884

0800b920 <__ascii_mbtowc>:
 800b920:	b082      	sub	sp, #8
 800b922:	b901      	cbnz	r1, 800b926 <__ascii_mbtowc+0x6>
 800b924:	a901      	add	r1, sp, #4
 800b926:	b142      	cbz	r2, 800b93a <__ascii_mbtowc+0x1a>
 800b928:	b14b      	cbz	r3, 800b93e <__ascii_mbtowc+0x1e>
 800b92a:	7813      	ldrb	r3, [r2, #0]
 800b92c:	600b      	str	r3, [r1, #0]
 800b92e:	7812      	ldrb	r2, [r2, #0]
 800b930:	1e10      	subs	r0, r2, #0
 800b932:	bf18      	it	ne
 800b934:	2001      	movne	r0, #1
 800b936:	b002      	add	sp, #8
 800b938:	4770      	bx	lr
 800b93a:	4610      	mov	r0, r2
 800b93c:	e7fb      	b.n	800b936 <__ascii_mbtowc+0x16>
 800b93e:	f06f 0001 	mvn.w	r0, #1
 800b942:	e7f8      	b.n	800b936 <__ascii_mbtowc+0x16>

0800b944 <__ascii_wctomb>:
 800b944:	b149      	cbz	r1, 800b95a <__ascii_wctomb+0x16>
 800b946:	2aff      	cmp	r2, #255	; 0xff
 800b948:	bf85      	ittet	hi
 800b94a:	238a      	movhi	r3, #138	; 0x8a
 800b94c:	6003      	strhi	r3, [r0, #0]
 800b94e:	700a      	strbls	r2, [r1, #0]
 800b950:	f04f 30ff 	movhi.w	r0, #4294967295
 800b954:	bf98      	it	ls
 800b956:	2001      	movls	r0, #1
 800b958:	4770      	bx	lr
 800b95a:	4608      	mov	r0, r1
 800b95c:	4770      	bx	lr

0800b95e <abort>:
 800b95e:	b508      	push	{r3, lr}
 800b960:	2006      	movs	r0, #6
 800b962:	f000 f82b 	bl	800b9bc <raise>
 800b966:	2001      	movs	r0, #1
 800b968:	f7f6 fb44 	bl	8001ff4 <_exit>

0800b96c <_raise_r>:
 800b96c:	291f      	cmp	r1, #31
 800b96e:	b538      	push	{r3, r4, r5, lr}
 800b970:	4604      	mov	r4, r0
 800b972:	460d      	mov	r5, r1
 800b974:	d904      	bls.n	800b980 <_raise_r+0x14>
 800b976:	2316      	movs	r3, #22
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b982:	b112      	cbz	r2, 800b98a <_raise_r+0x1e>
 800b984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b988:	b94b      	cbnz	r3, 800b99e <_raise_r+0x32>
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f830 	bl	800b9f0 <_getpid_r>
 800b990:	462a      	mov	r2, r5
 800b992:	4601      	mov	r1, r0
 800b994:	4620      	mov	r0, r4
 800b996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b99a:	f000 b817 	b.w	800b9cc <_kill_r>
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d00a      	beq.n	800b9b8 <_raise_r+0x4c>
 800b9a2:	1c59      	adds	r1, r3, #1
 800b9a4:	d103      	bne.n	800b9ae <_raise_r+0x42>
 800b9a6:	2316      	movs	r3, #22
 800b9a8:	6003      	str	r3, [r0, #0]
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	e7e7      	b.n	800b97e <_raise_r+0x12>
 800b9ae:	2400      	movs	r4, #0
 800b9b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	4798      	blx	r3
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e7e0      	b.n	800b97e <_raise_r+0x12>

0800b9bc <raise>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <raise+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f7ff bfd3 	b.w	800b96c <_raise_r>
 800b9c6:	bf00      	nop
 800b9c8:	20000010 	.word	0x20000010

0800b9cc <_kill_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d07      	ldr	r5, [pc, #28]	; (800b9ec <_kill_r+0x20>)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	602b      	str	r3, [r5, #0]
 800b9da:	f7f6 fafb 	bl	8001fd4 <_kill>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d102      	bne.n	800b9e8 <_kill_r+0x1c>
 800b9e2:	682b      	ldr	r3, [r5, #0]
 800b9e4:	b103      	cbz	r3, 800b9e8 <_kill_r+0x1c>
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20010884 	.word	0x20010884

0800b9f0 <_getpid_r>:
 800b9f0:	f7f6 bae8 	b.w	8001fc4 <_getpid>

0800b9f4 <_init>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr

0800ba00 <_fini>:
 800ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba02:	bf00      	nop
 800ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba06:	bc08      	pop	{r3}
 800ba08:	469e      	mov	lr, r3
 800ba0a:	4770      	bx	lr
